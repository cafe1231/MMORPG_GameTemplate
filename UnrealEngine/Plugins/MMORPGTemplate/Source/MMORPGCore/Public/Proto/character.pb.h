// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: character.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_character_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_character_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "base.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_character_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_character_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_character_2eproto;
namespace mmorpg {
class CharacterAppearance;
struct CharacterAppearanceDefaultTypeInternal;
extern CharacterAppearanceDefaultTypeInternal _CharacterAppearance_default_instance_;
class CharacterAppearance_CustomOptionsEntry_DoNotUse;
struct CharacterAppearance_CustomOptionsEntry_DoNotUseDefaultTypeInternal;
extern CharacterAppearance_CustomOptionsEntry_DoNotUseDefaultTypeInternal _CharacterAppearance_CustomOptionsEntry_DoNotUse_default_instance_;
class CharacterAttributes;
struct CharacterAttributesDefaultTypeInternal;
extern CharacterAttributesDefaultTypeInternal _CharacterAttributes_default_instance_;
class CharacterCreateRequest;
struct CharacterCreateRequestDefaultTypeInternal;
extern CharacterCreateRequestDefaultTypeInternal _CharacterCreateRequest_default_instance_;
class CharacterCreateResponse;
struct CharacterCreateResponseDefaultTypeInternal;
extern CharacterCreateResponseDefaultTypeInternal _CharacterCreateResponse_default_instance_;
class CharacterCreateResponse_ValidationErrorsEntry_DoNotUse;
struct CharacterCreateResponse_ValidationErrorsEntry_DoNotUseDefaultTypeInternal;
extern CharacterCreateResponse_ValidationErrorsEntry_DoNotUseDefaultTypeInternal _CharacterCreateResponse_ValidationErrorsEntry_DoNotUse_default_instance_;
class CharacterData;
struct CharacterDataDefaultTypeInternal;
extern CharacterDataDefaultTypeInternal _CharacterData_default_instance_;
class CharacterData_CurrenciesEntry_DoNotUse;
struct CharacterData_CurrenciesEntry_DoNotUseDefaultTypeInternal;
extern CharacterData_CurrenciesEntry_DoNotUseDefaultTypeInternal _CharacterData_CurrenciesEntry_DoNotUse_default_instance_;
class CharacterData_EquippedItemsEntry_DoNotUse;
struct CharacterData_EquippedItemsEntry_DoNotUseDefaultTypeInternal;
extern CharacterData_EquippedItemsEntry_DoNotUseDefaultTypeInternal _CharacterData_EquippedItemsEntry_DoNotUse_default_instance_;
class CharacterDeleteRequest;
struct CharacterDeleteRequestDefaultTypeInternal;
extern CharacterDeleteRequestDefaultTypeInternal _CharacterDeleteRequest_default_instance_;
class CharacterDeleteResponse;
struct CharacterDeleteResponseDefaultTypeInternal;
extern CharacterDeleteResponseDefaultTypeInternal _CharacterDeleteResponse_default_instance_;
class CharacterInfo;
struct CharacterInfoDefaultTypeInternal;
extern CharacterInfoDefaultTypeInternal _CharacterInfo_default_instance_;
class CharacterListRequest;
struct CharacterListRequestDefaultTypeInternal;
extern CharacterListRequestDefaultTypeInternal _CharacterListRequest_default_instance_;
class CharacterListResponse;
struct CharacterListResponseDefaultTypeInternal;
extern CharacterListResponseDefaultTypeInternal _CharacterListResponse_default_instance_;
class CharacterSelectRequest;
struct CharacterSelectRequestDefaultTypeInternal;
extern CharacterSelectRequestDefaultTypeInternal _CharacterSelectRequest_default_instance_;
class CharacterSelectResponse;
struct CharacterSelectResponseDefaultTypeInternal;
extern CharacterSelectResponseDefaultTypeInternal _CharacterSelectResponse_default_instance_;
class CharacterStats;
struct CharacterStatsDefaultTypeInternal;
extern CharacterStatsDefaultTypeInternal _CharacterStats_default_instance_;
class EquipmentPreview;
struct EquipmentPreviewDefaultTypeInternal;
extern EquipmentPreviewDefaultTypeInternal _EquipmentPreview_default_instance_;
}  // namespace mmorpg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mmorpg {
enum CharacterClass : int {
  CHARACTER_CLASS_UNSPECIFIED = 0,
  CHARACTER_CLASS_WARRIOR = 1,
  CHARACTER_CLASS_MAGE = 2,
  CHARACTER_CLASS_ARCHER = 3,
  CHARACTER_CLASS_ROGUE = 4,
  CHARACTER_CLASS_PRIEST = 5,
  CHARACTER_CLASS_PALADIN = 6,
  CHARACTER_CLASS_WARLOCK = 7,
  CHARACTER_CLASS_DRUID = 8,
  CharacterClass_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CharacterClass_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CharacterClass_IsValid(int value);
extern const uint32_t CharacterClass_internal_data_[];
constexpr CharacterClass CharacterClass_MIN = static_cast<CharacterClass>(0);
constexpr CharacterClass CharacterClass_MAX = static_cast<CharacterClass>(8);
constexpr int CharacterClass_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
CharacterClass_descriptor();
template <typename T>
const std::string& CharacterClass_Name(T value) {
  static_assert(std::is_same<T, CharacterClass>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CharacterClass_Name().");
  return CharacterClass_Name(static_cast<CharacterClass>(value));
}
template <>
inline const std::string& CharacterClass_Name(CharacterClass value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CharacterClass_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool CharacterClass_Parse(absl::string_view name, CharacterClass* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharacterClass>(
      CharacterClass_descriptor(), name, value);
}
enum CharacterRace : int {
  CHARACTER_RACE_UNSPECIFIED = 0,
  CHARACTER_RACE_HUMAN = 1,
  CHARACTER_RACE_ELF = 2,
  CHARACTER_RACE_DWARF = 3,
  CHARACTER_RACE_ORC = 4,
  CHARACTER_RACE_GNOME = 5,
  CHARACTER_RACE_UNDEAD = 6,
  CHARACTER_RACE_TROLL = 7,
  CHARACTER_RACE_HALFLING = 8,
  CharacterRace_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CharacterRace_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CharacterRace_IsValid(int value);
extern const uint32_t CharacterRace_internal_data_[];
constexpr CharacterRace CharacterRace_MIN = static_cast<CharacterRace>(0);
constexpr CharacterRace CharacterRace_MAX = static_cast<CharacterRace>(8);
constexpr int CharacterRace_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
CharacterRace_descriptor();
template <typename T>
const std::string& CharacterRace_Name(T value) {
  static_assert(std::is_same<T, CharacterRace>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CharacterRace_Name().");
  return CharacterRace_Name(static_cast<CharacterRace>(value));
}
template <>
inline const std::string& CharacterRace_Name(CharacterRace value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CharacterRace_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool CharacterRace_Parse(absl::string_view name, CharacterRace* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharacterRace>(
      CharacterRace_descriptor(), name, value);
}
enum Gender : int {
  GENDER_UNSPECIFIED = 0,
  GENDER_MALE = 1,
  GENDER_FEMALE = 2,
  GENDER_OTHER = 3,
  Gender_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Gender_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Gender_IsValid(int value);
extern const uint32_t Gender_internal_data_[];
constexpr Gender Gender_MIN = static_cast<Gender>(0);
constexpr Gender Gender_MAX = static_cast<Gender>(3);
constexpr int Gender_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
Gender_descriptor();
template <typename T>
const std::string& Gender_Name(T value) {
  static_assert(std::is_same<T, Gender>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Gender_Name().");
  return Gender_Name(static_cast<Gender>(value));
}
template <>
inline const std::string& Gender_Name(Gender value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Gender_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool Gender_Parse(absl::string_view name, Gender* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Gender>(
      Gender_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class EquipmentPreview final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.EquipmentPreview) */ {
 public:
  inline EquipmentPreview() : EquipmentPreview(nullptr) {}
  ~EquipmentPreview() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EquipmentPreview(::google::protobuf::internal::ConstantInitialized);

  inline EquipmentPreview(const EquipmentPreview& from)
      : EquipmentPreview(nullptr, from) {}
  EquipmentPreview(EquipmentPreview&& from) noexcept
    : EquipmentPreview() {
    *this = ::std::move(from);
  }

  inline EquipmentPreview& operator=(const EquipmentPreview& from) {
    CopyFrom(from);
    return *this;
  }
  inline EquipmentPreview& operator=(EquipmentPreview&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EquipmentPreview& default_instance() {
    return *internal_default_instance();
  }
  static inline const EquipmentPreview* internal_default_instance() {
    return reinterpret_cast<const EquipmentPreview*>(
               &_EquipmentPreview_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EquipmentPreview& a, EquipmentPreview& b) {
    a.Swap(&b);
  }
  inline void Swap(EquipmentPreview* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EquipmentPreview* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EquipmentPreview* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EquipmentPreview>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EquipmentPreview& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EquipmentPreview& from) {
    EquipmentPreview::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EquipmentPreview* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.EquipmentPreview";
  }
  protected:
  explicit EquipmentPreview(::google::protobuf::Arena* arena);
  EquipmentPreview(::google::protobuf::Arena* arena, const EquipmentPreview& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kIconIdFieldNumber = 3,
    kQualityFieldNumber = 4,
  };
  // string slot = 1;
  void clear_slot() ;
  const std::string& slot() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_slot(Arg_&& arg, Args_... args);
  std::string* mutable_slot();
  PROTOBUF_NODISCARD std::string* release_slot();
  void set_allocated_slot(std::string* value);

  private:
  const std::string& _internal_slot() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slot(
      const std::string& value);
  std::string* _internal_mutable_slot();

  public:
  // string item_id = 2;
  void clear_item_id() ;
  const std::string& item_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_item_id(Arg_&& arg, Args_... args);
  std::string* mutable_item_id();
  PROTOBUF_NODISCARD std::string* release_item_id();
  void set_allocated_item_id(std::string* value);

  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(
      const std::string& value);
  std::string* _internal_mutable_item_id();

  public:
  // string icon_id = 3;
  void clear_icon_id() ;
  const std::string& icon_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon_id(Arg_&& arg, Args_... args);
  std::string* mutable_icon_id();
  PROTOBUF_NODISCARD std::string* release_icon_id();
  void set_allocated_icon_id(std::string* value);

  private:
  const std::string& _internal_icon_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_id(
      const std::string& value);
  std::string* _internal_mutable_icon_id();

  public:
  // int32 quality = 4;
  void clear_quality() ;
  ::int32_t quality() const;
  void set_quality(::int32_t value);

  private:
  ::int32_t _internal_quality() const;
  void _internal_set_quality(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.EquipmentPreview)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr slot_;
    ::google::protobuf::internal::ArenaStringPtr item_id_;
    ::google::protobuf::internal::ArenaStringPtr icon_id_;
    ::int32_t quality_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterStats) */ {
 public:
  inline CharacterStats() : CharacterStats(nullptr) {}
  ~CharacterStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterStats(::google::protobuf::internal::ConstantInitialized);

  inline CharacterStats(const CharacterStats& from)
      : CharacterStats(nullptr, from) {}
  CharacterStats(CharacterStats&& from) noexcept
    : CharacterStats() {
    *this = ::std::move(from);
  }

  inline CharacterStats& operator=(const CharacterStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterStats& operator=(CharacterStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterStats* internal_default_instance() {
    return reinterpret_cast<const CharacterStats*>(
               &_CharacterStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CharacterStats& a, CharacterStats& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterStats* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterStats& from) {
    CharacterStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterStats* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterStats";
  }
  protected:
  explicit CharacterStats(::google::protobuf::Arena* arena);
  CharacterStats(::google::protobuf::Arena* arena, const CharacterStats& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 1,
    kMaxHealthFieldNumber = 2,
    kManaFieldNumber = 3,
    kMaxManaFieldNumber = 4,
    kStaminaFieldNumber = 5,
    kMaxStaminaFieldNumber = 6,
    kAttackPowerFieldNumber = 7,
    kSpellPowerFieldNumber = 8,
    kDefenseFieldNumber = 9,
    kMagicResistanceFieldNumber = 10,
    kCriticalChanceFieldNumber = 11,
    kCriticalDamageFieldNumber = 12,
    kDodgeChanceFieldNumber = 13,
    kBlockChanceFieldNumber = 14,
    kMovementSpeedFieldNumber = 15,
    kAttackSpeedFieldNumber = 16,
    kCastSpeedFieldNumber = 17,
  };
  // int32 health = 1;
  void clear_health() ;
  ::int32_t health() const;
  void set_health(::int32_t value);

  private:
  ::int32_t _internal_health() const;
  void _internal_set_health(::int32_t value);

  public:
  // int32 max_health = 2;
  void clear_max_health() ;
  ::int32_t max_health() const;
  void set_max_health(::int32_t value);

  private:
  ::int32_t _internal_max_health() const;
  void _internal_set_max_health(::int32_t value);

  public:
  // int32 mana = 3;
  void clear_mana() ;
  ::int32_t mana() const;
  void set_mana(::int32_t value);

  private:
  ::int32_t _internal_mana() const;
  void _internal_set_mana(::int32_t value);

  public:
  // int32 max_mana = 4;
  void clear_max_mana() ;
  ::int32_t max_mana() const;
  void set_max_mana(::int32_t value);

  private:
  ::int32_t _internal_max_mana() const;
  void _internal_set_max_mana(::int32_t value);

  public:
  // int32 stamina = 5;
  void clear_stamina() ;
  ::int32_t stamina() const;
  void set_stamina(::int32_t value);

  private:
  ::int32_t _internal_stamina() const;
  void _internal_set_stamina(::int32_t value);

  public:
  // int32 max_stamina = 6;
  void clear_max_stamina() ;
  ::int32_t max_stamina() const;
  void set_max_stamina(::int32_t value);

  private:
  ::int32_t _internal_max_stamina() const;
  void _internal_set_max_stamina(::int32_t value);

  public:
  // int32 attack_power = 7;
  void clear_attack_power() ;
  ::int32_t attack_power() const;
  void set_attack_power(::int32_t value);

  private:
  ::int32_t _internal_attack_power() const;
  void _internal_set_attack_power(::int32_t value);

  public:
  // int32 spell_power = 8;
  void clear_spell_power() ;
  ::int32_t spell_power() const;
  void set_spell_power(::int32_t value);

  private:
  ::int32_t _internal_spell_power() const;
  void _internal_set_spell_power(::int32_t value);

  public:
  // int32 defense = 9;
  void clear_defense() ;
  ::int32_t defense() const;
  void set_defense(::int32_t value);

  private:
  ::int32_t _internal_defense() const;
  void _internal_set_defense(::int32_t value);

  public:
  // int32 magic_resistance = 10;
  void clear_magic_resistance() ;
  ::int32_t magic_resistance() const;
  void set_magic_resistance(::int32_t value);

  private:
  ::int32_t _internal_magic_resistance() const;
  void _internal_set_magic_resistance(::int32_t value);

  public:
  // float critical_chance = 11;
  void clear_critical_chance() ;
  float critical_chance() const;
  void set_critical_chance(float value);

  private:
  float _internal_critical_chance() const;
  void _internal_set_critical_chance(float value);

  public:
  // float critical_damage = 12;
  void clear_critical_damage() ;
  float critical_damage() const;
  void set_critical_damage(float value);

  private:
  float _internal_critical_damage() const;
  void _internal_set_critical_damage(float value);

  public:
  // float dodge_chance = 13;
  void clear_dodge_chance() ;
  float dodge_chance() const;
  void set_dodge_chance(float value);

  private:
  float _internal_dodge_chance() const;
  void _internal_set_dodge_chance(float value);

  public:
  // float block_chance = 14;
  void clear_block_chance() ;
  float block_chance() const;
  void set_block_chance(float value);

  private:
  float _internal_block_chance() const;
  void _internal_set_block_chance(float value);

  public:
  // float movement_speed = 15;
  void clear_movement_speed() ;
  float movement_speed() const;
  void set_movement_speed(float value);

  private:
  float _internal_movement_speed() const;
  void _internal_set_movement_speed(float value);

  public:
  // float attack_speed = 16;
  void clear_attack_speed() ;
  float attack_speed() const;
  void set_attack_speed(float value);

  private:
  float _internal_attack_speed() const;
  void _internal_set_attack_speed(float value);

  public:
  // float cast_speed = 17;
  void clear_cast_speed() ;
  float cast_speed() const;
  void set_cast_speed(float value);

  private:
  float _internal_cast_speed() const;
  void _internal_set_cast_speed(float value);

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterStats)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 17, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t health_;
    ::int32_t max_health_;
    ::int32_t mana_;
    ::int32_t max_mana_;
    ::int32_t stamina_;
    ::int32_t max_stamina_;
    ::int32_t attack_power_;
    ::int32_t spell_power_;
    ::int32_t defense_;
    ::int32_t magic_resistance_;
    float critical_chance_;
    float critical_damage_;
    float dodge_chance_;
    float block_chance_;
    float movement_speed_;
    float attack_speed_;
    float cast_speed_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterSelectRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterSelectRequest) */ {
 public:
  inline CharacterSelectRequest() : CharacterSelectRequest(nullptr) {}
  ~CharacterSelectRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterSelectRequest(::google::protobuf::internal::ConstantInitialized);

  inline CharacterSelectRequest(const CharacterSelectRequest& from)
      : CharacterSelectRequest(nullptr, from) {}
  CharacterSelectRequest(CharacterSelectRequest&& from) noexcept
    : CharacterSelectRequest() {
    *this = ::std::move(from);
  }

  inline CharacterSelectRequest& operator=(const CharacterSelectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterSelectRequest& operator=(CharacterSelectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterSelectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterSelectRequest* internal_default_instance() {
    return reinterpret_cast<const CharacterSelectRequest*>(
               &_CharacterSelectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CharacterSelectRequest& a, CharacterSelectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterSelectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterSelectRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterSelectRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterSelectRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterSelectRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterSelectRequest& from) {
    CharacterSelectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterSelectRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterSelectRequest";
  }
  protected:
  explicit CharacterSelectRequest(::google::protobuf::Arena* arena);
  CharacterSelectRequest(::google::protobuf::Arena* arena, const CharacterSelectRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
  };
  // string character_id = 1;
  void clear_character_id() ;
  const std::string& character_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character_id(Arg_&& arg, Args_... args);
  std::string* mutable_character_id();
  PROTOBUF_NODISCARD std::string* release_character_id();
  void set_allocated_character_id(std::string* value);

  private:
  const std::string& _internal_character_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_id(
      const std::string& value);
  std::string* _internal_mutable_character_id();

  public:
  // string session_id = 2;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterSelectRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr character_id_;
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterListRequest) */ {
 public:
  inline CharacterListRequest() : CharacterListRequest(nullptr) {}
  ~CharacterListRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterListRequest(::google::protobuf::internal::ConstantInitialized);

  inline CharacterListRequest(const CharacterListRequest& from)
      : CharacterListRequest(nullptr, from) {}
  CharacterListRequest(CharacterListRequest&& from) noexcept
    : CharacterListRequest() {
    *this = ::std::move(from);
  }

  inline CharacterListRequest& operator=(const CharacterListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterListRequest& operator=(CharacterListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterListRequest* internal_default_instance() {
    return reinterpret_cast<const CharacterListRequest*>(
               &_CharacterListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CharacterListRequest& a, CharacterListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterListRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterListRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterListRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterListRequest& from) {
    CharacterListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterListRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterListRequest";
  }
  protected:
  explicit CharacterListRequest(::google::protobuf::Arena* arena);
  CharacterListRequest(::google::protobuf::Arena* arena, const CharacterListRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* value);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string session_id = 2;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterListRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr user_id_;
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterDeleteResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterDeleteResponse) */ {
 public:
  inline CharacterDeleteResponse() : CharacterDeleteResponse(nullptr) {}
  ~CharacterDeleteResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterDeleteResponse(::google::protobuf::internal::ConstantInitialized);

  inline CharacterDeleteResponse(const CharacterDeleteResponse& from)
      : CharacterDeleteResponse(nullptr, from) {}
  CharacterDeleteResponse(CharacterDeleteResponse&& from) noexcept
    : CharacterDeleteResponse() {
    *this = ::std::move(from);
  }

  inline CharacterDeleteResponse& operator=(const CharacterDeleteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterDeleteResponse& operator=(CharacterDeleteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterDeleteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterDeleteResponse* internal_default_instance() {
    return reinterpret_cast<const CharacterDeleteResponse*>(
               &_CharacterDeleteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CharacterDeleteResponse& a, CharacterDeleteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterDeleteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterDeleteResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterDeleteResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterDeleteResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterDeleteResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterDeleteResponse& from) {
    CharacterDeleteResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterDeleteResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterDeleteResponse";
  }
  protected:
  explicit CharacterDeleteResponse(::google::protobuf::Arena* arena);
  CharacterDeleteResponse(::google::protobuf::Arena* arena, const CharacterDeleteResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 3,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // .mmorpg.ErrorCode error_code = 3;
  void clear_error_code() ;
  ::mmorpg::ErrorCode error_code() const;
  void set_error_code(::mmorpg::ErrorCode value);

  private:
  ::mmorpg::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::mmorpg::ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterDeleteResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    bool success_;
    int error_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterDeleteRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterDeleteRequest) */ {
 public:
  inline CharacterDeleteRequest() : CharacterDeleteRequest(nullptr) {}
  ~CharacterDeleteRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterDeleteRequest(::google::protobuf::internal::ConstantInitialized);

  inline CharacterDeleteRequest(const CharacterDeleteRequest& from)
      : CharacterDeleteRequest(nullptr, from) {}
  CharacterDeleteRequest(CharacterDeleteRequest&& from) noexcept
    : CharacterDeleteRequest() {
    *this = ::std::move(from);
  }

  inline CharacterDeleteRequest& operator=(const CharacterDeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterDeleteRequest& operator=(CharacterDeleteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterDeleteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterDeleteRequest* internal_default_instance() {
    return reinterpret_cast<const CharacterDeleteRequest*>(
               &_CharacterDeleteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CharacterDeleteRequest& a, CharacterDeleteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterDeleteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterDeleteRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterDeleteRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterDeleteRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterDeleteRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterDeleteRequest& from) {
    CharacterDeleteRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterDeleteRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterDeleteRequest";
  }
  protected:
  explicit CharacterDeleteRequest(::google::protobuf::Arena* arena);
  CharacterDeleteRequest(::google::protobuf::Arena* arena, const CharacterDeleteRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterIdFieldNumber = 1,
    kSessionIdFieldNumber = 2,
    kConfirmationCodeFieldNumber = 3,
  };
  // string character_id = 1;
  void clear_character_id() ;
  const std::string& character_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character_id(Arg_&& arg, Args_... args);
  std::string* mutable_character_id();
  PROTOBUF_NODISCARD std::string* release_character_id();
  void set_allocated_character_id(std::string* value);

  private:
  const std::string& _internal_character_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_id(
      const std::string& value);
  std::string* _internal_mutable_character_id();

  public:
  // string session_id = 2;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // string confirmation_code = 3;
  void clear_confirmation_code() ;
  const std::string& confirmation_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_confirmation_code(Arg_&& arg, Args_... args);
  std::string* mutable_confirmation_code();
  PROTOBUF_NODISCARD std::string* release_confirmation_code();
  void set_allocated_confirmation_code(std::string* value);

  private:
  const std::string& _internal_confirmation_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_confirmation_code(
      const std::string& value);
  std::string* _internal_mutable_confirmation_code();

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterDeleteRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      77, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr character_id_;
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::google::protobuf::internal::ArenaStringPtr confirmation_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterData_EquippedItemsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          CharacterData_EquippedItemsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      CharacterData_EquippedItemsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CharacterData_EquippedItemsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterData_EquippedItemsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CharacterData_EquippedItemsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CharacterData_EquippedItemsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CharacterData_EquippedItemsEntry_DoNotUse*>(
        &_CharacterData_EquippedItemsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "mmorpg.CharacterData.EquippedItemsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "mmorpg.CharacterData.EquippedItemsEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_character_2eproto;
};
// -------------------------------------------------------------------

class CharacterData_CurrenciesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          CharacterData_CurrenciesEntry_DoNotUse, std::string, ::int64_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT64> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      CharacterData_CurrenciesEntry_DoNotUse, std::string, ::int64_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64>;
  CharacterData_CurrenciesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterData_CurrenciesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CharacterData_CurrenciesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CharacterData_CurrenciesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CharacterData_CurrenciesEntry_DoNotUse*>(
        &_CharacterData_CurrenciesEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "mmorpg.CharacterData.CurrenciesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_character_2eproto;
};
// -------------------------------------------------------------------

class CharacterCreateResponse_ValidationErrorsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          CharacterCreateResponse_ValidationErrorsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      CharacterCreateResponse_ValidationErrorsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  CharacterCreateResponse_ValidationErrorsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterCreateResponse_ValidationErrorsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CharacterCreateResponse_ValidationErrorsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CharacterCreateResponse_ValidationErrorsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CharacterCreateResponse_ValidationErrorsEntry_DoNotUse*>(
        &_CharacterCreateResponse_ValidationErrorsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "mmorpg.CharacterCreateResponse.ValidationErrorsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "mmorpg.CharacterCreateResponse.ValidationErrorsEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_character_2eproto;
};
// -------------------------------------------------------------------

class CharacterAttributes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterAttributes) */ {
 public:
  inline CharacterAttributes() : CharacterAttributes(nullptr) {}
  ~CharacterAttributes() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterAttributes(::google::protobuf::internal::ConstantInitialized);

  inline CharacterAttributes(const CharacterAttributes& from)
      : CharacterAttributes(nullptr, from) {}
  CharacterAttributes(CharacterAttributes&& from) noexcept
    : CharacterAttributes() {
    *this = ::std::move(from);
  }

  inline CharacterAttributes& operator=(const CharacterAttributes& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterAttributes& operator=(CharacterAttributes&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterAttributes& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterAttributes* internal_default_instance() {
    return reinterpret_cast<const CharacterAttributes*>(
               &_CharacterAttributes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CharacterAttributes& a, CharacterAttributes& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterAttributes* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterAttributes* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterAttributes* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterAttributes>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterAttributes& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterAttributes& from) {
    CharacterAttributes::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterAttributes* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterAttributes";
  }
  protected:
  explicit CharacterAttributes(::google::protobuf::Arena* arena);
  CharacterAttributes(::google::protobuf::Arena* arena, const CharacterAttributes& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrengthFieldNumber = 1,
    kAgilityFieldNumber = 2,
    kIntelligenceFieldNumber = 3,
    kWisdomFieldNumber = 4,
    kConstitutionFieldNumber = 5,
    kCharismaFieldNumber = 6,
    kUnspentPointsFieldNumber = 7,
  };
  // int32 strength = 1;
  void clear_strength() ;
  ::int32_t strength() const;
  void set_strength(::int32_t value);

  private:
  ::int32_t _internal_strength() const;
  void _internal_set_strength(::int32_t value);

  public:
  // int32 agility = 2;
  void clear_agility() ;
  ::int32_t agility() const;
  void set_agility(::int32_t value);

  private:
  ::int32_t _internal_agility() const;
  void _internal_set_agility(::int32_t value);

  public:
  // int32 intelligence = 3;
  void clear_intelligence() ;
  ::int32_t intelligence() const;
  void set_intelligence(::int32_t value);

  private:
  ::int32_t _internal_intelligence() const;
  void _internal_set_intelligence(::int32_t value);

  public:
  // int32 wisdom = 4;
  void clear_wisdom() ;
  ::int32_t wisdom() const;
  void set_wisdom(::int32_t value);

  private:
  ::int32_t _internal_wisdom() const;
  void _internal_set_wisdom(::int32_t value);

  public:
  // int32 constitution = 5;
  void clear_constitution() ;
  ::int32_t constitution() const;
  void set_constitution(::int32_t value);

  private:
  ::int32_t _internal_constitution() const;
  void _internal_set_constitution(::int32_t value);

  public:
  // int32 charisma = 6;
  void clear_charisma() ;
  ::int32_t charisma() const;
  void set_charisma(::int32_t value);

  private:
  ::int32_t _internal_charisma() const;
  void _internal_set_charisma(::int32_t value);

  public:
  // int32 unspent_points = 7;
  void clear_unspent_points() ;
  ::int32_t unspent_points() const;
  void set_unspent_points(::int32_t value);

  private:
  ::int32_t _internal_unspent_points() const;
  void _internal_set_unspent_points(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterAttributes)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t strength_;
    ::int32_t agility_;
    ::int32_t intelligence_;
    ::int32_t wisdom_;
    ::int32_t constitution_;
    ::int32_t charisma_;
    ::int32_t unspent_points_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterAppearance_CustomOptionsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          CharacterAppearance_CustomOptionsEntry_DoNotUse, std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      CharacterAppearance_CustomOptionsEntry_DoNotUse, std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  CharacterAppearance_CustomOptionsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterAppearance_CustomOptionsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit CharacterAppearance_CustomOptionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const CharacterAppearance_CustomOptionsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const CharacterAppearance_CustomOptionsEntry_DoNotUse*>(
        &_CharacterAppearance_CustomOptionsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "mmorpg.CharacterAppearance.CustomOptionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_character_2eproto;
};
// -------------------------------------------------------------------

class CharacterAppearance final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterAppearance) */ {
 public:
  inline CharacterAppearance() : CharacterAppearance(nullptr) {}
  ~CharacterAppearance() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterAppearance(::google::protobuf::internal::ConstantInitialized);

  inline CharacterAppearance(const CharacterAppearance& from)
      : CharacterAppearance(nullptr, from) {}
  CharacterAppearance(CharacterAppearance&& from) noexcept
    : CharacterAppearance() {
    *this = ::std::move(from);
  }

  inline CharacterAppearance& operator=(const CharacterAppearance& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterAppearance& operator=(CharacterAppearance&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterAppearance& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterAppearance* internal_default_instance() {
    return reinterpret_cast<const CharacterAppearance*>(
               &_CharacterAppearance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CharacterAppearance& a, CharacterAppearance& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterAppearance* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterAppearance* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterAppearance* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterAppearance>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterAppearance& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterAppearance& from) {
    CharacterAppearance::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterAppearance* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterAppearance";
  }
  protected:
  explicit CharacterAppearance(::google::protobuf::Arena* arena);
  CharacterAppearance(::google::protobuf::Arena* arena, const CharacterAppearance& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCustomOptionsFieldNumber = 8,
    kFaceTypeFieldNumber = 1,
    kHairStyleFieldNumber = 2,
    kHairColorFieldNumber = 3,
    kSkinColorFieldNumber = 4,
    kEyeColorFieldNumber = 5,
    kHeightFieldNumber = 6,
    kBuildFieldNumber = 7,
  };
  // map<string, int32> custom_options = 8;
  int custom_options_size() const;
  private:
  int _internal_custom_options_size() const;

  public:
  void clear_custom_options() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& custom_options() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_custom_options();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_custom_options() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_custom_options();

  public:
  // int32 face_type = 1;
  void clear_face_type() ;
  ::int32_t face_type() const;
  void set_face_type(::int32_t value);

  private:
  ::int32_t _internal_face_type() const;
  void _internal_set_face_type(::int32_t value);

  public:
  // int32 hair_style = 2;
  void clear_hair_style() ;
  ::int32_t hair_style() const;
  void set_hair_style(::int32_t value);

  private:
  ::int32_t _internal_hair_style() const;
  void _internal_set_hair_style(::int32_t value);

  public:
  // int32 hair_color = 3;
  void clear_hair_color() ;
  ::int32_t hair_color() const;
  void set_hair_color(::int32_t value);

  private:
  ::int32_t _internal_hair_color() const;
  void _internal_set_hair_color(::int32_t value);

  public:
  // int32 skin_color = 4;
  void clear_skin_color() ;
  ::int32_t skin_color() const;
  void set_skin_color(::int32_t value);

  private:
  ::int32_t _internal_skin_color() const;
  void _internal_set_skin_color(::int32_t value);

  public:
  // int32 eye_color = 5;
  void clear_eye_color() ;
  ::int32_t eye_color() const;
  void set_eye_color(::int32_t value);

  private:
  ::int32_t _internal_eye_color() const;
  void _internal_set_eye_color(::int32_t value);

  public:
  // float height = 6;
  void clear_height() ;
  float height() const;
  void set_height(float value);

  private:
  float _internal_height() const;
  void _internal_set_height(float value);

  public:
  // float build = 7;
  void clear_build() ;
  float build() const;
  void set_build(float value);

  private:
  float _internal_build() const;
  void _internal_set_build(float value);

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterAppearance)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 8, 1,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::MapField<CharacterAppearance_CustomOptionsEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        custom_options_;
    ::int32_t face_type_;
    ::int32_t hair_style_;
    ::int32_t hair_color_;
    ::int32_t skin_color_;
    ::int32_t eye_color_;
    float height_;
    float build_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterInfo) */ {
 public:
  inline CharacterInfo() : CharacterInfo(nullptr) {}
  ~CharacterInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterInfo(::google::protobuf::internal::ConstantInitialized);

  inline CharacterInfo(const CharacterInfo& from)
      : CharacterInfo(nullptr, from) {}
  CharacterInfo(CharacterInfo&& from) noexcept
    : CharacterInfo() {
    *this = ::std::move(from);
  }

  inline CharacterInfo& operator=(const CharacterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterInfo& operator=(CharacterInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterInfo* internal_default_instance() {
    return reinterpret_cast<const CharacterInfo*>(
               &_CharacterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CharacterInfo& a, CharacterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterInfo& from) {
    CharacterInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterInfo";
  }
  protected:
  explicit CharacterInfo(::google::protobuf::Arena* arena);
  CharacterInfo(::google::protobuf::Arena* arena, const CharacterInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentPreviewFieldNumber = 12,
    kCharacterIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kLocationFieldNumber = 7,
    kCreatedAtFieldNumber = 8,
    kLastPlayedFieldNumber = 9,
    kAppearanceFieldNumber = 11,
    kClassFieldNumber = 3,
    kRaceFieldNumber = 4,
    kGenderFieldNumber = 5,
    kLevelFieldNumber = 6,
    kPlaytimeSecondsFieldNumber = 10,
  };
  // repeated .mmorpg.EquipmentPreview equipment_preview = 12;
  int equipment_preview_size() const;
  private:
  int _internal_equipment_preview_size() const;

  public:
  void clear_equipment_preview() ;
  ::mmorpg::EquipmentPreview* mutable_equipment_preview(int index);
  ::google::protobuf::RepeatedPtrField< ::mmorpg::EquipmentPreview >*
      mutable_equipment_preview();
  private:
  const ::google::protobuf::RepeatedPtrField<::mmorpg::EquipmentPreview>& _internal_equipment_preview() const;
  ::google::protobuf::RepeatedPtrField<::mmorpg::EquipmentPreview>* _internal_mutable_equipment_preview();
  public:
  const ::mmorpg::EquipmentPreview& equipment_preview(int index) const;
  ::mmorpg::EquipmentPreview* add_equipment_preview();
  const ::google::protobuf::RepeatedPtrField< ::mmorpg::EquipmentPreview >&
      equipment_preview() const;
  // string character_id = 1;
  void clear_character_id() ;
  const std::string& character_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character_id(Arg_&& arg, Args_... args);
  std::string* mutable_character_id();
  PROTOBUF_NODISCARD std::string* release_character_id();
  void set_allocated_character_id(std::string* value);

  private:
  const std::string& _internal_character_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_id(
      const std::string& value);
  std::string* _internal_mutable_character_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string location = 7;
  void clear_location() ;
  const std::string& location() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* value);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // .google.protobuf.Timestamp created_at = 8;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // .google.protobuf.Timestamp last_played = 9;
  bool has_last_played() const;
  void clear_last_played() ;
  const ::google::protobuf::Timestamp& last_played() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_played();
  ::google::protobuf::Timestamp* mutable_last_played();
  void set_allocated_last_played(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_played(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_played();

  private:
  const ::google::protobuf::Timestamp& _internal_last_played() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_played();

  public:
  // .mmorpg.CharacterAppearance appearance = 11;
  bool has_appearance() const;
  void clear_appearance() ;
  const ::mmorpg::CharacterAppearance& appearance() const;
  PROTOBUF_NODISCARD ::mmorpg::CharacterAppearance* release_appearance();
  ::mmorpg::CharacterAppearance* mutable_appearance();
  void set_allocated_appearance(::mmorpg::CharacterAppearance* value);
  void unsafe_arena_set_allocated_appearance(::mmorpg::CharacterAppearance* value);
  ::mmorpg::CharacterAppearance* unsafe_arena_release_appearance();

  private:
  const ::mmorpg::CharacterAppearance& _internal_appearance() const;
  ::mmorpg::CharacterAppearance* _internal_mutable_appearance();

  public:
  // .mmorpg.CharacterClass class = 3;
  void clear_class_() ;
  ::mmorpg::CharacterClass class_() const;
  void set_class_(::mmorpg::CharacterClass value);

  private:
  ::mmorpg::CharacterClass _internal_class_() const;
  void _internal_set_class_(::mmorpg::CharacterClass value);

  public:
  // .mmorpg.CharacterRace race = 4;
  void clear_race() ;
  ::mmorpg::CharacterRace race() const;
  void set_race(::mmorpg::CharacterRace value);

  private:
  ::mmorpg::CharacterRace _internal_race() const;
  void _internal_set_race(::mmorpg::CharacterRace value);

  public:
  // .mmorpg.Gender gender = 5;
  void clear_gender() ;
  ::mmorpg::Gender gender() const;
  void set_gender(::mmorpg::Gender value);

  private:
  ::mmorpg::Gender _internal_gender() const;
  void _internal_set_gender(::mmorpg::Gender value);

  public:
  // int32 level = 6;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // int64 playtime_seconds = 10;
  void clear_playtime_seconds() ;
  ::int64_t playtime_seconds() const;
  void set_playtime_seconds(::int64_t value);

  private:
  ::int64_t _internal_playtime_seconds() const;
  void _internal_set_playtime_seconds(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 4,
      61, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::mmorpg::EquipmentPreview > equipment_preview_;
    ::google::protobuf::internal::ArenaStringPtr character_id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr location_;
    ::google::protobuf::Timestamp* created_at_;
    ::google::protobuf::Timestamp* last_played_;
    ::mmorpg::CharacterAppearance* appearance_;
    int class__;
    int race_;
    int gender_;
    ::int32_t level_;
    ::int64_t playtime_seconds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterData final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterData) */ {
 public:
  inline CharacterData() : CharacterData(nullptr) {}
  ~CharacterData() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterData(::google::protobuf::internal::ConstantInitialized);

  inline CharacterData(const CharacterData& from)
      : CharacterData(nullptr, from) {}
  CharacterData(CharacterData&& from) noexcept
    : CharacterData() {
    *this = ::std::move(from);
  }

  inline CharacterData& operator=(const CharacterData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterData& operator=(CharacterData&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterData* internal_default_instance() {
    return reinterpret_cast<const CharacterData*>(
               &_CharacterData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CharacterData& a, CharacterData& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterData* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterData& from) {
    CharacterData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterData* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterData";
  }
  protected:
  explicit CharacterData(::google::protobuf::Arena* arena);
  CharacterData(::google::protobuf::Arena* arena, const CharacterData& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEquippedItemsFieldNumber = 14,
    kCurrenciesFieldNumber = 15,
    kCharacterIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kLastZoneIdFieldNumber = 12,
    kStatsFieldNumber = 6,
    kAttributesFieldNumber = 7,
    kLastTransformFieldNumber = 11,
    kAppearanceFieldNumber = 13,
    kCreatedAtFieldNumber = 16,
    kLastPlayedFieldNumber = 17,
    kClassFieldNumber = 3,
    kRaceFieldNumber = 4,
    kGenderFieldNumber = 5,
    kLevelFieldNumber = 8,
    kExperienceFieldNumber = 9,
    kExperienceToNextLevelFieldNumber = 10,
    kPlaytimeSecondsFieldNumber = 18,
  };
  // map<string, string> equipped_items = 14;
  int equipped_items_size() const;
  private:
  int _internal_equipped_items_size() const;

  public:
  void clear_equipped_items() ;
  const ::google::protobuf::Map<std::string, std::string>& equipped_items() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_equipped_items();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_equipped_items() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_equipped_items();

  public:
  // map<string, int64> currencies = 15;
  int currencies_size() const;
  private:
  int _internal_currencies_size() const;

  public:
  void clear_currencies() ;
  const ::google::protobuf::Map<std::string, ::int64_t>& currencies() const;
  ::google::protobuf::Map<std::string, ::int64_t>* mutable_currencies();

  private:
  const ::google::protobuf::Map<std::string, ::int64_t>& _internal_currencies() const;
  ::google::protobuf::Map<std::string, ::int64_t>* _internal_mutable_currencies();

  public:
  // string character_id = 1;
  void clear_character_id() ;
  const std::string& character_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_character_id(Arg_&& arg, Args_... args);
  std::string* mutable_character_id();
  PROTOBUF_NODISCARD std::string* release_character_id();
  void set_allocated_character_id(std::string* value);

  private:
  const std::string& _internal_character_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_id(
      const std::string& value);
  std::string* _internal_mutable_character_id();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string last_zone_id = 12;
  void clear_last_zone_id() ;
  const std::string& last_zone_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_last_zone_id(Arg_&& arg, Args_... args);
  std::string* mutable_last_zone_id();
  PROTOBUF_NODISCARD std::string* release_last_zone_id();
  void set_allocated_last_zone_id(std::string* value);

  private:
  const std::string& _internal_last_zone_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_zone_id(
      const std::string& value);
  std::string* _internal_mutable_last_zone_id();

  public:
  // .mmorpg.CharacterStats stats = 6;
  bool has_stats() const;
  void clear_stats() ;
  const ::mmorpg::CharacterStats& stats() const;
  PROTOBUF_NODISCARD ::mmorpg::CharacterStats* release_stats();
  ::mmorpg::CharacterStats* mutable_stats();
  void set_allocated_stats(::mmorpg::CharacterStats* value);
  void unsafe_arena_set_allocated_stats(::mmorpg::CharacterStats* value);
  ::mmorpg::CharacterStats* unsafe_arena_release_stats();

  private:
  const ::mmorpg::CharacterStats& _internal_stats() const;
  ::mmorpg::CharacterStats* _internal_mutable_stats();

  public:
  // .mmorpg.CharacterAttributes attributes = 7;
  bool has_attributes() const;
  void clear_attributes() ;
  const ::mmorpg::CharacterAttributes& attributes() const;
  PROTOBUF_NODISCARD ::mmorpg::CharacterAttributes* release_attributes();
  ::mmorpg::CharacterAttributes* mutable_attributes();
  void set_allocated_attributes(::mmorpg::CharacterAttributes* value);
  void unsafe_arena_set_allocated_attributes(::mmorpg::CharacterAttributes* value);
  ::mmorpg::CharacterAttributes* unsafe_arena_release_attributes();

  private:
  const ::mmorpg::CharacterAttributes& _internal_attributes() const;
  ::mmorpg::CharacterAttributes* _internal_mutable_attributes();

  public:
  // .mmorpg.Transform last_transform = 11;
  bool has_last_transform() const;
  void clear_last_transform() ;
  const ::mmorpg::Transform& last_transform() const;
  PROTOBUF_NODISCARD ::mmorpg::Transform* release_last_transform();
  ::mmorpg::Transform* mutable_last_transform();
  void set_allocated_last_transform(::mmorpg::Transform* value);
  void unsafe_arena_set_allocated_last_transform(::mmorpg::Transform* value);
  ::mmorpg::Transform* unsafe_arena_release_last_transform();

  private:
  const ::mmorpg::Transform& _internal_last_transform() const;
  ::mmorpg::Transform* _internal_mutable_last_transform();

  public:
  // .mmorpg.CharacterAppearance appearance = 13;
  bool has_appearance() const;
  void clear_appearance() ;
  const ::mmorpg::CharacterAppearance& appearance() const;
  PROTOBUF_NODISCARD ::mmorpg::CharacterAppearance* release_appearance();
  ::mmorpg::CharacterAppearance* mutable_appearance();
  void set_allocated_appearance(::mmorpg::CharacterAppearance* value);
  void unsafe_arena_set_allocated_appearance(::mmorpg::CharacterAppearance* value);
  ::mmorpg::CharacterAppearance* unsafe_arena_release_appearance();

  private:
  const ::mmorpg::CharacterAppearance& _internal_appearance() const;
  ::mmorpg::CharacterAppearance* _internal_mutable_appearance();

  public:
  // .google.protobuf.Timestamp created_at = 16;
  bool has_created_at() const;
  void clear_created_at() ;
  const ::google::protobuf::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_created_at();
  ::google::protobuf::Timestamp* mutable_created_at();
  void set_allocated_created_at(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_created_at();

  private:
  const ::google::protobuf::Timestamp& _internal_created_at() const;
  ::google::protobuf::Timestamp* _internal_mutable_created_at();

  public:
  // .google.protobuf.Timestamp last_played = 17;
  bool has_last_played() const;
  void clear_last_played() ;
  const ::google::protobuf::Timestamp& last_played() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_played();
  ::google::protobuf::Timestamp* mutable_last_played();
  void set_allocated_last_played(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_played(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_played();

  private:
  const ::google::protobuf::Timestamp& _internal_last_played() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_played();

  public:
  // .mmorpg.CharacterClass class = 3;
  void clear_class_() ;
  ::mmorpg::CharacterClass class_() const;
  void set_class_(::mmorpg::CharacterClass value);

  private:
  ::mmorpg::CharacterClass _internal_class_() const;
  void _internal_set_class_(::mmorpg::CharacterClass value);

  public:
  // .mmorpg.CharacterRace race = 4;
  void clear_race() ;
  ::mmorpg::CharacterRace race() const;
  void set_race(::mmorpg::CharacterRace value);

  private:
  ::mmorpg::CharacterRace _internal_race() const;
  void _internal_set_race(::mmorpg::CharacterRace value);

  public:
  // .mmorpg.Gender gender = 5;
  void clear_gender() ;
  ::mmorpg::Gender gender() const;
  void set_gender(::mmorpg::Gender value);

  private:
  ::mmorpg::Gender _internal_gender() const;
  void _internal_set_gender(::mmorpg::Gender value);

  public:
  // int32 level = 8;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // int64 experience = 9;
  void clear_experience() ;
  ::int64_t experience() const;
  void set_experience(::int64_t value);

  private:
  ::int64_t _internal_experience() const;
  void _internal_set_experience(::int64_t value);

  public:
  // int64 experience_to_next_level = 10;
  void clear_experience_to_next_level() ;
  ::int64_t experience_to_next_level() const;
  void set_experience_to_next_level(::int64_t value);

  private:
  ::int64_t _internal_experience_to_next_level() const;
  void _internal_set_experience_to_next_level(::int64_t value);

  public:
  // int64 playtime_seconds = 18;
  void clear_playtime_seconds() ;
  ::int64_t playtime_seconds() const;
  void set_playtime_seconds(::int64_t value);

  private:
  ::int64_t _internal_playtime_seconds() const;
  void _internal_set_playtime_seconds(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterData)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 8,
      97, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<CharacterData_EquippedItemsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        equipped_items_;
    ::google::protobuf::internal::MapField<CharacterData_CurrenciesEntry_DoNotUse, std::string, ::int64_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64>
        currencies_;
    ::google::protobuf::internal::ArenaStringPtr character_id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr last_zone_id_;
    ::mmorpg::CharacterStats* stats_;
    ::mmorpg::CharacterAttributes* attributes_;
    ::mmorpg::Transform* last_transform_;
    ::mmorpg::CharacterAppearance* appearance_;
    ::google::protobuf::Timestamp* created_at_;
    ::google::protobuf::Timestamp* last_played_;
    int class__;
    int race_;
    int gender_;
    ::int32_t level_;
    ::int64_t experience_;
    ::int64_t experience_to_next_level_;
    ::int64_t playtime_seconds_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterCreateRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterCreateRequest) */ {
 public:
  inline CharacterCreateRequest() : CharacterCreateRequest(nullptr) {}
  ~CharacterCreateRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterCreateRequest(::google::protobuf::internal::ConstantInitialized);

  inline CharacterCreateRequest(const CharacterCreateRequest& from)
      : CharacterCreateRequest(nullptr, from) {}
  CharacterCreateRequest(CharacterCreateRequest&& from) noexcept
    : CharacterCreateRequest() {
    *this = ::std::move(from);
  }

  inline CharacterCreateRequest& operator=(const CharacterCreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterCreateRequest& operator=(CharacterCreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterCreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterCreateRequest* internal_default_instance() {
    return reinterpret_cast<const CharacterCreateRequest*>(
               &_CharacterCreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CharacterCreateRequest& a, CharacterCreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterCreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterCreateRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterCreateRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterCreateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterCreateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterCreateRequest& from) {
    CharacterCreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterCreateRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterCreateRequest";
  }
  protected:
  explicit CharacterCreateRequest(::google::protobuf::Arena* arena);
  CharacterCreateRequest(::google::protobuf::Arena* arena, const CharacterCreateRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSessionIdFieldNumber = 6,
    kAppearanceFieldNumber = 5,
    kClassFieldNumber = 2,
    kRaceFieldNumber = 3,
    kGenderFieldNumber = 4,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string session_id = 6;
  void clear_session_id() ;
  const std::string& session_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* value);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // .mmorpg.CharacterAppearance appearance = 5;
  bool has_appearance() const;
  void clear_appearance() ;
  const ::mmorpg::CharacterAppearance& appearance() const;
  PROTOBUF_NODISCARD ::mmorpg::CharacterAppearance* release_appearance();
  ::mmorpg::CharacterAppearance* mutable_appearance();
  void set_allocated_appearance(::mmorpg::CharacterAppearance* value);
  void unsafe_arena_set_allocated_appearance(::mmorpg::CharacterAppearance* value);
  ::mmorpg::CharacterAppearance* unsafe_arena_release_appearance();

  private:
  const ::mmorpg::CharacterAppearance& _internal_appearance() const;
  ::mmorpg::CharacterAppearance* _internal_mutable_appearance();

  public:
  // .mmorpg.CharacterClass class = 2;
  void clear_class_() ;
  ::mmorpg::CharacterClass class_() const;
  void set_class_(::mmorpg::CharacterClass value);

  private:
  ::mmorpg::CharacterClass _internal_class_() const;
  void _internal_set_class_(::mmorpg::CharacterClass value);

  public:
  // .mmorpg.CharacterRace race = 3;
  void clear_race() ;
  ::mmorpg::CharacterRace race() const;
  void set_race(::mmorpg::CharacterRace value);

  private:
  ::mmorpg::CharacterRace _internal_race() const;
  void _internal_set_race(::mmorpg::CharacterRace value);

  public:
  // .mmorpg.Gender gender = 4;
  void clear_gender() ;
  ::mmorpg::Gender gender() const;
  void set_gender(::mmorpg::Gender value);

  private:
  ::mmorpg::Gender _internal_gender() const;
  void _internal_set_gender(::mmorpg::Gender value);

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterCreateRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr session_id_;
    ::mmorpg::CharacterAppearance* appearance_;
    int class__;
    int race_;
    int gender_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterSelectResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterSelectResponse) */ {
 public:
  inline CharacterSelectResponse() : CharacterSelectResponse(nullptr) {}
  ~CharacterSelectResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterSelectResponse(::google::protobuf::internal::ConstantInitialized);

  inline CharacterSelectResponse(const CharacterSelectResponse& from)
      : CharacterSelectResponse(nullptr, from) {}
  CharacterSelectResponse(CharacterSelectResponse&& from) noexcept
    : CharacterSelectResponse() {
    *this = ::std::move(from);
  }

  inline CharacterSelectResponse& operator=(const CharacterSelectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterSelectResponse& operator=(CharacterSelectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterSelectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterSelectResponse* internal_default_instance() {
    return reinterpret_cast<const CharacterSelectResponse*>(
               &_CharacterSelectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CharacterSelectResponse& a, CharacterSelectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterSelectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterSelectResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterSelectResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterSelectResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterSelectResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterSelectResponse& from) {
    CharacterSelectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterSelectResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterSelectResponse";
  }
  protected:
  explicit CharacterSelectResponse(::google::protobuf::Arena* arena);
  CharacterSelectResponse(::google::protobuf::Arena* arena, const CharacterSelectResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldServerUrlFieldNumber = 3,
    kWorldTokenFieldNumber = 4,
    kErrorMessageFieldNumber = 5,
    kCharacterDataFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 6,
  };
  // string world_server_url = 3;
  void clear_world_server_url() ;
  const std::string& world_server_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_world_server_url(Arg_&& arg, Args_... args);
  std::string* mutable_world_server_url();
  PROTOBUF_NODISCARD std::string* release_world_server_url();
  void set_allocated_world_server_url(std::string* value);

  private:
  const std::string& _internal_world_server_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_world_server_url(
      const std::string& value);
  std::string* _internal_mutable_world_server_url();

  public:
  // string world_token = 4;
  void clear_world_token() ;
  const std::string& world_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_world_token(Arg_&& arg, Args_... args);
  std::string* mutable_world_token();
  PROTOBUF_NODISCARD std::string* release_world_token();
  void set_allocated_world_token(std::string* value);

  private:
  const std::string& _internal_world_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_world_token(
      const std::string& value);
  std::string* _internal_mutable_world_token();

  public:
  // string error_message = 5;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // .mmorpg.CharacterData character_data = 2;
  bool has_character_data() const;
  void clear_character_data() ;
  const ::mmorpg::CharacterData& character_data() const;
  PROTOBUF_NODISCARD ::mmorpg::CharacterData* release_character_data();
  ::mmorpg::CharacterData* mutable_character_data();
  void set_allocated_character_data(::mmorpg::CharacterData* value);
  void unsafe_arena_set_allocated_character_data(::mmorpg::CharacterData* value);
  ::mmorpg::CharacterData* unsafe_arena_release_character_data();

  private:
  const ::mmorpg::CharacterData& _internal_character_data() const;
  ::mmorpg::CharacterData* _internal_mutable_character_data();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // .mmorpg.ErrorCode error_code = 6;
  void clear_error_code() ;
  ::mmorpg::ErrorCode error_code() const;
  void set_error_code(::mmorpg::ErrorCode value);

  private:
  ::mmorpg::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::mmorpg::ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterSelectResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      79, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr world_server_url_;
    ::google::protobuf::internal::ArenaStringPtr world_token_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::mmorpg::CharacterData* character_data_;
    bool success_;
    int error_code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterListResponse) */ {
 public:
  inline CharacterListResponse() : CharacterListResponse(nullptr) {}
  ~CharacterListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterListResponse(::google::protobuf::internal::ConstantInitialized);

  inline CharacterListResponse(const CharacterListResponse& from)
      : CharacterListResponse(nullptr, from) {}
  CharacterListResponse(CharacterListResponse&& from) noexcept
    : CharacterListResponse() {
    *this = ::std::move(from);
  }

  inline CharacterListResponse& operator=(const CharacterListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterListResponse& operator=(CharacterListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterListResponse* internal_default_instance() {
    return reinterpret_cast<const CharacterListResponse*>(
               &_CharacterListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CharacterListResponse& a, CharacterListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterListResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterListResponse& from) {
    CharacterListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterListResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterListResponse";
  }
  protected:
  explicit CharacterListResponse(::google::protobuf::Arena* arena);
  CharacterListResponse(::google::protobuf::Arena* arena, const CharacterListResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharactersFieldNumber = 2,
    kErrorMessageFieldNumber = 4,
    kSuccessFieldNumber = 1,
    kMaxCharactersFieldNumber = 3,
    kErrorCodeFieldNumber = 5,
  };
  // repeated .mmorpg.CharacterInfo characters = 2;
  int characters_size() const;
  private:
  int _internal_characters_size() const;

  public:
  void clear_characters() ;
  ::mmorpg::CharacterInfo* mutable_characters(int index);
  ::google::protobuf::RepeatedPtrField< ::mmorpg::CharacterInfo >*
      mutable_characters();
  private:
  const ::google::protobuf::RepeatedPtrField<::mmorpg::CharacterInfo>& _internal_characters() const;
  ::google::protobuf::RepeatedPtrField<::mmorpg::CharacterInfo>* _internal_mutable_characters();
  public:
  const ::mmorpg::CharacterInfo& characters(int index) const;
  ::mmorpg::CharacterInfo* add_characters();
  const ::google::protobuf::RepeatedPtrField< ::mmorpg::CharacterInfo >&
      characters() const;
  // string error_message = 4;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // int32 max_characters = 3;
  void clear_max_characters() ;
  ::int32_t max_characters() const;
  void set_max_characters(::int32_t value);

  private:
  ::int32_t _internal_max_characters() const;
  void _internal_set_max_characters(::int32_t value);

  public:
  // .mmorpg.ErrorCode error_code = 5;
  void clear_error_code() ;
  ::mmorpg::ErrorCode error_code() const;
  void set_error_code(::mmorpg::ErrorCode value);

  private:
  ::mmorpg::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::mmorpg::ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterListResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      50, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::mmorpg::CharacterInfo > characters_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    bool success_;
    ::int32_t max_characters_;
    int error_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};// -------------------------------------------------------------------

class CharacterCreateResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mmorpg.CharacterCreateResponse) */ {
 public:
  inline CharacterCreateResponse() : CharacterCreateResponse(nullptr) {}
  ~CharacterCreateResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CharacterCreateResponse(::google::protobuf::internal::ConstantInitialized);

  inline CharacterCreateResponse(const CharacterCreateResponse& from)
      : CharacterCreateResponse(nullptr, from) {}
  CharacterCreateResponse(CharacterCreateResponse&& from) noexcept
    : CharacterCreateResponse() {
    *this = ::std::move(from);
  }

  inline CharacterCreateResponse& operator=(const CharacterCreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CharacterCreateResponse& operator=(CharacterCreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CharacterCreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CharacterCreateResponse* internal_default_instance() {
    return reinterpret_cast<const CharacterCreateResponse*>(
               &_CharacterCreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CharacterCreateResponse& a, CharacterCreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CharacterCreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CharacterCreateResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CharacterCreateResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CharacterCreateResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CharacterCreateResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CharacterCreateResponse& from) {
    CharacterCreateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CharacterCreateResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mmorpg.CharacterCreateResponse";
  }
  protected:
  explicit CharacterCreateResponse(::google::protobuf::Arena* arena);
  CharacterCreateResponse(::google::protobuf::Arena* arena, const CharacterCreateResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValidationErrorsFieldNumber = 5,
    kErrorMessageFieldNumber = 3,
    kCharacterFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kErrorCodeFieldNumber = 4,
  };
  // map<string, string> validation_errors = 5;
  int validation_errors_size() const;
  private:
  int _internal_validation_errors_size() const;

  public:
  void clear_validation_errors() ;
  const ::google::protobuf::Map<std::string, std::string>& validation_errors() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_validation_errors();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_validation_errors() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_validation_errors();

  public:
  // string error_message = 3;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // .mmorpg.CharacterInfo character = 2;
  bool has_character() const;
  void clear_character() ;
  const ::mmorpg::CharacterInfo& character() const;
  PROTOBUF_NODISCARD ::mmorpg::CharacterInfo* release_character();
  ::mmorpg::CharacterInfo* mutable_character();
  void set_allocated_character(::mmorpg::CharacterInfo* value);
  void unsafe_arena_set_allocated_character(::mmorpg::CharacterInfo* value);
  ::mmorpg::CharacterInfo* unsafe_arena_release_character();

  private:
  const ::mmorpg::CharacterInfo& _internal_character() const;
  ::mmorpg::CharacterInfo* _internal_mutable_character();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // .mmorpg.ErrorCode error_code = 4;
  void clear_error_code() ;
  ::mmorpg::ErrorCode error_code() const;
  void set_error_code(::mmorpg::ErrorCode value);

  private:
  ::mmorpg::ErrorCode _internal_error_code() const;
  void _internal_set_error_code(::mmorpg::ErrorCode value);

  public:
  // @@protoc_insertion_point(class_scope:mmorpg.CharacterCreateResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 2,
      69, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<CharacterCreateResponse_ValidationErrorsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        validation_errors_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    ::mmorpg::CharacterInfo* character_;
    bool success_;
    int error_code_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_character_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CharacterListRequest

// string user_id = 1;
inline void CharacterListRequest::clear_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& CharacterListRequest::user_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterListRequest.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterListRequest::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterListRequest.user_id)
}
inline std::string* CharacterListRequest::mutable_user_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterListRequest.user_id)
  return _s;
}
inline const std::string& CharacterListRequest::_internal_user_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_id_.Get();
}
inline void CharacterListRequest::_internal_set_user_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_id_.Set(value, GetArena());
}
inline std::string* CharacterListRequest::_internal_mutable_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.user_id_.Mutable( GetArena());
}
inline std::string* CharacterListRequest::release_user_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterListRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void CharacterListRequest::set_allocated_user_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterListRequest.user_id)
}

// string session_id = 2;
inline void CharacterListRequest::clear_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& CharacterListRequest::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterListRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterListRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterListRequest.session_id)
}
inline std::string* CharacterListRequest::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterListRequest.session_id)
  return _s;
}
inline const std::string& CharacterListRequest::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_.Get();
}
inline void CharacterListRequest::_internal_set_session_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* CharacterListRequest::_internal_mutable_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* CharacterListRequest::release_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterListRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void CharacterListRequest::set_allocated_session_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterListRequest.session_id)
}

// -------------------------------------------------------------------

// CharacterListResponse

// bool success = 1;
inline void CharacterListResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool CharacterListResponse::success() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterListResponse.success)
  return _internal_success();
}
inline void CharacterListResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterListResponse.success)
}
inline bool CharacterListResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void CharacterListResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// repeated .mmorpg.CharacterInfo characters = 2;
inline int CharacterListResponse::_internal_characters_size() const {
  return _internal_characters().size();
}
inline int CharacterListResponse::characters_size() const {
  return _internal_characters_size();
}
inline void CharacterListResponse::clear_characters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.characters_.Clear();
}
inline ::mmorpg::CharacterInfo* CharacterListResponse::mutable_characters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterListResponse.characters)
  return _internal_mutable_characters()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mmorpg::CharacterInfo>* CharacterListResponse::mutable_characters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mmorpg.CharacterListResponse.characters)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_characters();
}
inline const ::mmorpg::CharacterInfo& CharacterListResponse::characters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterListResponse.characters)
  return _internal_characters().Get(index);
}
inline ::mmorpg::CharacterInfo* CharacterListResponse::add_characters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::mmorpg::CharacterInfo* _add = _internal_mutable_characters()->Add();
  // @@protoc_insertion_point(field_add:mmorpg.CharacterListResponse.characters)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mmorpg::CharacterInfo>& CharacterListResponse::characters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mmorpg.CharacterListResponse.characters)
  return _internal_characters();
}
inline const ::google::protobuf::RepeatedPtrField<::mmorpg::CharacterInfo>&
CharacterListResponse::_internal_characters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.characters_;
}
inline ::google::protobuf::RepeatedPtrField<::mmorpg::CharacterInfo>*
CharacterListResponse::_internal_mutable_characters() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.characters_;
}

// int32 max_characters = 3;
inline void CharacterListResponse::clear_max_characters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_characters_ = 0;
}
inline ::int32_t CharacterListResponse::max_characters() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterListResponse.max_characters)
  return _internal_max_characters();
}
inline void CharacterListResponse::set_max_characters(::int32_t value) {
  _internal_set_max_characters(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterListResponse.max_characters)
}
inline ::int32_t CharacterListResponse::_internal_max_characters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_characters_;
}
inline void CharacterListResponse::_internal_set_max_characters(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_characters_ = value;
}

// string error_message = 4;
inline void CharacterListResponse::clear_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& CharacterListResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterListResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterListResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterListResponse.error_message)
}
inline std::string* CharacterListResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterListResponse.error_message)
  return _s;
}
inline const std::string& CharacterListResponse::_internal_error_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_message_.Get();
}
inline void CharacterListResponse::_internal_set_error_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* CharacterListResponse::_internal_mutable_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* CharacterListResponse::release_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterListResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void CharacterListResponse::set_allocated_error_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_message_.IsDefault()) {
          _impl_.error_message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterListResponse.error_message)
}

// .mmorpg.ErrorCode error_code = 5;
inline void CharacterListResponse::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_ = 0;
}
inline ::mmorpg::ErrorCode CharacterListResponse::error_code() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterListResponse.error_code)
  return _internal_error_code();
}
inline void CharacterListResponse::set_error_code(::mmorpg::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterListResponse.error_code)
}
inline ::mmorpg::ErrorCode CharacterListResponse::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::ErrorCode>(_impl_.error_code_);
}
inline void CharacterListResponse::_internal_set_error_code(::mmorpg::ErrorCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_code_ = value;
}

// -------------------------------------------------------------------

// CharacterCreateRequest

// string name = 1;
inline void CharacterCreateRequest::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CharacterCreateRequest::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterCreateRequest.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterCreateRequest::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterCreateRequest.name)
}
inline std::string* CharacterCreateRequest::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterCreateRequest.name)
  return _s;
}
inline const std::string& CharacterCreateRequest::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CharacterCreateRequest::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CharacterCreateRequest::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CharacterCreateRequest::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterCreateRequest.name)
  return _impl_.name_.Release();
}
inline void CharacterCreateRequest::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterCreateRequest.name)
}

// .mmorpg.CharacterClass class = 2;
inline void CharacterCreateRequest::clear_class_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class__ = 0;
}
inline ::mmorpg::CharacterClass CharacterCreateRequest::class_() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterCreateRequest.class)
  return _internal_class_();
}
inline void CharacterCreateRequest::set_class_(::mmorpg::CharacterClass value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterCreateRequest.class)
}
inline ::mmorpg::CharacterClass CharacterCreateRequest::_internal_class_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::CharacterClass>(_impl_.class__);
}
inline void CharacterCreateRequest::_internal_set_class_(::mmorpg::CharacterClass value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class__ = value;
}

// .mmorpg.CharacterRace race = 3;
inline void CharacterCreateRequest::clear_race() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.race_ = 0;
}
inline ::mmorpg::CharacterRace CharacterCreateRequest::race() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterCreateRequest.race)
  return _internal_race();
}
inline void CharacterCreateRequest::set_race(::mmorpg::CharacterRace value) {
  _internal_set_race(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterCreateRequest.race)
}
inline ::mmorpg::CharacterRace CharacterCreateRequest::_internal_race() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::CharacterRace>(_impl_.race_);
}
inline void CharacterCreateRequest::_internal_set_race(::mmorpg::CharacterRace value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.race_ = value;
}

// .mmorpg.Gender gender = 4;
inline void CharacterCreateRequest::clear_gender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gender_ = 0;
}
inline ::mmorpg::Gender CharacterCreateRequest::gender() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterCreateRequest.gender)
  return _internal_gender();
}
inline void CharacterCreateRequest::set_gender(::mmorpg::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterCreateRequest.gender)
}
inline ::mmorpg::Gender CharacterCreateRequest::_internal_gender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::Gender>(_impl_.gender_);
}
inline void CharacterCreateRequest::_internal_set_gender(::mmorpg::Gender value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gender_ = value;
}

// .mmorpg.CharacterAppearance appearance = 5;
inline bool CharacterCreateRequest::has_appearance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.appearance_ != nullptr);
  return value;
}
inline void CharacterCreateRequest::clear_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.appearance_ != nullptr) _impl_.appearance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mmorpg::CharacterAppearance& CharacterCreateRequest::_internal_appearance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mmorpg::CharacterAppearance* p = _impl_.appearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mmorpg::CharacterAppearance&>(::mmorpg::_CharacterAppearance_default_instance_);
}
inline const ::mmorpg::CharacterAppearance& CharacterCreateRequest::appearance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterCreateRequest.appearance)
  return _internal_appearance();
}
inline void CharacterCreateRequest::unsafe_arena_set_allocated_appearance(::mmorpg::CharacterAppearance* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.appearance_);
  }
  _impl_.appearance_ = reinterpret_cast<::mmorpg::CharacterAppearance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterCreateRequest.appearance)
}
inline ::mmorpg::CharacterAppearance* CharacterCreateRequest::release_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mmorpg::CharacterAppearance* released = _impl_.appearance_;
  _impl_.appearance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mmorpg::CharacterAppearance* CharacterCreateRequest::unsafe_arena_release_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterCreateRequest.appearance)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mmorpg::CharacterAppearance* temp = _impl_.appearance_;
  _impl_.appearance_ = nullptr;
  return temp;
}
inline ::mmorpg::CharacterAppearance* CharacterCreateRequest::_internal_mutable_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.appearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mmorpg::CharacterAppearance>(GetArena());
    _impl_.appearance_ = reinterpret_cast<::mmorpg::CharacterAppearance*>(p);
  }
  return _impl_.appearance_;
}
inline ::mmorpg::CharacterAppearance* CharacterCreateRequest::mutable_appearance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mmorpg::CharacterAppearance* _msg = _internal_mutable_appearance();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterCreateRequest.appearance)
  return _msg;
}
inline void CharacterCreateRequest::set_allocated_appearance(::mmorpg::CharacterAppearance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mmorpg::CharacterAppearance*>(_impl_.appearance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mmorpg::CharacterAppearance*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.appearance_ = reinterpret_cast<::mmorpg::CharacterAppearance*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterCreateRequest.appearance)
}

// string session_id = 6;
inline void CharacterCreateRequest::clear_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& CharacterCreateRequest::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterCreateRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterCreateRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterCreateRequest.session_id)
}
inline std::string* CharacterCreateRequest::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterCreateRequest.session_id)
  return _s;
}
inline const std::string& CharacterCreateRequest::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_.Get();
}
inline void CharacterCreateRequest::_internal_set_session_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* CharacterCreateRequest::_internal_mutable_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* CharacterCreateRequest::release_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterCreateRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void CharacterCreateRequest::set_allocated_session_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterCreateRequest.session_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CharacterCreateResponse

// bool success = 1;
inline void CharacterCreateResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool CharacterCreateResponse::success() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterCreateResponse.success)
  return _internal_success();
}
inline void CharacterCreateResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterCreateResponse.success)
}
inline bool CharacterCreateResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void CharacterCreateResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// .mmorpg.CharacterInfo character = 2;
inline bool CharacterCreateResponse::has_character() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.character_ != nullptr);
  return value;
}
inline void CharacterCreateResponse::clear_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.character_ != nullptr) _impl_.character_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mmorpg::CharacterInfo& CharacterCreateResponse::_internal_character() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mmorpg::CharacterInfo* p = _impl_.character_;
  return p != nullptr ? *p : reinterpret_cast<const ::mmorpg::CharacterInfo&>(::mmorpg::_CharacterInfo_default_instance_);
}
inline const ::mmorpg::CharacterInfo& CharacterCreateResponse::character() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterCreateResponse.character)
  return _internal_character();
}
inline void CharacterCreateResponse::unsafe_arena_set_allocated_character(::mmorpg::CharacterInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.character_);
  }
  _impl_.character_ = reinterpret_cast<::mmorpg::CharacterInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterCreateResponse.character)
}
inline ::mmorpg::CharacterInfo* CharacterCreateResponse::release_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mmorpg::CharacterInfo* released = _impl_.character_;
  _impl_.character_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mmorpg::CharacterInfo* CharacterCreateResponse::unsafe_arena_release_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterCreateResponse.character)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mmorpg::CharacterInfo* temp = _impl_.character_;
  _impl_.character_ = nullptr;
  return temp;
}
inline ::mmorpg::CharacterInfo* CharacterCreateResponse::_internal_mutable_character() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.character_ == nullptr) {
    auto* p = CreateMaybeMessage<::mmorpg::CharacterInfo>(GetArena());
    _impl_.character_ = reinterpret_cast<::mmorpg::CharacterInfo*>(p);
  }
  return _impl_.character_;
}
inline ::mmorpg::CharacterInfo* CharacterCreateResponse::mutable_character() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mmorpg::CharacterInfo* _msg = _internal_mutable_character();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterCreateResponse.character)
  return _msg;
}
inline void CharacterCreateResponse::set_allocated_character(::mmorpg::CharacterInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mmorpg::CharacterInfo*>(_impl_.character_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mmorpg::CharacterInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.character_ = reinterpret_cast<::mmorpg::CharacterInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterCreateResponse.character)
}

// string error_message = 3;
inline void CharacterCreateResponse::clear_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& CharacterCreateResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterCreateResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterCreateResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterCreateResponse.error_message)
}
inline std::string* CharacterCreateResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterCreateResponse.error_message)
  return _s;
}
inline const std::string& CharacterCreateResponse::_internal_error_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_message_.Get();
}
inline void CharacterCreateResponse::_internal_set_error_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* CharacterCreateResponse::_internal_mutable_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* CharacterCreateResponse::release_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterCreateResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void CharacterCreateResponse::set_allocated_error_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_message_.IsDefault()) {
          _impl_.error_message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterCreateResponse.error_message)
}

// .mmorpg.ErrorCode error_code = 4;
inline void CharacterCreateResponse::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_ = 0;
}
inline ::mmorpg::ErrorCode CharacterCreateResponse::error_code() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterCreateResponse.error_code)
  return _internal_error_code();
}
inline void CharacterCreateResponse::set_error_code(::mmorpg::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterCreateResponse.error_code)
}
inline ::mmorpg::ErrorCode CharacterCreateResponse::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::ErrorCode>(_impl_.error_code_);
}
inline void CharacterCreateResponse::_internal_set_error_code(::mmorpg::ErrorCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_code_ = value;
}

// map<string, string> validation_errors = 5;
inline int CharacterCreateResponse::_internal_validation_errors_size() const {
  return _internal_validation_errors().size();
}
inline int CharacterCreateResponse::validation_errors_size() const {
  return _internal_validation_errors_size();
}
inline void CharacterCreateResponse::clear_validation_errors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.validation_errors_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CharacterCreateResponse::_internal_validation_errors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.validation_errors_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CharacterCreateResponse::validation_errors() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mmorpg.CharacterCreateResponse.validation_errors)
  return _internal_validation_errors();
}
inline ::google::protobuf::Map<std::string, std::string>* CharacterCreateResponse::_internal_mutable_validation_errors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.validation_errors_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CharacterCreateResponse::mutable_validation_errors() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mmorpg.CharacterCreateResponse.validation_errors)
  return _internal_mutable_validation_errors();
}

// -------------------------------------------------------------------

// CharacterDeleteRequest

// string character_id = 1;
inline void CharacterDeleteRequest::clear_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_id_.ClearToEmpty();
}
inline const std::string& CharacterDeleteRequest::character_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterDeleteRequest.character_id)
  return _internal_character_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterDeleteRequest::set_character_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterDeleteRequest.character_id)
}
inline std::string* CharacterDeleteRequest::mutable_character_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterDeleteRequest.character_id)
  return _s;
}
inline const std::string& CharacterDeleteRequest::_internal_character_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_id_.Get();
}
inline void CharacterDeleteRequest::_internal_set_character_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_id_.Set(value, GetArena());
}
inline std::string* CharacterDeleteRequest::_internal_mutable_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.character_id_.Mutable( GetArena());
}
inline std::string* CharacterDeleteRequest::release_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterDeleteRequest.character_id)
  return _impl_.character_id_.Release();
}
inline void CharacterDeleteRequest::set_allocated_character_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_id_.IsDefault()) {
          _impl_.character_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterDeleteRequest.character_id)
}

// string session_id = 2;
inline void CharacterDeleteRequest::clear_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& CharacterDeleteRequest::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterDeleteRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterDeleteRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterDeleteRequest.session_id)
}
inline std::string* CharacterDeleteRequest::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterDeleteRequest.session_id)
  return _s;
}
inline const std::string& CharacterDeleteRequest::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_.Get();
}
inline void CharacterDeleteRequest::_internal_set_session_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* CharacterDeleteRequest::_internal_mutable_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* CharacterDeleteRequest::release_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterDeleteRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void CharacterDeleteRequest::set_allocated_session_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterDeleteRequest.session_id)
}

// string confirmation_code = 3;
inline void CharacterDeleteRequest::clear_confirmation_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.confirmation_code_.ClearToEmpty();
}
inline const std::string& CharacterDeleteRequest::confirmation_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterDeleteRequest.confirmation_code)
  return _internal_confirmation_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterDeleteRequest::set_confirmation_code(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.confirmation_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterDeleteRequest.confirmation_code)
}
inline std::string* CharacterDeleteRequest::mutable_confirmation_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_confirmation_code();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterDeleteRequest.confirmation_code)
  return _s;
}
inline const std::string& CharacterDeleteRequest::_internal_confirmation_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.confirmation_code_.Get();
}
inline void CharacterDeleteRequest::_internal_set_confirmation_code(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.confirmation_code_.Set(value, GetArena());
}
inline std::string* CharacterDeleteRequest::_internal_mutable_confirmation_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.confirmation_code_.Mutable( GetArena());
}
inline std::string* CharacterDeleteRequest::release_confirmation_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterDeleteRequest.confirmation_code)
  return _impl_.confirmation_code_.Release();
}
inline void CharacterDeleteRequest::set_allocated_confirmation_code(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.confirmation_code_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.confirmation_code_.IsDefault()) {
          _impl_.confirmation_code_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterDeleteRequest.confirmation_code)
}

// -------------------------------------------------------------------

// CharacterDeleteResponse

// bool success = 1;
inline void CharacterDeleteResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool CharacterDeleteResponse::success() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterDeleteResponse.success)
  return _internal_success();
}
inline void CharacterDeleteResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterDeleteResponse.success)
}
inline bool CharacterDeleteResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void CharacterDeleteResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// string message = 2;
inline void CharacterDeleteResponse::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& CharacterDeleteResponse::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterDeleteResponse.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterDeleteResponse::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterDeleteResponse.message)
}
inline std::string* CharacterDeleteResponse::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterDeleteResponse.message)
  return _s;
}
inline const std::string& CharacterDeleteResponse::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void CharacterDeleteResponse::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* CharacterDeleteResponse::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* CharacterDeleteResponse::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterDeleteResponse.message)
  return _impl_.message_.Release();
}
inline void CharacterDeleteResponse::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterDeleteResponse.message)
}

// .mmorpg.ErrorCode error_code = 3;
inline void CharacterDeleteResponse::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_ = 0;
}
inline ::mmorpg::ErrorCode CharacterDeleteResponse::error_code() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterDeleteResponse.error_code)
  return _internal_error_code();
}
inline void CharacterDeleteResponse::set_error_code(::mmorpg::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterDeleteResponse.error_code)
}
inline ::mmorpg::ErrorCode CharacterDeleteResponse::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::ErrorCode>(_impl_.error_code_);
}
inline void CharacterDeleteResponse::_internal_set_error_code(::mmorpg::ErrorCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_code_ = value;
}

// -------------------------------------------------------------------

// CharacterSelectRequest

// string character_id = 1;
inline void CharacterSelectRequest::clear_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_id_.ClearToEmpty();
}
inline const std::string& CharacterSelectRequest::character_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterSelectRequest.character_id)
  return _internal_character_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterSelectRequest::set_character_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterSelectRequest.character_id)
}
inline std::string* CharacterSelectRequest::mutable_character_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterSelectRequest.character_id)
  return _s;
}
inline const std::string& CharacterSelectRequest::_internal_character_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_id_.Get();
}
inline void CharacterSelectRequest::_internal_set_character_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_id_.Set(value, GetArena());
}
inline std::string* CharacterSelectRequest::_internal_mutable_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.character_id_.Mutable( GetArena());
}
inline std::string* CharacterSelectRequest::release_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterSelectRequest.character_id)
  return _impl_.character_id_.Release();
}
inline void CharacterSelectRequest::set_allocated_character_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_id_.IsDefault()) {
          _impl_.character_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterSelectRequest.character_id)
}

// string session_id = 2;
inline void CharacterSelectRequest::clear_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& CharacterSelectRequest::session_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterSelectRequest.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterSelectRequest::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterSelectRequest.session_id)
}
inline std::string* CharacterSelectRequest::mutable_session_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterSelectRequest.session_id)
  return _s;
}
inline const std::string& CharacterSelectRequest::_internal_session_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.session_id_.Get();
}
inline void CharacterSelectRequest::_internal_set_session_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.session_id_.Set(value, GetArena());
}
inline std::string* CharacterSelectRequest::_internal_mutable_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.session_id_.Mutable( GetArena());
}
inline std::string* CharacterSelectRequest::release_session_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterSelectRequest.session_id)
  return _impl_.session_id_.Release();
}
inline void CharacterSelectRequest::set_allocated_session_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.session_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterSelectRequest.session_id)
}

// -------------------------------------------------------------------

// CharacterSelectResponse

// bool success = 1;
inline void CharacterSelectResponse::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool CharacterSelectResponse::success() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterSelectResponse.success)
  return _internal_success();
}
inline void CharacterSelectResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterSelectResponse.success)
}
inline bool CharacterSelectResponse::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void CharacterSelectResponse::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.success_ = value;
}

// .mmorpg.CharacterData character_data = 2;
inline bool CharacterSelectResponse::has_character_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.character_data_ != nullptr);
  return value;
}
inline void CharacterSelectResponse::clear_character_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.character_data_ != nullptr) _impl_.character_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mmorpg::CharacterData& CharacterSelectResponse::_internal_character_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mmorpg::CharacterData* p = _impl_.character_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::mmorpg::CharacterData&>(::mmorpg::_CharacterData_default_instance_);
}
inline const ::mmorpg::CharacterData& CharacterSelectResponse::character_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterSelectResponse.character_data)
  return _internal_character_data();
}
inline void CharacterSelectResponse::unsafe_arena_set_allocated_character_data(::mmorpg::CharacterData* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.character_data_);
  }
  _impl_.character_data_ = reinterpret_cast<::mmorpg::CharacterData*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterSelectResponse.character_data)
}
inline ::mmorpg::CharacterData* CharacterSelectResponse::release_character_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mmorpg::CharacterData* released = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mmorpg::CharacterData* CharacterSelectResponse::unsafe_arena_release_character_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterSelectResponse.character_data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mmorpg::CharacterData* temp = _impl_.character_data_;
  _impl_.character_data_ = nullptr;
  return temp;
}
inline ::mmorpg::CharacterData* CharacterSelectResponse::_internal_mutable_character_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.character_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mmorpg::CharacterData>(GetArena());
    _impl_.character_data_ = reinterpret_cast<::mmorpg::CharacterData*>(p);
  }
  return _impl_.character_data_;
}
inline ::mmorpg::CharacterData* CharacterSelectResponse::mutable_character_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mmorpg::CharacterData* _msg = _internal_mutable_character_data();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterSelectResponse.character_data)
  return _msg;
}
inline void CharacterSelectResponse::set_allocated_character_data(::mmorpg::CharacterData* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mmorpg::CharacterData*>(_impl_.character_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mmorpg::CharacterData*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.character_data_ = reinterpret_cast<::mmorpg::CharacterData*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterSelectResponse.character_data)
}

// string world_server_url = 3;
inline void CharacterSelectResponse::clear_world_server_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.world_server_url_.ClearToEmpty();
}
inline const std::string& CharacterSelectResponse::world_server_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterSelectResponse.world_server_url)
  return _internal_world_server_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterSelectResponse::set_world_server_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.world_server_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterSelectResponse.world_server_url)
}
inline std::string* CharacterSelectResponse::mutable_world_server_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_world_server_url();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterSelectResponse.world_server_url)
  return _s;
}
inline const std::string& CharacterSelectResponse::_internal_world_server_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.world_server_url_.Get();
}
inline void CharacterSelectResponse::_internal_set_world_server_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.world_server_url_.Set(value, GetArena());
}
inline std::string* CharacterSelectResponse::_internal_mutable_world_server_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.world_server_url_.Mutable( GetArena());
}
inline std::string* CharacterSelectResponse::release_world_server_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterSelectResponse.world_server_url)
  return _impl_.world_server_url_.Release();
}
inline void CharacterSelectResponse::set_allocated_world_server_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.world_server_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.world_server_url_.IsDefault()) {
          _impl_.world_server_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterSelectResponse.world_server_url)
}

// string world_token = 4;
inline void CharacterSelectResponse::clear_world_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.world_token_.ClearToEmpty();
}
inline const std::string& CharacterSelectResponse::world_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterSelectResponse.world_token)
  return _internal_world_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterSelectResponse::set_world_token(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.world_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterSelectResponse.world_token)
}
inline std::string* CharacterSelectResponse::mutable_world_token() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_world_token();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterSelectResponse.world_token)
  return _s;
}
inline const std::string& CharacterSelectResponse::_internal_world_token() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.world_token_.Get();
}
inline void CharacterSelectResponse::_internal_set_world_token(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.world_token_.Set(value, GetArena());
}
inline std::string* CharacterSelectResponse::_internal_mutable_world_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.world_token_.Mutable( GetArena());
}
inline std::string* CharacterSelectResponse::release_world_token() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterSelectResponse.world_token)
  return _impl_.world_token_.Release();
}
inline void CharacterSelectResponse::set_allocated_world_token(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.world_token_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.world_token_.IsDefault()) {
          _impl_.world_token_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterSelectResponse.world_token)
}

// string error_message = 5;
inline void CharacterSelectResponse::clear_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& CharacterSelectResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterSelectResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterSelectResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterSelectResponse.error_message)
}
inline std::string* CharacterSelectResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterSelectResponse.error_message)
  return _s;
}
inline const std::string& CharacterSelectResponse::_internal_error_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_message_.Get();
}
inline void CharacterSelectResponse::_internal_set_error_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* CharacterSelectResponse::_internal_mutable_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* CharacterSelectResponse::release_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterSelectResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void CharacterSelectResponse::set_allocated_error_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_message_.IsDefault()) {
          _impl_.error_message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterSelectResponse.error_message)
}

// .mmorpg.ErrorCode error_code = 6;
inline void CharacterSelectResponse::clear_error_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_code_ = 0;
}
inline ::mmorpg::ErrorCode CharacterSelectResponse::error_code() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterSelectResponse.error_code)
  return _internal_error_code();
}
inline void CharacterSelectResponse::set_error_code(::mmorpg::ErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterSelectResponse.error_code)
}
inline ::mmorpg::ErrorCode CharacterSelectResponse::_internal_error_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::ErrorCode>(_impl_.error_code_);
}
inline void CharacterSelectResponse::_internal_set_error_code(::mmorpg::ErrorCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.error_code_ = value;
}

// -------------------------------------------------------------------

// CharacterInfo

// string character_id = 1;
inline void CharacterInfo::clear_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_id_.ClearToEmpty();
}
inline const std::string& CharacterInfo::character_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.character_id)
  return _internal_character_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterInfo::set_character_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterInfo.character_id)
}
inline std::string* CharacterInfo::mutable_character_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterInfo.character_id)
  return _s;
}
inline const std::string& CharacterInfo::_internal_character_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_id_.Get();
}
inline void CharacterInfo::_internal_set_character_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_id_.Set(value, GetArena());
}
inline std::string* CharacterInfo::_internal_mutable_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.character_id_.Mutable( GetArena());
}
inline std::string* CharacterInfo::release_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterInfo.character_id)
  return _impl_.character_id_.Release();
}
inline void CharacterInfo::set_allocated_character_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_id_.IsDefault()) {
          _impl_.character_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterInfo.character_id)
}

// string name = 2;
inline void CharacterInfo::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CharacterInfo::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterInfo::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterInfo.name)
}
inline std::string* CharacterInfo::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterInfo.name)
  return _s;
}
inline const std::string& CharacterInfo::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CharacterInfo::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CharacterInfo::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CharacterInfo::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterInfo.name)
  return _impl_.name_.Release();
}
inline void CharacterInfo::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterInfo.name)
}

// .mmorpg.CharacterClass class = 3;
inline void CharacterInfo::clear_class_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class__ = 0;
}
inline ::mmorpg::CharacterClass CharacterInfo::class_() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.class)
  return _internal_class_();
}
inline void CharacterInfo::set_class_(::mmorpg::CharacterClass value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterInfo.class)
}
inline ::mmorpg::CharacterClass CharacterInfo::_internal_class_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::CharacterClass>(_impl_.class__);
}
inline void CharacterInfo::_internal_set_class_(::mmorpg::CharacterClass value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class__ = value;
}

// .mmorpg.CharacterRace race = 4;
inline void CharacterInfo::clear_race() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.race_ = 0;
}
inline ::mmorpg::CharacterRace CharacterInfo::race() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.race)
  return _internal_race();
}
inline void CharacterInfo::set_race(::mmorpg::CharacterRace value) {
  _internal_set_race(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterInfo.race)
}
inline ::mmorpg::CharacterRace CharacterInfo::_internal_race() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::CharacterRace>(_impl_.race_);
}
inline void CharacterInfo::_internal_set_race(::mmorpg::CharacterRace value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.race_ = value;
}

// .mmorpg.Gender gender = 5;
inline void CharacterInfo::clear_gender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gender_ = 0;
}
inline ::mmorpg::Gender CharacterInfo::gender() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.gender)
  return _internal_gender();
}
inline void CharacterInfo::set_gender(::mmorpg::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterInfo.gender)
}
inline ::mmorpg::Gender CharacterInfo::_internal_gender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::Gender>(_impl_.gender_);
}
inline void CharacterInfo::_internal_set_gender(::mmorpg::Gender value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gender_ = value;
}

// int32 level = 6;
inline void CharacterInfo::clear_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_ = 0;
}
inline ::int32_t CharacterInfo::level() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.level)
  return _internal_level();
}
inline void CharacterInfo::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterInfo.level)
}
inline ::int32_t CharacterInfo::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void CharacterInfo::_internal_set_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// string location = 7;
inline void CharacterInfo::clear_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.location_.ClearToEmpty();
}
inline const std::string& CharacterInfo::location() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterInfo::set_location(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterInfo.location)
}
inline std::string* CharacterInfo::mutable_location() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterInfo.location)
  return _s;
}
inline const std::string& CharacterInfo::_internal_location() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.location_.Get();
}
inline void CharacterInfo::_internal_set_location(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.location_.Set(value, GetArena());
}
inline std::string* CharacterInfo::_internal_mutable_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.location_.Mutable( GetArena());
}
inline std::string* CharacterInfo::release_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterInfo.location)
  return _impl_.location_.Release();
}
inline void CharacterInfo::set_allocated_location(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.location_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.location_.IsDefault()) {
          _impl_.location_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterInfo.location)
}

// .google.protobuf.Timestamp created_at = 8;
inline bool CharacterInfo::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& CharacterInfo::_internal_created_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& CharacterInfo::created_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.created_at)
  return _internal_created_at();
}
inline void CharacterInfo::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterInfo.created_at)
}
inline ::google::protobuf::Timestamp* CharacterInfo::release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* CharacterInfo::unsafe_arena_release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterInfo.created_at)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CharacterInfo::_internal_mutable_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* CharacterInfo::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterInfo.created_at)
  return _msg;
}
inline void CharacterInfo::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterInfo.created_at)
}

// .google.protobuf.Timestamp last_played = 9;
inline bool CharacterInfo::has_last_played() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_played_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& CharacterInfo::_internal_last_played() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.last_played_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& CharacterInfo::last_played() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.last_played)
  return _internal_last_played();
}
inline void CharacterInfo::unsafe_arena_set_allocated_last_played(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_played_);
  }
  _impl_.last_played_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterInfo.last_played)
}
inline ::google::protobuf::Timestamp* CharacterInfo::release_last_played() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.last_played_;
  _impl_.last_played_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* CharacterInfo::unsafe_arena_release_last_played() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterInfo.last_played)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.last_played_;
  _impl_.last_played_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CharacterInfo::_internal_mutable_last_played() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.last_played_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_played_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_played_;
}
inline ::google::protobuf::Timestamp* CharacterInfo::mutable_last_played() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_played();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterInfo.last_played)
  return _msg;
}
inline void CharacterInfo::set_allocated_last_played(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_played_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.last_played_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterInfo.last_played)
}

// int64 playtime_seconds = 10;
inline void CharacterInfo::clear_playtime_seconds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playtime_seconds_ = ::int64_t{0};
}
inline ::int64_t CharacterInfo::playtime_seconds() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.playtime_seconds)
  return _internal_playtime_seconds();
}
inline void CharacterInfo::set_playtime_seconds(::int64_t value) {
  _internal_set_playtime_seconds(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterInfo.playtime_seconds)
}
inline ::int64_t CharacterInfo::_internal_playtime_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playtime_seconds_;
}
inline void CharacterInfo::_internal_set_playtime_seconds(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playtime_seconds_ = value;
}

// .mmorpg.CharacterAppearance appearance = 11;
inline bool CharacterInfo::has_appearance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.appearance_ != nullptr);
  return value;
}
inline void CharacterInfo::clear_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.appearance_ != nullptr) _impl_.appearance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::mmorpg::CharacterAppearance& CharacterInfo::_internal_appearance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mmorpg::CharacterAppearance* p = _impl_.appearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mmorpg::CharacterAppearance&>(::mmorpg::_CharacterAppearance_default_instance_);
}
inline const ::mmorpg::CharacterAppearance& CharacterInfo::appearance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.appearance)
  return _internal_appearance();
}
inline void CharacterInfo::unsafe_arena_set_allocated_appearance(::mmorpg::CharacterAppearance* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.appearance_);
  }
  _impl_.appearance_ = reinterpret_cast<::mmorpg::CharacterAppearance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterInfo.appearance)
}
inline ::mmorpg::CharacterAppearance* CharacterInfo::release_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mmorpg::CharacterAppearance* released = _impl_.appearance_;
  _impl_.appearance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mmorpg::CharacterAppearance* CharacterInfo::unsafe_arena_release_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterInfo.appearance)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mmorpg::CharacterAppearance* temp = _impl_.appearance_;
  _impl_.appearance_ = nullptr;
  return temp;
}
inline ::mmorpg::CharacterAppearance* CharacterInfo::_internal_mutable_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.appearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mmorpg::CharacterAppearance>(GetArena());
    _impl_.appearance_ = reinterpret_cast<::mmorpg::CharacterAppearance*>(p);
  }
  return _impl_.appearance_;
}
inline ::mmorpg::CharacterAppearance* CharacterInfo::mutable_appearance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mmorpg::CharacterAppearance* _msg = _internal_mutable_appearance();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterInfo.appearance)
  return _msg;
}
inline void CharacterInfo::set_allocated_appearance(::mmorpg::CharacterAppearance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mmorpg::CharacterAppearance*>(_impl_.appearance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mmorpg::CharacterAppearance*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.appearance_ = reinterpret_cast<::mmorpg::CharacterAppearance*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterInfo.appearance)
}

// repeated .mmorpg.EquipmentPreview equipment_preview = 12;
inline int CharacterInfo::_internal_equipment_preview_size() const {
  return _internal_equipment_preview().size();
}
inline int CharacterInfo::equipment_preview_size() const {
  return _internal_equipment_preview_size();
}
inline void CharacterInfo::clear_equipment_preview() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.equipment_preview_.Clear();
}
inline ::mmorpg::EquipmentPreview* CharacterInfo::mutable_equipment_preview(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterInfo.equipment_preview)
  return _internal_mutable_equipment_preview()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::mmorpg::EquipmentPreview>* CharacterInfo::mutable_equipment_preview()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:mmorpg.CharacterInfo.equipment_preview)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_equipment_preview();
}
inline const ::mmorpg::EquipmentPreview& CharacterInfo::equipment_preview(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterInfo.equipment_preview)
  return _internal_equipment_preview().Get(index);
}
inline ::mmorpg::EquipmentPreview* CharacterInfo::add_equipment_preview() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::mmorpg::EquipmentPreview* _add = _internal_mutable_equipment_preview()->Add();
  // @@protoc_insertion_point(field_add:mmorpg.CharacterInfo.equipment_preview)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::mmorpg::EquipmentPreview>& CharacterInfo::equipment_preview() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:mmorpg.CharacterInfo.equipment_preview)
  return _internal_equipment_preview();
}
inline const ::google::protobuf::RepeatedPtrField<::mmorpg::EquipmentPreview>&
CharacterInfo::_internal_equipment_preview() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.equipment_preview_;
}
inline ::google::protobuf::RepeatedPtrField<::mmorpg::EquipmentPreview>*
CharacterInfo::_internal_mutable_equipment_preview() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.equipment_preview_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CharacterData

// string character_id = 1;
inline void CharacterData::clear_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_id_.ClearToEmpty();
}
inline const std::string& CharacterData::character_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.character_id)
  return _internal_character_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterData::set_character_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterData.character_id)
}
inline std::string* CharacterData::mutable_character_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_character_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterData.character_id)
  return _s;
}
inline const std::string& CharacterData::_internal_character_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.character_id_.Get();
}
inline void CharacterData::_internal_set_character_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.character_id_.Set(value, GetArena());
}
inline std::string* CharacterData::_internal_mutable_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.character_id_.Mutable( GetArena());
}
inline std::string* CharacterData::release_character_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterData.character_id)
  return _impl_.character_id_.Release();
}
inline void CharacterData::set_allocated_character_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.character_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.character_id_.IsDefault()) {
          _impl_.character_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterData.character_id)
}

// string name = 2;
inline void CharacterData::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CharacterData::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterData::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterData.name)
}
inline std::string* CharacterData::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterData.name)
  return _s;
}
inline const std::string& CharacterData::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CharacterData::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CharacterData::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CharacterData::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterData.name)
  return _impl_.name_.Release();
}
inline void CharacterData::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterData.name)
}

// .mmorpg.CharacterClass class = 3;
inline void CharacterData::clear_class_() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.class__ = 0;
}
inline ::mmorpg::CharacterClass CharacterData::class_() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.class)
  return _internal_class_();
}
inline void CharacterData::set_class_(::mmorpg::CharacterClass value) {
  _internal_set_class_(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterData.class)
}
inline ::mmorpg::CharacterClass CharacterData::_internal_class_() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::CharacterClass>(_impl_.class__);
}
inline void CharacterData::_internal_set_class_(::mmorpg::CharacterClass value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.class__ = value;
}

// .mmorpg.CharacterRace race = 4;
inline void CharacterData::clear_race() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.race_ = 0;
}
inline ::mmorpg::CharacterRace CharacterData::race() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.race)
  return _internal_race();
}
inline void CharacterData::set_race(::mmorpg::CharacterRace value) {
  _internal_set_race(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterData.race)
}
inline ::mmorpg::CharacterRace CharacterData::_internal_race() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::CharacterRace>(_impl_.race_);
}
inline void CharacterData::_internal_set_race(::mmorpg::CharacterRace value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.race_ = value;
}

// .mmorpg.Gender gender = 5;
inline void CharacterData::clear_gender() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gender_ = 0;
}
inline ::mmorpg::Gender CharacterData::gender() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.gender)
  return _internal_gender();
}
inline void CharacterData::set_gender(::mmorpg::Gender value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterData.gender)
}
inline ::mmorpg::Gender CharacterData::_internal_gender() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mmorpg::Gender>(_impl_.gender_);
}
inline void CharacterData::_internal_set_gender(::mmorpg::Gender value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gender_ = value;
}

// .mmorpg.CharacterStats stats = 6;
inline bool CharacterData::has_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stats_ != nullptr);
  return value;
}
inline void CharacterData::clear_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mmorpg::CharacterStats& CharacterData::_internal_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mmorpg::CharacterStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::mmorpg::CharacterStats&>(::mmorpg::_CharacterStats_default_instance_);
}
inline const ::mmorpg::CharacterStats& CharacterData::stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.stats)
  return _internal_stats();
}
inline void CharacterData::unsafe_arena_set_allocated_stats(::mmorpg::CharacterStats* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = reinterpret_cast<::mmorpg::CharacterStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterData.stats)
}
inline ::mmorpg::CharacterStats* CharacterData::release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mmorpg::CharacterStats* released = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mmorpg::CharacterStats* CharacterData::unsafe_arena_release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterData.stats)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mmorpg::CharacterStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::mmorpg::CharacterStats* CharacterData::_internal_mutable_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::mmorpg::CharacterStats>(GetArena());
    _impl_.stats_ = reinterpret_cast<::mmorpg::CharacterStats*>(p);
  }
  return _impl_.stats_;
}
inline ::mmorpg::CharacterStats* CharacterData::mutable_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mmorpg::CharacterStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterData.stats)
  return _msg;
}
inline void CharacterData::set_allocated_stats(::mmorpg::CharacterStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mmorpg::CharacterStats*>(_impl_.stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mmorpg::CharacterStats*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.stats_ = reinterpret_cast<::mmorpg::CharacterStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterData.stats)
}

// .mmorpg.CharacterAttributes attributes = 7;
inline bool CharacterData::has_attributes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attributes_ != nullptr);
  return value;
}
inline void CharacterData::clear_attributes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.attributes_ != nullptr) _impl_.attributes_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mmorpg::CharacterAttributes& CharacterData::_internal_attributes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mmorpg::CharacterAttributes* p = _impl_.attributes_;
  return p != nullptr ? *p : reinterpret_cast<const ::mmorpg::CharacterAttributes&>(::mmorpg::_CharacterAttributes_default_instance_);
}
inline const ::mmorpg::CharacterAttributes& CharacterData::attributes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.attributes)
  return _internal_attributes();
}
inline void CharacterData::unsafe_arena_set_allocated_attributes(::mmorpg::CharacterAttributes* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attributes_);
  }
  _impl_.attributes_ = reinterpret_cast<::mmorpg::CharacterAttributes*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterData.attributes)
}
inline ::mmorpg::CharacterAttributes* CharacterData::release_attributes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mmorpg::CharacterAttributes* released = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mmorpg::CharacterAttributes* CharacterData::unsafe_arena_release_attributes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterData.attributes)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mmorpg::CharacterAttributes* temp = _impl_.attributes_;
  _impl_.attributes_ = nullptr;
  return temp;
}
inline ::mmorpg::CharacterAttributes* CharacterData::_internal_mutable_attributes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.attributes_ == nullptr) {
    auto* p = CreateMaybeMessage<::mmorpg::CharacterAttributes>(GetArena());
    _impl_.attributes_ = reinterpret_cast<::mmorpg::CharacterAttributes*>(p);
  }
  return _impl_.attributes_;
}
inline ::mmorpg::CharacterAttributes* CharacterData::mutable_attributes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mmorpg::CharacterAttributes* _msg = _internal_mutable_attributes();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterData.attributes)
  return _msg;
}
inline void CharacterData::set_allocated_attributes(::mmorpg::CharacterAttributes* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mmorpg::CharacterAttributes*>(_impl_.attributes_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mmorpg::CharacterAttributes*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.attributes_ = reinterpret_cast<::mmorpg::CharacterAttributes*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterData.attributes)
}

// int32 level = 8;
inline void CharacterData::clear_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_ = 0;
}
inline ::int32_t CharacterData::level() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.level)
  return _internal_level();
}
inline void CharacterData::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterData.level)
}
inline ::int32_t CharacterData::_internal_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_;
}
inline void CharacterData::_internal_set_level(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.level_ = value;
}

// int64 experience = 9;
inline void CharacterData::clear_experience() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.experience_ = ::int64_t{0};
}
inline ::int64_t CharacterData::experience() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.experience)
  return _internal_experience();
}
inline void CharacterData::set_experience(::int64_t value) {
  _internal_set_experience(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterData.experience)
}
inline ::int64_t CharacterData::_internal_experience() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.experience_;
}
inline void CharacterData::_internal_set_experience(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.experience_ = value;
}

// int64 experience_to_next_level = 10;
inline void CharacterData::clear_experience_to_next_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.experience_to_next_level_ = ::int64_t{0};
}
inline ::int64_t CharacterData::experience_to_next_level() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.experience_to_next_level)
  return _internal_experience_to_next_level();
}
inline void CharacterData::set_experience_to_next_level(::int64_t value) {
  _internal_set_experience_to_next_level(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterData.experience_to_next_level)
}
inline ::int64_t CharacterData::_internal_experience_to_next_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.experience_to_next_level_;
}
inline void CharacterData::_internal_set_experience_to_next_level(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.experience_to_next_level_ = value;
}

// .mmorpg.Transform last_transform = 11;
inline bool CharacterData::has_last_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_transform_ != nullptr);
  return value;
}
inline const ::mmorpg::Transform& CharacterData::_internal_last_transform() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mmorpg::Transform* p = _impl_.last_transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::mmorpg::Transform&>(::mmorpg::_Transform_default_instance_);
}
inline const ::mmorpg::Transform& CharacterData::last_transform() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.last_transform)
  return _internal_last_transform();
}
inline void CharacterData::unsafe_arena_set_allocated_last_transform(::mmorpg::Transform* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_transform_);
  }
  _impl_.last_transform_ = reinterpret_cast<::mmorpg::Transform*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterData.last_transform)
}
inline ::mmorpg::Transform* CharacterData::release_last_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mmorpg::Transform* released = _impl_.last_transform_;
  _impl_.last_transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mmorpg::Transform* CharacterData::unsafe_arena_release_last_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterData.last_transform)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::mmorpg::Transform* temp = _impl_.last_transform_;
  _impl_.last_transform_ = nullptr;
  return temp;
}
inline ::mmorpg::Transform* CharacterData::_internal_mutable_last_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.last_transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::mmorpg::Transform>(GetArena());
    _impl_.last_transform_ = reinterpret_cast<::mmorpg::Transform*>(p);
  }
  return _impl_.last_transform_;
}
inline ::mmorpg::Transform* CharacterData::mutable_last_transform() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mmorpg::Transform* _msg = _internal_mutable_last_transform();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterData.last_transform)
  return _msg;
}
inline void CharacterData::set_allocated_last_transform(::mmorpg::Transform* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_transform_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.last_transform_ = reinterpret_cast<::mmorpg::Transform*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterData.last_transform)
}

// string last_zone_id = 12;
inline void CharacterData::clear_last_zone_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_zone_id_.ClearToEmpty();
}
inline const std::string& CharacterData::last_zone_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.last_zone_id)
  return _internal_last_zone_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CharacterData::set_last_zone_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_zone_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.CharacterData.last_zone_id)
}
inline std::string* CharacterData::mutable_last_zone_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_last_zone_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterData.last_zone_id)
  return _s;
}
inline const std::string& CharacterData::_internal_last_zone_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.last_zone_id_.Get();
}
inline void CharacterData::_internal_set_last_zone_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.last_zone_id_.Set(value, GetArena());
}
inline std::string* CharacterData::_internal_mutable_last_zone_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.last_zone_id_.Mutable( GetArena());
}
inline std::string* CharacterData::release_last_zone_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterData.last_zone_id)
  return _impl_.last_zone_id_.Release();
}
inline void CharacterData::set_allocated_last_zone_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.last_zone_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.last_zone_id_.IsDefault()) {
          _impl_.last_zone_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterData.last_zone_id)
}

// .mmorpg.CharacterAppearance appearance = 13;
inline bool CharacterData::has_appearance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.appearance_ != nullptr);
  return value;
}
inline void CharacterData::clear_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.appearance_ != nullptr) _impl_.appearance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::mmorpg::CharacterAppearance& CharacterData::_internal_appearance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mmorpg::CharacterAppearance* p = _impl_.appearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::mmorpg::CharacterAppearance&>(::mmorpg::_CharacterAppearance_default_instance_);
}
inline const ::mmorpg::CharacterAppearance& CharacterData::appearance() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.appearance)
  return _internal_appearance();
}
inline void CharacterData::unsafe_arena_set_allocated_appearance(::mmorpg::CharacterAppearance* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.appearance_);
  }
  _impl_.appearance_ = reinterpret_cast<::mmorpg::CharacterAppearance*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterData.appearance)
}
inline ::mmorpg::CharacterAppearance* CharacterData::release_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::mmorpg::CharacterAppearance* released = _impl_.appearance_;
  _impl_.appearance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mmorpg::CharacterAppearance* CharacterData::unsafe_arena_release_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterData.appearance)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::mmorpg::CharacterAppearance* temp = _impl_.appearance_;
  _impl_.appearance_ = nullptr;
  return temp;
}
inline ::mmorpg::CharacterAppearance* CharacterData::_internal_mutable_appearance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.appearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::mmorpg::CharacterAppearance>(GetArena());
    _impl_.appearance_ = reinterpret_cast<::mmorpg::CharacterAppearance*>(p);
  }
  return _impl_.appearance_;
}
inline ::mmorpg::CharacterAppearance* CharacterData::mutable_appearance() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mmorpg::CharacterAppearance* _msg = _internal_mutable_appearance();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterData.appearance)
  return _msg;
}
inline void CharacterData::set_allocated_appearance(::mmorpg::CharacterAppearance* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mmorpg::CharacterAppearance*>(_impl_.appearance_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mmorpg::CharacterAppearance*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.appearance_ = reinterpret_cast<::mmorpg::CharacterAppearance*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterData.appearance)
}

// map<string, string> equipped_items = 14;
inline int CharacterData::_internal_equipped_items_size() const {
  return _internal_equipped_items().size();
}
inline int CharacterData::equipped_items_size() const {
  return _internal_equipped_items_size();
}
inline void CharacterData::clear_equipped_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.equipped_items_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& CharacterData::_internal_equipped_items() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.equipped_items_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& CharacterData::equipped_items() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mmorpg.CharacterData.equipped_items)
  return _internal_equipped_items();
}
inline ::google::protobuf::Map<std::string, std::string>* CharacterData::_internal_mutable_equipped_items() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.equipped_items_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* CharacterData::mutable_equipped_items() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mmorpg.CharacterData.equipped_items)
  return _internal_mutable_equipped_items();
}

// map<string, int64> currencies = 15;
inline int CharacterData::_internal_currencies_size() const {
  return _internal_currencies().size();
}
inline int CharacterData::currencies_size() const {
  return _internal_currencies_size();
}
inline void CharacterData::clear_currencies() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.currencies_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int64_t>& CharacterData::_internal_currencies() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.currencies_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int64_t>& CharacterData::currencies() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mmorpg.CharacterData.currencies)
  return _internal_currencies();
}
inline ::google::protobuf::Map<std::string, ::int64_t>* CharacterData::_internal_mutable_currencies() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.currencies_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int64_t>* CharacterData::mutable_currencies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mmorpg.CharacterData.currencies)
  return _internal_mutable_currencies();
}

// .google.protobuf.Timestamp created_at = 16;
inline bool CharacterData::has_created_at() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.created_at_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& CharacterData::_internal_created_at() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& CharacterData::created_at() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.created_at)
  return _internal_created_at();
}
inline void CharacterData::unsafe_arena_set_allocated_created_at(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterData.created_at)
}
inline ::google::protobuf::Timestamp* CharacterData::release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* CharacterData::unsafe_arena_release_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterData.created_at)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CharacterData::_internal_mutable_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.created_at_;
}
inline ::google::protobuf::Timestamp* CharacterData::mutable_created_at() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterData.created_at)
  return _msg;
}
inline void CharacterData::set_allocated_created_at(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.created_at_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.created_at_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterData.created_at)
}

// .google.protobuf.Timestamp last_played = 17;
inline bool CharacterData::has_last_played() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_played_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& CharacterData::_internal_last_played() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Timestamp* p = _impl_.last_played_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& CharacterData::last_played() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.last_played)
  return _internal_last_played();
}
inline void CharacterData::unsafe_arena_set_allocated_last_played(::google::protobuf::Timestamp* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_played_);
  }
  _impl_.last_played_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mmorpg.CharacterData.last_played)
}
inline ::google::protobuf::Timestamp* CharacterData::release_last_played() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.last_played_;
  _impl_.last_played_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Timestamp* CharacterData::unsafe_arena_release_last_played() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.CharacterData.last_played)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.last_played_;
  _impl_.last_played_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* CharacterData::_internal_mutable_last_played() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.last_played_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_played_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_played_;
}
inline ::google::protobuf::Timestamp* CharacterData::mutable_last_played() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_played();
  // @@protoc_insertion_point(field_mutable:mmorpg.CharacterData.last_played)
  return _msg;
}
inline void CharacterData::set_allocated_last_played(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_played_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.last_played_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:mmorpg.CharacterData.last_played)
}

// int64 playtime_seconds = 18;
inline void CharacterData::clear_playtime_seconds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.playtime_seconds_ = ::int64_t{0};
}
inline ::int64_t CharacterData::playtime_seconds() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterData.playtime_seconds)
  return _internal_playtime_seconds();
}
inline void CharacterData::set_playtime_seconds(::int64_t value) {
  _internal_set_playtime_seconds(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterData.playtime_seconds)
}
inline ::int64_t CharacterData::_internal_playtime_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.playtime_seconds_;
}
inline void CharacterData::_internal_set_playtime_seconds(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.playtime_seconds_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CharacterAppearance

// int32 face_type = 1;
inline void CharacterAppearance::clear_face_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.face_type_ = 0;
}
inline ::int32_t CharacterAppearance::face_type() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAppearance.face_type)
  return _internal_face_type();
}
inline void CharacterAppearance::set_face_type(::int32_t value) {
  _internal_set_face_type(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAppearance.face_type)
}
inline ::int32_t CharacterAppearance::_internal_face_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.face_type_;
}
inline void CharacterAppearance::_internal_set_face_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.face_type_ = value;
}

// int32 hair_style = 2;
inline void CharacterAppearance::clear_hair_style() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hair_style_ = 0;
}
inline ::int32_t CharacterAppearance::hair_style() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAppearance.hair_style)
  return _internal_hair_style();
}
inline void CharacterAppearance::set_hair_style(::int32_t value) {
  _internal_set_hair_style(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAppearance.hair_style)
}
inline ::int32_t CharacterAppearance::_internal_hair_style() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hair_style_;
}
inline void CharacterAppearance::_internal_set_hair_style(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hair_style_ = value;
}

// int32 hair_color = 3;
inline void CharacterAppearance::clear_hair_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.hair_color_ = 0;
}
inline ::int32_t CharacterAppearance::hair_color() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAppearance.hair_color)
  return _internal_hair_color();
}
inline void CharacterAppearance::set_hair_color(::int32_t value) {
  _internal_set_hair_color(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAppearance.hair_color)
}
inline ::int32_t CharacterAppearance::_internal_hair_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.hair_color_;
}
inline void CharacterAppearance::_internal_set_hair_color(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.hair_color_ = value;
}

// int32 skin_color = 4;
inline void CharacterAppearance::clear_skin_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.skin_color_ = 0;
}
inline ::int32_t CharacterAppearance::skin_color() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAppearance.skin_color)
  return _internal_skin_color();
}
inline void CharacterAppearance::set_skin_color(::int32_t value) {
  _internal_set_skin_color(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAppearance.skin_color)
}
inline ::int32_t CharacterAppearance::_internal_skin_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.skin_color_;
}
inline void CharacterAppearance::_internal_set_skin_color(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.skin_color_ = value;
}

// int32 eye_color = 5;
inline void CharacterAppearance::clear_eye_color() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.eye_color_ = 0;
}
inline ::int32_t CharacterAppearance::eye_color() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAppearance.eye_color)
  return _internal_eye_color();
}
inline void CharacterAppearance::set_eye_color(::int32_t value) {
  _internal_set_eye_color(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAppearance.eye_color)
}
inline ::int32_t CharacterAppearance::_internal_eye_color() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.eye_color_;
}
inline void CharacterAppearance::_internal_set_eye_color(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.eye_color_ = value;
}

// float height = 6;
inline void CharacterAppearance::clear_height() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.height_ = 0;
}
inline float CharacterAppearance::height() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAppearance.height)
  return _internal_height();
}
inline void CharacterAppearance::set_height(float value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAppearance.height)
}
inline float CharacterAppearance::_internal_height() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.height_;
}
inline void CharacterAppearance::_internal_set_height(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.height_ = value;
}

// float build = 7;
inline void CharacterAppearance::clear_build() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.build_ = 0;
}
inline float CharacterAppearance::build() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAppearance.build)
  return _internal_build();
}
inline void CharacterAppearance::set_build(float value) {
  _internal_set_build(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAppearance.build)
}
inline float CharacterAppearance::_internal_build() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.build_;
}
inline void CharacterAppearance::_internal_set_build(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.build_ = value;
}

// map<string, int32> custom_options = 8;
inline int CharacterAppearance::_internal_custom_options_size() const {
  return _internal_custom_options().size();
}
inline int CharacterAppearance::custom_options_size() const {
  return _internal_custom_options_size();
}
inline void CharacterAppearance::clear_custom_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.custom_options_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& CharacterAppearance::_internal_custom_options() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.custom_options_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& CharacterAppearance::custom_options() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:mmorpg.CharacterAppearance.custom_options)
  return _internal_custom_options();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* CharacterAppearance::_internal_mutable_custom_options() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.custom_options_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* CharacterAppearance::mutable_custom_options() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:mmorpg.CharacterAppearance.custom_options)
  return _internal_mutable_custom_options();
}

// -------------------------------------------------------------------

// CharacterStats

// int32 health = 1;
inline void CharacterStats::clear_health() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.health_ = 0;
}
inline ::int32_t CharacterStats::health() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.health)
  return _internal_health();
}
inline void CharacterStats::set_health(::int32_t value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.health)
}
inline ::int32_t CharacterStats::_internal_health() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.health_;
}
inline void CharacterStats::_internal_set_health(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.health_ = value;
}

// int32 max_health = 2;
inline void CharacterStats::clear_max_health() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_health_ = 0;
}
inline ::int32_t CharacterStats::max_health() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.max_health)
  return _internal_max_health();
}
inline void CharacterStats::set_max_health(::int32_t value) {
  _internal_set_max_health(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.max_health)
}
inline ::int32_t CharacterStats::_internal_max_health() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_health_;
}
inline void CharacterStats::_internal_set_max_health(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_health_ = value;
}

// int32 mana = 3;
inline void CharacterStats::clear_mana() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mana_ = 0;
}
inline ::int32_t CharacterStats::mana() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.mana)
  return _internal_mana();
}
inline void CharacterStats::set_mana(::int32_t value) {
  _internal_set_mana(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.mana)
}
inline ::int32_t CharacterStats::_internal_mana() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mana_;
}
inline void CharacterStats::_internal_set_mana(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mana_ = value;
}

// int32 max_mana = 4;
inline void CharacterStats::clear_max_mana() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_mana_ = 0;
}
inline ::int32_t CharacterStats::max_mana() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.max_mana)
  return _internal_max_mana();
}
inline void CharacterStats::set_max_mana(::int32_t value) {
  _internal_set_max_mana(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.max_mana)
}
inline ::int32_t CharacterStats::_internal_max_mana() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_mana_;
}
inline void CharacterStats::_internal_set_max_mana(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_mana_ = value;
}

// int32 stamina = 5;
inline void CharacterStats::clear_stamina() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stamina_ = 0;
}
inline ::int32_t CharacterStats::stamina() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.stamina)
  return _internal_stamina();
}
inline void CharacterStats::set_stamina(::int32_t value) {
  _internal_set_stamina(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.stamina)
}
inline ::int32_t CharacterStats::_internal_stamina() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stamina_;
}
inline void CharacterStats::_internal_set_stamina(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stamina_ = value;
}

// int32 max_stamina = 6;
inline void CharacterStats::clear_max_stamina() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_stamina_ = 0;
}
inline ::int32_t CharacterStats::max_stamina() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.max_stamina)
  return _internal_max_stamina();
}
inline void CharacterStats::set_max_stamina(::int32_t value) {
  _internal_set_max_stamina(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.max_stamina)
}
inline ::int32_t CharacterStats::_internal_max_stamina() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_stamina_;
}
inline void CharacterStats::_internal_set_max_stamina(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_stamina_ = value;
}

// int32 attack_power = 7;
inline void CharacterStats::clear_attack_power() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attack_power_ = 0;
}
inline ::int32_t CharacterStats::attack_power() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.attack_power)
  return _internal_attack_power();
}
inline void CharacterStats::set_attack_power(::int32_t value) {
  _internal_set_attack_power(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.attack_power)
}
inline ::int32_t CharacterStats::_internal_attack_power() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attack_power_;
}
inline void CharacterStats::_internal_set_attack_power(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attack_power_ = value;
}

// int32 spell_power = 8;
inline void CharacterStats::clear_spell_power() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.spell_power_ = 0;
}
inline ::int32_t CharacterStats::spell_power() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.spell_power)
  return _internal_spell_power();
}
inline void CharacterStats::set_spell_power(::int32_t value) {
  _internal_set_spell_power(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.spell_power)
}
inline ::int32_t CharacterStats::_internal_spell_power() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.spell_power_;
}
inline void CharacterStats::_internal_set_spell_power(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.spell_power_ = value;
}

// int32 defense = 9;
inline void CharacterStats::clear_defense() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.defense_ = 0;
}
inline ::int32_t CharacterStats::defense() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.defense)
  return _internal_defense();
}
inline void CharacterStats::set_defense(::int32_t value) {
  _internal_set_defense(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.defense)
}
inline ::int32_t CharacterStats::_internal_defense() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.defense_;
}
inline void CharacterStats::_internal_set_defense(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.defense_ = value;
}

// int32 magic_resistance = 10;
inline void CharacterStats::clear_magic_resistance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.magic_resistance_ = 0;
}
inline ::int32_t CharacterStats::magic_resistance() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.magic_resistance)
  return _internal_magic_resistance();
}
inline void CharacterStats::set_magic_resistance(::int32_t value) {
  _internal_set_magic_resistance(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.magic_resistance)
}
inline ::int32_t CharacterStats::_internal_magic_resistance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.magic_resistance_;
}
inline void CharacterStats::_internal_set_magic_resistance(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.magic_resistance_ = value;
}

// float critical_chance = 11;
inline void CharacterStats::clear_critical_chance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.critical_chance_ = 0;
}
inline float CharacterStats::critical_chance() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.critical_chance)
  return _internal_critical_chance();
}
inline void CharacterStats::set_critical_chance(float value) {
  _internal_set_critical_chance(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.critical_chance)
}
inline float CharacterStats::_internal_critical_chance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.critical_chance_;
}
inline void CharacterStats::_internal_set_critical_chance(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.critical_chance_ = value;
}

// float critical_damage = 12;
inline void CharacterStats::clear_critical_damage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.critical_damage_ = 0;
}
inline float CharacterStats::critical_damage() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.critical_damage)
  return _internal_critical_damage();
}
inline void CharacterStats::set_critical_damage(float value) {
  _internal_set_critical_damage(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.critical_damage)
}
inline float CharacterStats::_internal_critical_damage() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.critical_damage_;
}
inline void CharacterStats::_internal_set_critical_damage(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.critical_damage_ = value;
}

// float dodge_chance = 13;
inline void CharacterStats::clear_dodge_chance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dodge_chance_ = 0;
}
inline float CharacterStats::dodge_chance() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.dodge_chance)
  return _internal_dodge_chance();
}
inline void CharacterStats::set_dodge_chance(float value) {
  _internal_set_dodge_chance(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.dodge_chance)
}
inline float CharacterStats::_internal_dodge_chance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dodge_chance_;
}
inline void CharacterStats::_internal_set_dodge_chance(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dodge_chance_ = value;
}

// float block_chance = 14;
inline void CharacterStats::clear_block_chance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.block_chance_ = 0;
}
inline float CharacterStats::block_chance() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.block_chance)
  return _internal_block_chance();
}
inline void CharacterStats::set_block_chance(float value) {
  _internal_set_block_chance(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.block_chance)
}
inline float CharacterStats::_internal_block_chance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.block_chance_;
}
inline void CharacterStats::_internal_set_block_chance(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.block_chance_ = value;
}

// float movement_speed = 15;
inline void CharacterStats::clear_movement_speed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.movement_speed_ = 0;
}
inline float CharacterStats::movement_speed() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.movement_speed)
  return _internal_movement_speed();
}
inline void CharacterStats::set_movement_speed(float value) {
  _internal_set_movement_speed(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.movement_speed)
}
inline float CharacterStats::_internal_movement_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.movement_speed_;
}
inline void CharacterStats::_internal_set_movement_speed(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.movement_speed_ = value;
}

// float attack_speed = 16;
inline void CharacterStats::clear_attack_speed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.attack_speed_ = 0;
}
inline float CharacterStats::attack_speed() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.attack_speed)
  return _internal_attack_speed();
}
inline void CharacterStats::set_attack_speed(float value) {
  _internal_set_attack_speed(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.attack_speed)
}
inline float CharacterStats::_internal_attack_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.attack_speed_;
}
inline void CharacterStats::_internal_set_attack_speed(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.attack_speed_ = value;
}

// float cast_speed = 17;
inline void CharacterStats::clear_cast_speed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cast_speed_ = 0;
}
inline float CharacterStats::cast_speed() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterStats.cast_speed)
  return _internal_cast_speed();
}
inline void CharacterStats::set_cast_speed(float value) {
  _internal_set_cast_speed(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterStats.cast_speed)
}
inline float CharacterStats::_internal_cast_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cast_speed_;
}
inline void CharacterStats::_internal_set_cast_speed(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cast_speed_ = value;
}

// -------------------------------------------------------------------

// CharacterAttributes

// int32 strength = 1;
inline void CharacterAttributes::clear_strength() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.strength_ = 0;
}
inline ::int32_t CharacterAttributes::strength() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAttributes.strength)
  return _internal_strength();
}
inline void CharacterAttributes::set_strength(::int32_t value) {
  _internal_set_strength(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAttributes.strength)
}
inline ::int32_t CharacterAttributes::_internal_strength() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.strength_;
}
inline void CharacterAttributes::_internal_set_strength(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.strength_ = value;
}

// int32 agility = 2;
inline void CharacterAttributes::clear_agility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.agility_ = 0;
}
inline ::int32_t CharacterAttributes::agility() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAttributes.agility)
  return _internal_agility();
}
inline void CharacterAttributes::set_agility(::int32_t value) {
  _internal_set_agility(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAttributes.agility)
}
inline ::int32_t CharacterAttributes::_internal_agility() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.agility_;
}
inline void CharacterAttributes::_internal_set_agility(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.agility_ = value;
}

// int32 intelligence = 3;
inline void CharacterAttributes::clear_intelligence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intelligence_ = 0;
}
inline ::int32_t CharacterAttributes::intelligence() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAttributes.intelligence)
  return _internal_intelligence();
}
inline void CharacterAttributes::set_intelligence(::int32_t value) {
  _internal_set_intelligence(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAttributes.intelligence)
}
inline ::int32_t CharacterAttributes::_internal_intelligence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intelligence_;
}
inline void CharacterAttributes::_internal_set_intelligence(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.intelligence_ = value;
}

// int32 wisdom = 4;
inline void CharacterAttributes::clear_wisdom() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.wisdom_ = 0;
}
inline ::int32_t CharacterAttributes::wisdom() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAttributes.wisdom)
  return _internal_wisdom();
}
inline void CharacterAttributes::set_wisdom(::int32_t value) {
  _internal_set_wisdom(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAttributes.wisdom)
}
inline ::int32_t CharacterAttributes::_internal_wisdom() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.wisdom_;
}
inline void CharacterAttributes::_internal_set_wisdom(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wisdom_ = value;
}

// int32 constitution = 5;
inline void CharacterAttributes::clear_constitution() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.constitution_ = 0;
}
inline ::int32_t CharacterAttributes::constitution() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAttributes.constitution)
  return _internal_constitution();
}
inline void CharacterAttributes::set_constitution(::int32_t value) {
  _internal_set_constitution(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAttributes.constitution)
}
inline ::int32_t CharacterAttributes::_internal_constitution() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.constitution_;
}
inline void CharacterAttributes::_internal_set_constitution(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.constitution_ = value;
}

// int32 charisma = 6;
inline void CharacterAttributes::clear_charisma() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.charisma_ = 0;
}
inline ::int32_t CharacterAttributes::charisma() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAttributes.charisma)
  return _internal_charisma();
}
inline void CharacterAttributes::set_charisma(::int32_t value) {
  _internal_set_charisma(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAttributes.charisma)
}
inline ::int32_t CharacterAttributes::_internal_charisma() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.charisma_;
}
inline void CharacterAttributes::_internal_set_charisma(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.charisma_ = value;
}

// int32 unspent_points = 7;
inline void CharacterAttributes::clear_unspent_points() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unspent_points_ = 0;
}
inline ::int32_t CharacterAttributes::unspent_points() const {
  // @@protoc_insertion_point(field_get:mmorpg.CharacterAttributes.unspent_points)
  return _internal_unspent_points();
}
inline void CharacterAttributes::set_unspent_points(::int32_t value) {
  _internal_set_unspent_points(value);
  // @@protoc_insertion_point(field_set:mmorpg.CharacterAttributes.unspent_points)
}
inline ::int32_t CharacterAttributes::_internal_unspent_points() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unspent_points_;
}
inline void CharacterAttributes::_internal_set_unspent_points(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.unspent_points_ = value;
}

// -------------------------------------------------------------------

// EquipmentPreview

// string slot = 1;
inline void EquipmentPreview::clear_slot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.slot_.ClearToEmpty();
}
inline const std::string& EquipmentPreview::slot() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.EquipmentPreview.slot)
  return _internal_slot();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EquipmentPreview::set_slot(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slot_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.EquipmentPreview.slot)
}
inline std::string* EquipmentPreview::mutable_slot() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_slot();
  // @@protoc_insertion_point(field_mutable:mmorpg.EquipmentPreview.slot)
  return _s;
}
inline const std::string& EquipmentPreview::_internal_slot() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.slot_.Get();
}
inline void EquipmentPreview::_internal_set_slot(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slot_.Set(value, GetArena());
}
inline std::string* EquipmentPreview::_internal_mutable_slot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.slot_.Mutable( GetArena());
}
inline std::string* EquipmentPreview::release_slot() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.EquipmentPreview.slot)
  return _impl_.slot_.Release();
}
inline void EquipmentPreview::set_allocated_slot(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.slot_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.slot_.IsDefault()) {
          _impl_.slot_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EquipmentPreview.slot)
}

// string item_id = 2;
inline void EquipmentPreview::clear_item_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.item_id_.ClearToEmpty();
}
inline const std::string& EquipmentPreview::item_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.EquipmentPreview.item_id)
  return _internal_item_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EquipmentPreview::set_item_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.item_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.EquipmentPreview.item_id)
}
inline std::string* EquipmentPreview::mutable_item_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_item_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.EquipmentPreview.item_id)
  return _s;
}
inline const std::string& EquipmentPreview::_internal_item_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.item_id_.Get();
}
inline void EquipmentPreview::_internal_set_item_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.item_id_.Set(value, GetArena());
}
inline std::string* EquipmentPreview::_internal_mutable_item_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.item_id_.Mutable( GetArena());
}
inline std::string* EquipmentPreview::release_item_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.EquipmentPreview.item_id)
  return _impl_.item_id_.Release();
}
inline void EquipmentPreview::set_allocated_item_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.item_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.item_id_.IsDefault()) {
          _impl_.item_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EquipmentPreview.item_id)
}

// string icon_id = 3;
inline void EquipmentPreview::clear_icon_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.icon_id_.ClearToEmpty();
}
inline const std::string& EquipmentPreview::icon_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mmorpg.EquipmentPreview.icon_id)
  return _internal_icon_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EquipmentPreview::set_icon_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mmorpg.EquipmentPreview.icon_id)
}
inline std::string* EquipmentPreview::mutable_icon_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_icon_id();
  // @@protoc_insertion_point(field_mutable:mmorpg.EquipmentPreview.icon_id)
  return _s;
}
inline const std::string& EquipmentPreview::_internal_icon_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.icon_id_.Get();
}
inline void EquipmentPreview::_internal_set_icon_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.icon_id_.Set(value, GetArena());
}
inline std::string* EquipmentPreview::_internal_mutable_icon_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.icon_id_.Mutable( GetArena());
}
inline std::string* EquipmentPreview::release_icon_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mmorpg.EquipmentPreview.icon_id)
  return _impl_.icon_id_.Release();
}
inline void EquipmentPreview::set_allocated_icon_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.icon_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.icon_id_.IsDefault()) {
          _impl_.icon_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EquipmentPreview.icon_id)
}

// int32 quality = 4;
inline void EquipmentPreview::clear_quality() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.quality_ = 0;
}
inline ::int32_t EquipmentPreview::quality() const {
  // @@protoc_insertion_point(field_get:mmorpg.EquipmentPreview.quality)
  return _internal_quality();
}
inline void EquipmentPreview::set_quality(::int32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:mmorpg.EquipmentPreview.quality)
}
inline ::int32_t EquipmentPreview::_internal_quality() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.quality_;
}
inline void EquipmentPreview::_internal_set_quality(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.quality_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mmorpg


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mmorpg::CharacterClass> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mmorpg::CharacterClass>() {
  return ::mmorpg::CharacterClass_descriptor();
}
template <>
struct is_proto_enum<::mmorpg::CharacterRace> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mmorpg::CharacterRace>() {
  return ::mmorpg::CharacterRace_descriptor();
}
template <>
struct is_proto_enum<::mmorpg::Gender> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mmorpg::Gender>() {
  return ::mmorpg::Gender_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_character_2eproto_2epb_2eh
