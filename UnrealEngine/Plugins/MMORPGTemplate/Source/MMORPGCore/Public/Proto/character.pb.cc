// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: character.proto

#include "character.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mmorpg {

inline constexpr EquipmentPreview::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : slot_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        item_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        icon_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        quality_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EquipmentPreview::EquipmentPreview(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EquipmentPreviewDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EquipmentPreviewDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EquipmentPreviewDefaultTypeInternal() {}
  union {
    EquipmentPreview _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EquipmentPreviewDefaultTypeInternal _EquipmentPreview_default_instance_;

inline constexpr CharacterStats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : health_{0},
        max_health_{0},
        mana_{0},
        max_mana_{0},
        stamina_{0},
        max_stamina_{0},
        attack_power_{0},
        spell_power_{0},
        defense_{0},
        magic_resistance_{0},
        critical_chance_{0},
        critical_damage_{0},
        dodge_chance_{0},
        block_chance_{0},
        movement_speed_{0},
        attack_speed_{0},
        cast_speed_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterStats::CharacterStats(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterStatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterStatsDefaultTypeInternal() {}
  union {
    CharacterStats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterStatsDefaultTypeInternal _CharacterStats_default_instance_;

inline constexpr CharacterSelectRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : character_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        session_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterSelectRequest::CharacterSelectRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterSelectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterSelectRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterSelectRequestDefaultTypeInternal() {}
  union {
    CharacterSelectRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterSelectRequestDefaultTypeInternal _CharacterSelectRequest_default_instance_;

inline constexpr CharacterListRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        session_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterListRequest::CharacterListRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterListRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterListRequestDefaultTypeInternal() {}
  union {
    CharacterListRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterListRequestDefaultTypeInternal _CharacterListRequest_default_instance_;

inline constexpr CharacterDeleteResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterDeleteResponse::CharacterDeleteResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterDeleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterDeleteResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterDeleteResponseDefaultTypeInternal() {}
  union {
    CharacterDeleteResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterDeleteResponseDefaultTypeInternal _CharacterDeleteResponse_default_instance_;

inline constexpr CharacterDeleteRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : character_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        session_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        confirmation_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterDeleteRequest::CharacterDeleteRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterDeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterDeleteRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterDeleteRequestDefaultTypeInternal() {}
  union {
    CharacterDeleteRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterDeleteRequestDefaultTypeInternal _CharacterDeleteRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR CharacterData_EquippedItemsEntry_DoNotUse::CharacterData_EquippedItemsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct CharacterData_EquippedItemsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterData_EquippedItemsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterData_EquippedItemsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CharacterData_EquippedItemsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterData_EquippedItemsEntry_DoNotUseDefaultTypeInternal _CharacterData_EquippedItemsEntry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR CharacterData_CurrenciesEntry_DoNotUse::CharacterData_CurrenciesEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct CharacterData_CurrenciesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterData_CurrenciesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterData_CurrenciesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CharacterData_CurrenciesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterData_CurrenciesEntry_DoNotUseDefaultTypeInternal _CharacterData_CurrenciesEntry_DoNotUse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR CharacterCreateResponse_ValidationErrorsEntry_DoNotUse::CharacterCreateResponse_ValidationErrorsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct CharacterCreateResponse_ValidationErrorsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterCreateResponse_ValidationErrorsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterCreateResponse_ValidationErrorsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CharacterCreateResponse_ValidationErrorsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterCreateResponse_ValidationErrorsEntry_DoNotUseDefaultTypeInternal _CharacterCreateResponse_ValidationErrorsEntry_DoNotUse_default_instance_;

inline constexpr CharacterAttributes::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : strength_{0},
        agility_{0},
        intelligence_{0},
        wisdom_{0},
        constitution_{0},
        charisma_{0},
        unspent_points_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterAttributes::CharacterAttributes(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterAttributesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterAttributesDefaultTypeInternal() {}
  union {
    CharacterAttributes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterAttributesDefaultTypeInternal _CharacterAttributes_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR CharacterAppearance_CustomOptionsEntry_DoNotUse::CharacterAppearance_CustomOptionsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct CharacterAppearance_CustomOptionsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterAppearance_CustomOptionsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterAppearance_CustomOptionsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CharacterAppearance_CustomOptionsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterAppearance_CustomOptionsEntry_DoNotUseDefaultTypeInternal _CharacterAppearance_CustomOptionsEntry_DoNotUse_default_instance_;

inline constexpr CharacterAppearance::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : custom_options_{},
        face_type_{0},
        hair_style_{0},
        hair_color_{0},
        skin_color_{0},
        eye_color_{0},
        height_{0},
        build_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterAppearance::CharacterAppearance(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterAppearanceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterAppearanceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterAppearanceDefaultTypeInternal() {}
  union {
    CharacterAppearance _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterAppearanceDefaultTypeInternal _CharacterAppearance_default_instance_;

inline constexpr CharacterInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        equipment_preview_{},
        character_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        location_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_at_{nullptr},
        last_played_{nullptr},
        appearance_{nullptr},
        class__{static_cast< ::mmorpg::CharacterClass >(0)},
        race_{static_cast< ::mmorpg::CharacterRace >(0)},
        gender_{static_cast< ::mmorpg::Gender >(0)},
        level_{0},
        playtime_seconds_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterInfo::CharacterInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterInfoDefaultTypeInternal() {}
  union {
    CharacterInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterInfoDefaultTypeInternal _CharacterInfo_default_instance_;

inline constexpr CharacterData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        equipped_items_{},
        currencies_{},
        character_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_zone_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        stats_{nullptr},
        attributes_{nullptr},
        last_transform_{nullptr},
        appearance_{nullptr},
        created_at_{nullptr},
        last_played_{nullptr},
        class__{static_cast< ::mmorpg::CharacterClass >(0)},
        race_{static_cast< ::mmorpg::CharacterRace >(0)},
        gender_{static_cast< ::mmorpg::Gender >(0)},
        level_{0},
        experience_{::int64_t{0}},
        experience_to_next_level_{::int64_t{0}},
        playtime_seconds_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterData::CharacterData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterDataDefaultTypeInternal() {}
  union {
    CharacterData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterDataDefaultTypeInternal _CharacterData_default_instance_;

inline constexpr CharacterCreateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        session_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        appearance_{nullptr},
        class__{static_cast< ::mmorpg::CharacterClass >(0)},
        race_{static_cast< ::mmorpg::CharacterRace >(0)},
        gender_{static_cast< ::mmorpg::Gender >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterCreateRequest::CharacterCreateRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterCreateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterCreateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterCreateRequestDefaultTypeInternal() {}
  union {
    CharacterCreateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterCreateRequestDefaultTypeInternal _CharacterCreateRequest_default_instance_;

inline constexpr CharacterSelectResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        world_server_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        world_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        character_data_{nullptr},
        success_{false},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterSelectResponse::CharacterSelectResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterSelectResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterSelectResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterSelectResponseDefaultTypeInternal() {}
  union {
    CharacterSelectResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterSelectResponseDefaultTypeInternal _CharacterSelectResponse_default_instance_;

inline constexpr CharacterListResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : characters_{},
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        max_characters_{0},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterListResponse::CharacterListResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterListResponseDefaultTypeInternal() {}
  union {
    CharacterListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterListResponseDefaultTypeInternal _CharacterListResponse_default_instance_;

inline constexpr CharacterCreateResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        validation_errors_{},
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        character_{nullptr},
        success_{false},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterCreateResponse::CharacterCreateResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct CharacterCreateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterCreateResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterCreateResponseDefaultTypeInternal() {}
  union {
    CharacterCreateResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterCreateResponseDefaultTypeInternal _CharacterCreateResponse_default_instance_;
}  // namespace mmorpg
static ::_pb::Metadata file_level_metadata_character_2eproto[18];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_character_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_character_2eproto = nullptr;
const ::uint32_t TableStruct_character_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterListRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterListRequest, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterListRequest, _impl_.session_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterListResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterListResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterListResponse, _impl_.characters_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterListResponse, _impl_.max_characters_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterListResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterListResponse, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateRequest, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateRequest, _impl_.class__),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateRequest, _impl_.race_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateRequest, _impl_.gender_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateRequest, _impl_.appearance_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateRequest, _impl_.session_id_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateResponse_ValidationErrorsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateResponse_ValidationErrorsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateResponse_ValidationErrorsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateResponse_ValidationErrorsEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateResponse, _impl_.character_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateResponse, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterCreateResponse, _impl_.validation_errors_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterDeleteRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterDeleteRequest, _impl_.character_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterDeleteRequest, _impl_.session_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterDeleteRequest, _impl_.confirmation_code_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterDeleteResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterDeleteResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterDeleteResponse, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterDeleteResponse, _impl_.error_code_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterSelectRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterSelectRequest, _impl_.character_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterSelectRequest, _impl_.session_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterSelectResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterSelectResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterSelectResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterSelectResponse, _impl_.character_data_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterSelectResponse, _impl_.world_server_url_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterSelectResponse, _impl_.world_token_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterSelectResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterSelectResponse, _impl_.error_code_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.character_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.class__),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.race_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.gender_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.last_played_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.playtime_seconds_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.appearance_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterInfo, _impl_.equipment_preview_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    2,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData_EquippedItemsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData_EquippedItemsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData_EquippedItemsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData_EquippedItemsEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData_CurrenciesEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData_CurrenciesEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData_CurrenciesEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData_CurrenciesEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.character_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.class__),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.race_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.gender_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.stats_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.attributes_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.experience_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.experience_to_next_level_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.last_transform_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.last_zone_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.appearance_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.equipped_items_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.currencies_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.last_played_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterData, _impl_.playtime_seconds_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    2,
    ~0u,
    3,
    ~0u,
    ~0u,
    4,
    5,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance_CustomOptionsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance_CustomOptionsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance_CustomOptionsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance_CustomOptionsEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance, _impl_.face_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance, _impl_.hair_style_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance, _impl_.hair_color_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance, _impl_.skin_color_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance, _impl_.eye_color_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance, _impl_.build_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAppearance, _impl_.custom_options_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.health_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.max_health_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.mana_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.max_mana_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.stamina_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.max_stamina_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.attack_power_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.spell_power_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.defense_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.magic_resistance_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.critical_chance_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.critical_damage_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.dodge_chance_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.block_chance_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.movement_speed_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.attack_speed_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterStats, _impl_.cast_speed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAttributes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAttributes, _impl_.strength_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAttributes, _impl_.agility_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAttributes, _impl_.intelligence_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAttributes, _impl_.wisdom_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAttributes, _impl_.constitution_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAttributes, _impl_.charisma_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::CharacterAttributes, _impl_.unspent_points_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::EquipmentPreview, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::EquipmentPreview, _impl_.slot_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::EquipmentPreview, _impl_.item_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::EquipmentPreview, _impl_.icon_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::EquipmentPreview, _impl_.quality_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::mmorpg::CharacterListRequest)},
        {10, -1, -1, sizeof(::mmorpg::CharacterListResponse)},
        {23, 37, -1, sizeof(::mmorpg::CharacterCreateRequest)},
        {43, 53, -1, sizeof(::mmorpg::CharacterCreateResponse_ValidationErrorsEntry_DoNotUse)},
        {55, 68, -1, sizeof(::mmorpg::CharacterCreateResponse)},
        {73, -1, -1, sizeof(::mmorpg::CharacterDeleteRequest)},
        {84, -1, -1, sizeof(::mmorpg::CharacterDeleteResponse)},
        {95, -1, -1, sizeof(::mmorpg::CharacterSelectRequest)},
        {105, 119, -1, sizeof(::mmorpg::CharacterSelectResponse)},
        {125, 145, -1, sizeof(::mmorpg::CharacterInfo)},
        {157, 167, -1, sizeof(::mmorpg::CharacterData_EquippedItemsEntry_DoNotUse)},
        {169, 179, -1, sizeof(::mmorpg::CharacterData_CurrenciesEntry_DoNotUse)},
        {181, 207, -1, sizeof(::mmorpg::CharacterData)},
        {225, 235, -1, sizeof(::mmorpg::CharacterAppearance_CustomOptionsEntry_DoNotUse)},
        {237, -1, -1, sizeof(::mmorpg::CharacterAppearance)},
        {253, -1, -1, sizeof(::mmorpg::CharacterStats)},
        {278, -1, -1, sizeof(::mmorpg::CharacterAttributes)},
        {293, -1, -1, sizeof(::mmorpg::EquipmentPreview)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mmorpg::_CharacterListRequest_default_instance_._instance,
    &::mmorpg::_CharacterListResponse_default_instance_._instance,
    &::mmorpg::_CharacterCreateRequest_default_instance_._instance,
    &::mmorpg::_CharacterCreateResponse_ValidationErrorsEntry_DoNotUse_default_instance_._instance,
    &::mmorpg::_CharacterCreateResponse_default_instance_._instance,
    &::mmorpg::_CharacterDeleteRequest_default_instance_._instance,
    &::mmorpg::_CharacterDeleteResponse_default_instance_._instance,
    &::mmorpg::_CharacterSelectRequest_default_instance_._instance,
    &::mmorpg::_CharacterSelectResponse_default_instance_._instance,
    &::mmorpg::_CharacterInfo_default_instance_._instance,
    &::mmorpg::_CharacterData_EquippedItemsEntry_DoNotUse_default_instance_._instance,
    &::mmorpg::_CharacterData_CurrenciesEntry_DoNotUse_default_instance_._instance,
    &::mmorpg::_CharacterData_default_instance_._instance,
    &::mmorpg::_CharacterAppearance_CustomOptionsEntry_DoNotUse_default_instance_._instance,
    &::mmorpg::_CharacterAppearance_default_instance_._instance,
    &::mmorpg::_CharacterStats_default_instance_._instance,
    &::mmorpg::_CharacterAttributes_default_instance_._instance,
    &::mmorpg::_EquipmentPreview_default_instance_._instance,
};
const char descriptor_table_protodef_character_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017character.proto\022\006mmorpg\032\037google/protob"
    "uf/timestamp.proto\032\nbase.proto\";\n\024Charac"
    "terListRequest\022\017\n\007user_id\030\001 \001(\t\022\022\n\nsessi"
    "on_id\030\002 \001(\t\"\251\001\n\025CharacterListResponse\022\017\n"
    "\007success\030\001 \001(\010\022)\n\ncharacters\030\002 \003(\0132\025.mmo"
    "rpg.CharacterInfo\022\026\n\016max_characters\030\003 \001("
    "\005\022\025\n\rerror_message\030\004 \001(\t\022%\n\nerror_code\030\005"
    " \001(\0162\021.mmorpg.ErrorCode\"\327\001\n\026CharacterCre"
    "ateRequest\022\014\n\004name\030\001 \001(\t\022%\n\005class\030\002 \001(\0162"
    "\026.mmorpg.CharacterClass\022#\n\004race\030\003 \001(\0162\025."
    "mmorpg.CharacterRace\022\036\n\006gender\030\004 \001(\0162\016.m"
    "morpg.Gender\022/\n\nappearance\030\005 \001(\0132\033.mmorp"
    "g.CharacterAppearance\022\022\n\nsession_id\030\006 \001("
    "\t\"\235\002\n\027CharacterCreateResponse\022\017\n\007success"
    "\030\001 \001(\010\022(\n\tcharacter\030\002 \001(\0132\025.mmorpg.Chara"
    "cterInfo\022\025\n\rerror_message\030\003 \001(\t\022%\n\nerror"
    "_code\030\004 \001(\0162\021.mmorpg.ErrorCode\022P\n\021valida"
    "tion_errors\030\005 \003(\01325.mmorpg.CharacterCrea"
    "teResponse.ValidationErrorsEntry\0327\n\025Vali"
    "dationErrorsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
    "\002 \001(\t:\0028\001\"]\n\026CharacterDeleteRequest\022\024\n\014c"
    "haracter_id\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\022\031\n"
    "\021confirmation_code\030\003 \001(\t\"b\n\027CharacterDel"
    "eteResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030"
    "\002 \001(\t\022%\n\nerror_code\030\003 \001(\0162\021.mmorpg.Error"
    "Code\"B\n\026CharacterSelectRequest\022\024\n\014charac"
    "ter_id\030\001 \001(\t\022\022\n\nsession_id\030\002 \001(\t\"\306\001\n\027Cha"
    "racterSelectResponse\022\017\n\007success\030\001 \001(\010\022-\n"
    "\016character_data\030\002 \001(\0132\025.mmorpg.Character"
    "Data\022\030\n\020world_server_url\030\003 \001(\t\022\023\n\013world_"
    "token\030\004 \001(\t\022\025\n\rerror_message\030\005 \001(\t\022%\n\ner"
    "ror_code\030\006 \001(\0162\021.mmorpg.ErrorCode\"\241\003\n\rCh"
    "aracterInfo\022\024\n\014character_id\030\001 \001(\t\022\014\n\004nam"
    "e\030\002 \001(\t\022%\n\005class\030\003 \001(\0162\026.mmorpg.Characte"
    "rClass\022#\n\004race\030\004 \001(\0162\025.mmorpg.CharacterR"
    "ace\022\036\n\006gender\030\005 \001(\0162\016.mmorpg.Gender\022\r\n\005l"
    "evel\030\006 \001(\005\022\020\n\010location\030\007 \001(\t\022.\n\ncreated_"
    "at\030\010 \001(\0132\032.google.protobuf.Timestamp\022/\n\013"
    "last_played\030\t \001(\0132\032.google.protobuf.Time"
    "stamp\022\030\n\020playtime_seconds\030\n \001(\003\022/\n\nappea"
    "rance\030\013 \001(\0132\033.mmorpg.CharacterAppearance"
    "\0223\n\021equipment_preview\030\014 \003(\0132\030.mmorpg.Equ"
    "ipmentPreview\"\217\006\n\rCharacterData\022\024\n\014chara"
    "cter_id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022%\n\005class\030\003 \001"
    "(\0162\026.mmorpg.CharacterClass\022#\n\004race\030\004 \001(\016"
    "2\025.mmorpg.CharacterRace\022\036\n\006gender\030\005 \001(\0162"
    "\016.mmorpg.Gender\022%\n\005stats\030\006 \001(\0132\026.mmorpg."
    "CharacterStats\022/\n\nattributes\030\007 \001(\0132\033.mmo"
    "rpg.CharacterAttributes\022\r\n\005level\030\010 \001(\005\022\022"
    "\n\nexperience\030\t \001(\003\022 \n\030experience_to_next"
    "_level\030\n \001(\003\022)\n\016last_transform\030\013 \001(\0132\021.m"
    "morpg.Transform\022\024\n\014last_zone_id\030\014 \001(\t\022/\n"
    "\nappearance\030\r \001(\0132\033.mmorpg.CharacterAppe"
    "arance\022@\n\016equipped_items\030\016 \003(\0132(.mmorpg."
    "CharacterData.EquippedItemsEntry\0229\n\ncurr"
    "encies\030\017 \003(\0132%.mmorpg.CharacterData.Curr"
    "enciesEntry\022.\n\ncreated_at\030\020 \001(\0132\032.google"
    ".protobuf.Timestamp\022/\n\013last_played\030\021 \001(\013"
    "2\032.google.protobuf.Timestamp\022\030\n\020playtime"
    "_seconds\030\022 \001(\003\0324\n\022EquippedItemsEntry\022\013\n\003"
    "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\0321\n\017Currenci"
    "esEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\""
    "\224\002\n\023CharacterAppearance\022\021\n\tface_type\030\001 \001"
    "(\005\022\022\n\nhair_style\030\002 \001(\005\022\022\n\nhair_color\030\003 \001"
    "(\005\022\022\n\nskin_color\030\004 \001(\005\022\021\n\teye_color\030\005 \001("
    "\005\022\016\n\006height\030\006 \001(\002\022\r\n\005build\030\007 \001(\002\022F\n\016cust"
    "om_options\030\010 \003(\0132..mmorpg.CharacterAppea"
    "rance.CustomOptionsEntry\0324\n\022CustomOption"
    "sEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"\360"
    "\002\n\016CharacterStats\022\016\n\006health\030\001 \001(\005\022\022\n\nmax"
    "_health\030\002 \001(\005\022\014\n\004mana\030\003 \001(\005\022\020\n\010max_mana\030"
    "\004 \001(\005\022\017\n\007stamina\030\005 \001(\005\022\023\n\013max_stamina\030\006 "
    "\001(\005\022\024\n\014attack_power\030\007 \001(\005\022\023\n\013spell_power"
    "\030\010 \001(\005\022\017\n\007defense\030\t \001(\005\022\030\n\020magic_resista"
    "nce\030\n \001(\005\022\027\n\017critical_chance\030\013 \001(\002\022\027\n\017cr"
    "itical_damage\030\014 \001(\002\022\024\n\014dodge_chance\030\r \001("
    "\002\022\024\n\014block_chance\030\016 \001(\002\022\026\n\016movement_spee"
    "d\030\017 \001(\002\022\024\n\014attack_speed\030\020 \001(\002\022\022\n\ncast_sp"
    "eed\030\021 \001(\002\"\236\001\n\023CharacterAttributes\022\020\n\010str"
    "ength\030\001 \001(\005\022\017\n\007agility\030\002 \001(\005\022\024\n\014intellig"
    "ence\030\003 \001(\005\022\016\n\006wisdom\030\004 \001(\005\022\024\n\014constituti"
    "on\030\005 \001(\005\022\020\n\010charisma\030\006 \001(\005\022\026\n\016unspent_po"
    "ints\030\007 \001(\005\"S\n\020EquipmentPreview\022\014\n\004slot\030\001"
    " \001(\t\022\017\n\007item_id\030\002 \001(\t\022\017\n\007icon_id\030\003 \001(\t\022\017"
    "\n\007quality\030\004 \001(\005*\220\002\n\016CharacterClass\022\037\n\033CH"
    "ARACTER_CLASS_UNSPECIFIED\020\000\022\033\n\027CHARACTER"
    "_CLASS_WARRIOR\020\001\022\030\n\024CHARACTER_CLASS_MAGE"
    "\020\002\022\032\n\026CHARACTER_CLASS_ARCHER\020\003\022\031\n\025CHARAC"
    "TER_CLASS_ROGUE\020\004\022\032\n\026CHARACTER_CLASS_PRI"
    "EST\020\005\022\033\n\027CHARACTER_CLASS_PALADIN\020\006\022\033\n\027CH"
    "ARACTER_CLASS_WARLOCK\020\007\022\031\n\025CHARACTER_CLA"
    "SS_DRUID\020\010*\377\001\n\rCharacterRace\022\036\n\032CHARACTE"
    "R_RACE_UNSPECIFIED\020\000\022\030\n\024CHARACTER_RACE_H"
    "UMAN\020\001\022\026\n\022CHARACTER_RACE_ELF\020\002\022\030\n\024CHARAC"
    "TER_RACE_DWARF\020\003\022\026\n\022CHARACTER_RACE_ORC\020\004"
    "\022\030\n\024CHARACTER_RACE_GNOME\020\005\022\031\n\025CHARACTER_"
    "RACE_UNDEAD\020\006\022\030\n\024CHARACTER_RACE_TROLL\020\007\022"
    "\033\n\027CHARACTER_RACE_HALFLING\020\010*V\n\006Gender\022\026"
    "\n\022GENDER_UNSPECIFIED\020\000\022\017\n\013GENDER_MALE\020\001\022"
    "\021\n\rGENDER_FEMALE\020\002\022\020\n\014GENDER_OTHER\020\003B.Z,"
    "github.com/mmorpg-template/backend/pkg/p"
    "rotob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_character_2eproto_deps[2] =
    {
        &::descriptor_table_base_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_character_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_character_2eproto = {
    false,
    false,
    4052,
    descriptor_table_protodef_character_2eproto,
    "character.proto",
    &descriptor_table_character_2eproto_once,
    descriptor_table_character_2eproto_deps,
    2,
    18,
    schemas,
    file_default_instances,
    TableStruct_character_2eproto::offsets,
    file_level_metadata_character_2eproto,
    file_level_enum_descriptors_character_2eproto,
    file_level_service_descriptors_character_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_character_2eproto_getter() {
  return &descriptor_table_character_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_character_2eproto(&descriptor_table_character_2eproto);
namespace mmorpg {
const ::google::protobuf::EnumDescriptor* CharacterClass_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_character_2eproto);
  return file_level_enum_descriptors_character_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t CharacterClass_internal_data_[] = {
    589824u, 0u, };
bool CharacterClass_IsValid(int value) {
  return 0 <= value && value <= 8;
}
const ::google::protobuf::EnumDescriptor* CharacterRace_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_character_2eproto);
  return file_level_enum_descriptors_character_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t CharacterRace_internal_data_[] = {
    589824u, 0u, };
bool CharacterRace_IsValid(int value) {
  return 0 <= value && value <= 8;
}
const ::google::protobuf::EnumDescriptor* Gender_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_character_2eproto);
  return file_level_enum_descriptors_character_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t Gender_internal_data_[] = {
    262144u, 0u, };
bool Gender_IsValid(int value) {
  return 0 <= value && value <= 3;
}
// ===================================================================

class CharacterListRequest::_Internal {
 public:
};

CharacterListRequest::CharacterListRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterListRequest)
}
inline PROTOBUF_NDEBUG_INLINE CharacterListRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : user_id_(arena, from.user_id_),
        session_id_(arena, from.session_id_),
        _cached_size_{0} {}

CharacterListRequest::CharacterListRequest(
    ::google::protobuf::Arena* arena,
    const CharacterListRequest& from)
    : ::google::protobuf::Message(arena) {
  CharacterListRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:mmorpg.CharacterListRequest)
}
inline PROTOBUF_NDEBUG_INLINE CharacterListRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : user_id_(arena),
        session_id_(arena),
        _cached_size_{0} {}

inline void CharacterListRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CharacterListRequest::~CharacterListRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterListRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterListRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterListRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_id_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterListRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 53, 2> CharacterListRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CharacterListRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string session_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterListRequest, _impl_.session_id_)}},
    // string user_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterListRequest, _impl_.user_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string user_id = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterListRequest, _impl_.user_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterListRequest, _impl_.session_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\7\12\0\0\0\0\0"
    "mmorpg.CharacterListRequest"
    "user_id"
    "session_id"
  }},
};

::uint8_t* CharacterListRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterListRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterListRequest.user_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    const std::string& _s = this->_internal_session_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterListRequest.session_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterListRequest)
  return target;
}

::size_t CharacterListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterListRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterListRequest::_class_data_ = {
    CharacterListRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterListRequest::GetClassData() const {
  return &_class_data_;
}

void CharacterListRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterListRequest*>(&to_msg);
  auto& from = static_cast<const CharacterListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterListRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterListRequest::CopyFrom(const CharacterListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterListRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterListRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterListRequest::InternalSwap(CharacterListRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, &other->_impl_.user_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, &other->_impl_.session_id_, arena);
}

::google::protobuf::Metadata CharacterListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[0]);
}
// ===================================================================

class CharacterListResponse::_Internal {
 public:
};

CharacterListResponse::CharacterListResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterListResponse)
}
inline PROTOBUF_NDEBUG_INLINE CharacterListResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : characters_{visibility, arena, from.characters_},
        error_message_(arena, from.error_message_),
        _cached_size_{0} {}

CharacterListResponse::CharacterListResponse(
    ::google::protobuf::Arena* arena,
    const CharacterListResponse& from)
    : ::google::protobuf::Message(arena) {
  CharacterListResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.CharacterListResponse)
}
inline PROTOBUF_NDEBUG_INLINE CharacterListResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : characters_{visibility, arena},
        error_message_(arena),
        _cached_size_{0} {}

inline void CharacterListResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));
}
CharacterListResponse::~CharacterListResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterListResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterListResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.error_message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterListResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.characters_.Clear();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterListResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 50, 2> CharacterListResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CharacterListResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CharacterListResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.success_)}},
    // repeated .mmorpg.CharacterInfo characters = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.characters_)}},
    // int32 max_characters = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterListResponse, _impl_.max_characters_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.max_characters_)}},
    // string error_message = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.error_message_)}},
    // .mmorpg.ErrorCode error_code = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterListResponse, _impl_.error_code_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.error_code_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .mmorpg.CharacterInfo characters = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.characters_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 max_characters = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.max_characters_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string error_message = 4;
    {PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.error_message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 5;
    {PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.error_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::CharacterInfo>()},
  }}, {{
    "\34\0\0\0\15\0\0\0"
    "mmorpg.CharacterListResponse"
    "error_message"
  }},
};

::uint8_t* CharacterListResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterListResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // repeated .mmorpg.CharacterInfo characters = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_characters_size()); i < n; i++) {
    const auto& repfield = this->_internal_characters().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 max_characters = 3;
  if (this->_internal_max_characters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_max_characters(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterListResponse.error_message");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 5;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterListResponse)
  return target;
}

::size_t CharacterListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mmorpg.CharacterInfo characters = 2;
  total_size += 1UL * this->_internal_characters_size();
  for (const auto& msg : this->_internal_characters()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // int32 max_characters = 3;
  if (this->_internal_max_characters() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_characters());
  }

  // .mmorpg.ErrorCode error_code = 5;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterListResponse::_class_data_ = {
    CharacterListResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterListResponse::GetClassData() const {
  return &_class_data_;
}

void CharacterListResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterListResponse*>(&to_msg);
  auto& from = static_cast<const CharacterListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_characters()->MergeFrom(
      from._internal_characters());
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_max_characters() != 0) {
    _this->_internal_set_max_characters(from._internal_max_characters());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterListResponse::CopyFrom(const CharacterListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterListResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterListResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterListResponse::InternalSwap(CharacterListResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.characters_.InternalSwap(&other->_impl_.characters_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.error_code_)
      + sizeof(CharacterListResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(CharacterListResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::google::protobuf::Metadata CharacterListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[1]);
}
// ===================================================================

class CharacterCreateRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterCreateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_._has_bits_);
  static const ::mmorpg::CharacterAppearance& appearance(const CharacterCreateRequest* msg);
  static void set_has_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mmorpg::CharacterAppearance& CharacterCreateRequest::_Internal::appearance(const CharacterCreateRequest* msg) {
  return *msg->_impl_.appearance_;
}
CharacterCreateRequest::CharacterCreateRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterCreateRequest)
}
inline PROTOBUF_NDEBUG_INLINE CharacterCreateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        session_id_(arena, from.session_id_) {}

CharacterCreateRequest::CharacterCreateRequest(
    ::google::protobuf::Arena* arena,
    const CharacterCreateRequest& from)
    : ::google::protobuf::Message(arena) {
  CharacterCreateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.appearance_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::CharacterAppearance>(arena, *from._impl_.appearance_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, class__),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, class__),
           offsetof(Impl_, gender_) -
               offsetof(Impl_, class__) +
               sizeof(Impl_::gender_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.CharacterCreateRequest)
}
inline PROTOBUF_NDEBUG_INLINE CharacterCreateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        name_(arena),
        session_id_(arena) {}

inline void CharacterCreateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, appearance_),
           0,
           offsetof(Impl_, gender_) -
               offsetof(Impl_, appearance_) +
               sizeof(Impl_::gender_));
}
CharacterCreateRequest::~CharacterCreateRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterCreateRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterCreateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.session_id_.Destroy();
  delete _impl_.appearance_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterCreateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterCreateRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.appearance_ != nullptr);
    _impl_.appearance_->Clear();
  }
  ::memset(&_impl_.class__, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.gender_) -
      reinterpret_cast<char*>(&_impl_.class__)) + sizeof(_impl_.gender_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterCreateRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 52, 2> CharacterCreateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CharacterCreateRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.name_)}},
    // .mmorpg.CharacterClass class = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterCreateRequest, _impl_.class__), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.class__)}},
    // .mmorpg.CharacterRace race = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterCreateRequest, _impl_.race_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.race_)}},
    // .mmorpg.Gender gender = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterCreateRequest, _impl_.gender_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.gender_)}},
    // .mmorpg.CharacterAppearance appearance = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.appearance_)}},
    // string session_id = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.session_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.CharacterClass class = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.class__), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mmorpg.CharacterRace race = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.race_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mmorpg.Gender gender = 4;
    {PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.gender_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mmorpg.CharacterAppearance appearance = 5;
    {PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.appearance_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string session_id = 6;
    {PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.session_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::CharacterAppearance>()},
  }}, {{
    "\35\4\0\0\0\0\12\0"
    "mmorpg.CharacterCreateRequest"
    "name"
    "session_id"
  }},
};

::uint8_t* CharacterCreateRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterCreateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterCreateRequest.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .mmorpg.CharacterClass class = 2;
  if (this->_internal_class_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_class_(), target);
  }

  // .mmorpg.CharacterRace race = 3;
  if (this->_internal_race() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_race(), target);
  }

  // .mmorpg.Gender gender = 4;
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_gender(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.CharacterAppearance appearance = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::appearance(this),
        _Internal::appearance(this).GetCachedSize(), target, stream);
  }

  // string session_id = 6;
  if (!this->_internal_session_id().empty()) {
    const std::string& _s = this->_internal_session_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterCreateRequest.session_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterCreateRequest)
  return target;
}

::size_t CharacterCreateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterCreateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string session_id = 6;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_session_id());
  }

  // .mmorpg.CharacterAppearance appearance = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.appearance_);
  }

  // .mmorpg.CharacterClass class = 2;
  if (this->_internal_class_() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_class_());
  }

  // .mmorpg.CharacterRace race = 3;
  if (this->_internal_race() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_race());
  }

  // .mmorpg.Gender gender = 4;
  if (this->_internal_gender() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_gender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterCreateRequest::_class_data_ = {
    CharacterCreateRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterCreateRequest::GetClassData() const {
  return &_class_data_;
}

void CharacterCreateRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterCreateRequest*>(&to_msg);
  auto& from = static_cast<const CharacterCreateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterCreateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_appearance()->::mmorpg::CharacterAppearance::MergeFrom(
        from._internal_appearance());
  }
  if (from._internal_class_() != 0) {
    _this->_internal_set_class_(from._internal_class_());
  }
  if (from._internal_race() != 0) {
    _this->_internal_set_race(from._internal_race());
  }
  if (from._internal_gender() != 0) {
    _this->_internal_set_gender(from._internal_gender());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterCreateRequest::CopyFrom(const CharacterCreateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterCreateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterCreateRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterCreateRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterCreateRequest::InternalSwap(CharacterCreateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, &other->_impl_.session_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.gender_)
      + sizeof(CharacterCreateRequest::_impl_.gender_)
      - PROTOBUF_FIELD_OFFSET(CharacterCreateRequest, _impl_.appearance_)>(
          reinterpret_cast<char*>(&_impl_.appearance_),
          reinterpret_cast<char*>(&other->_impl_.appearance_));
}

::google::protobuf::Metadata CharacterCreateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[2]);
}
// ===================================================================

CharacterCreateResponse_ValidationErrorsEntry_DoNotUse::CharacterCreateResponse_ValidationErrorsEntry_DoNotUse() {}
CharacterCreateResponse_ValidationErrorsEntry_DoNotUse::CharacterCreateResponse_ValidationErrorsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata CharacterCreateResponse_ValidationErrorsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[3]);
}
// ===================================================================

class CharacterCreateResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterCreateResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_._has_bits_);
  static const ::mmorpg::CharacterInfo& character(const CharacterCreateResponse* msg);
  static void set_has_character(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mmorpg::CharacterInfo& CharacterCreateResponse::_Internal::character(const CharacterCreateResponse* msg) {
  return *msg->_impl_.character_;
}
CharacterCreateResponse::CharacterCreateResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterCreateResponse)
}
inline PROTOBUF_NDEBUG_INLINE CharacterCreateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        validation_errors_{visibility, arena, from.validation_errors_},
        error_message_(arena, from.error_message_) {}

CharacterCreateResponse::CharacterCreateResponse(
    ::google::protobuf::Arena* arena,
    const CharacterCreateResponse& from)
    : ::google::protobuf::Message(arena) {
  CharacterCreateResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.character_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::CharacterInfo>(arena, *from._impl_.character_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.CharacterCreateResponse)
}
inline PROTOBUF_NDEBUG_INLINE CharacterCreateResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        validation_errors_{visibility, arena},
        error_message_(arena) {}

inline void CharacterCreateResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, character_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, character_) +
               sizeof(Impl_::error_code_));
}
CharacterCreateResponse::~CharacterCreateResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterCreateResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterCreateResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.error_message_.Destroy();
  delete _impl_.character_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterCreateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterCreateResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.validation_errors_.Clear();
  _impl_.error_message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.character_ != nullptr);
    _impl_.character_->Clear();
  }
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterCreateResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 2, 69, 2> CharacterCreateResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_._has_bits_),
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CharacterCreateResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mmorpg.ErrorCode error_code = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterCreateResponse, _impl_.error_code_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_.error_code_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CharacterCreateResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_.success_)}},
    // .mmorpg.CharacterInfo character = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_.character_)}},
    // string error_message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_.error_message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_.success_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .mmorpg.CharacterInfo character = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_.character_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string error_message = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_.error_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 4;
    {PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_.error_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // map<string, string> validation_errors = 5;
    {PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_.validation_errors_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::CharacterInfo>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(CharacterCreateResponse()._impl_.validation_errors_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\36\0\0\15\0\21\0\0"
    "mmorpg.CharacterCreateResponse"
    "error_message"
    "validation_errors"
  }},
};

::uint8_t* CharacterCreateResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterCreateResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.CharacterInfo character = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::character(this),
        _Internal::character(this).GetCachedSize(), target, stream);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterCreateResponse.error_message");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 4;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_error_code(), target);
  }

  // map<string, string> validation_errors = 5;
  if (!_internal_validation_errors().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_validation_errors();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            5, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterCreateResponse.validation_errors");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterCreateResponse.validation_errors");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            5, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterCreateResponse.validation_errors");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterCreateResponse.validation_errors");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterCreateResponse)
  return target;
}

::size_t CharacterCreateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterCreateResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> validation_errors = 5;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_validation_errors_size());
  for (const auto& entry : _internal_validation_errors()) {
    total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // .mmorpg.CharacterInfo character = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.character_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // .mmorpg.ErrorCode error_code = 4;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterCreateResponse::_class_data_ = {
    CharacterCreateResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterCreateResponse::GetClassData() const {
  return &_class_data_;
}

void CharacterCreateResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterCreateResponse*>(&to_msg);
  auto& from = static_cast<const CharacterCreateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterCreateResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.validation_errors_.MergeFrom(from._impl_.validation_errors_);
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_character()->::mmorpg::CharacterInfo::MergeFrom(
        from._internal_character());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterCreateResponse::CopyFrom(const CharacterCreateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterCreateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterCreateResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterCreateResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterCreateResponse::InternalSwap(CharacterCreateResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.validation_errors_.InternalSwap(&other->_impl_.validation_errors_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_.error_code_)
      + sizeof(CharacterCreateResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(CharacterCreateResponse, _impl_.character_)>(
          reinterpret_cast<char*>(&_impl_.character_),
          reinterpret_cast<char*>(&other->_impl_.character_));
}

::google::protobuf::Metadata CharacterCreateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[4]);
}
// ===================================================================

class CharacterDeleteRequest::_Internal {
 public:
};

CharacterDeleteRequest::CharacterDeleteRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterDeleteRequest)
}
inline PROTOBUF_NDEBUG_INLINE CharacterDeleteRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : character_id_(arena, from.character_id_),
        session_id_(arena, from.session_id_),
        confirmation_code_(arena, from.confirmation_code_),
        _cached_size_{0} {}

CharacterDeleteRequest::CharacterDeleteRequest(
    ::google::protobuf::Arena* arena,
    const CharacterDeleteRequest& from)
    : ::google::protobuf::Message(arena) {
  CharacterDeleteRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:mmorpg.CharacterDeleteRequest)
}
inline PROTOBUF_NDEBUG_INLINE CharacterDeleteRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : character_id_(arena),
        session_id_(arena),
        confirmation_code_(arena),
        _cached_size_{0} {}

inline void CharacterDeleteRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CharacterDeleteRequest::~CharacterDeleteRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterDeleteRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterDeleteRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.character_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.confirmation_code_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterDeleteRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.character_id_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.confirmation_code_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterDeleteRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 77, 2> CharacterDeleteRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CharacterDeleteRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string character_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterDeleteRequest, _impl_.character_id_)}},
    // string session_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterDeleteRequest, _impl_.session_id_)}},
    // string confirmation_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterDeleteRequest, _impl_.confirmation_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string character_id = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterDeleteRequest, _impl_.character_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterDeleteRequest, _impl_.session_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string confirmation_code = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterDeleteRequest, _impl_.confirmation_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\35\14\12\21\0\0\0\0"
    "mmorpg.CharacterDeleteRequest"
    "character_id"
    "session_id"
    "confirmation_code"
  }},
};

::uint8_t* CharacterDeleteRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterDeleteRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    const std::string& _s = this->_internal_character_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterDeleteRequest.character_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    const std::string& _s = this->_internal_session_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterDeleteRequest.session_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string confirmation_code = 3;
  if (!this->_internal_confirmation_code().empty()) {
    const std::string& _s = this->_internal_confirmation_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterDeleteRequest.confirmation_code");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterDeleteRequest)
  return target;
}

::size_t CharacterDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterDeleteRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_character_id());
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_session_id());
  }

  // string confirmation_code = 3;
  if (!this->_internal_confirmation_code().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_confirmation_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterDeleteRequest::_class_data_ = {
    CharacterDeleteRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterDeleteRequest::GetClassData() const {
  return &_class_data_;
}

void CharacterDeleteRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterDeleteRequest*>(&to_msg);
  auto& from = static_cast<const CharacterDeleteRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterDeleteRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_character_id().empty()) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_confirmation_code().empty()) {
    _this->_internal_set_confirmation_code(from._internal_confirmation_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterDeleteRequest::CopyFrom(const CharacterDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterDeleteRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterDeleteRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterDeleteRequest::InternalSwap(CharacterDeleteRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_id_, &other->_impl_.character_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, &other->_impl_.session_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.confirmation_code_, &other->_impl_.confirmation_code_, arena);
}

::google::protobuf::Metadata CharacterDeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[5]);
}
// ===================================================================

class CharacterDeleteResponse::_Internal {
 public:
};

CharacterDeleteResponse::CharacterDeleteResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterDeleteResponse)
}
inline PROTOBUF_NDEBUG_INLINE CharacterDeleteResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_(arena, from.message_),
        _cached_size_{0} {}

CharacterDeleteResponse::CharacterDeleteResponse(
    ::google::protobuf::Arena* arena,
    const CharacterDeleteResponse& from)
    : ::google::protobuf::Message(arena) {
  CharacterDeleteResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.CharacterDeleteResponse)
}
inline PROTOBUF_NDEBUG_INLINE CharacterDeleteResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void CharacterDeleteResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));
}
CharacterDeleteResponse::~CharacterDeleteResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterDeleteResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterDeleteResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterDeleteResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterDeleteResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 46, 2> CharacterDeleteResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CharacterDeleteResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CharacterDeleteResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterDeleteResponse, _impl_.success_)}},
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterDeleteResponse, _impl_.message_)}},
    // .mmorpg.ErrorCode error_code = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterDeleteResponse, _impl_.error_code_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterDeleteResponse, _impl_.error_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterDeleteResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterDeleteResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterDeleteResponse, _impl_.error_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\36\0\7\0\0\0\0\0"
    "mmorpg.CharacterDeleteResponse"
    "message"
  }},
};

::uint8_t* CharacterDeleteResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterDeleteResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterDeleteResponse.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 3;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterDeleteResponse)
  return target;
}

::size_t CharacterDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterDeleteResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // .mmorpg.ErrorCode error_code = 3;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterDeleteResponse::_class_data_ = {
    CharacterDeleteResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterDeleteResponse::GetClassData() const {
  return &_class_data_;
}

void CharacterDeleteResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterDeleteResponse*>(&to_msg);
  auto& from = static_cast<const CharacterDeleteResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterDeleteResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterDeleteResponse::CopyFrom(const CharacterDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterDeleteResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterDeleteResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterDeleteResponse::InternalSwap(CharacterDeleteResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterDeleteResponse, _impl_.error_code_)
      + sizeof(CharacterDeleteResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(CharacterDeleteResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::google::protobuf::Metadata CharacterDeleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[6]);
}
// ===================================================================

class CharacterSelectRequest::_Internal {
 public:
};

CharacterSelectRequest::CharacterSelectRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterSelectRequest)
}
inline PROTOBUF_NDEBUG_INLINE CharacterSelectRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : character_id_(arena, from.character_id_),
        session_id_(arena, from.session_id_),
        _cached_size_{0} {}

CharacterSelectRequest::CharacterSelectRequest(
    ::google::protobuf::Arena* arena,
    const CharacterSelectRequest& from)
    : ::google::protobuf::Message(arena) {
  CharacterSelectRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:mmorpg.CharacterSelectRequest)
}
inline PROTOBUF_NDEBUG_INLINE CharacterSelectRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : character_id_(arena),
        session_id_(arena),
        _cached_size_{0} {}

inline void CharacterSelectRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CharacterSelectRequest::~CharacterSelectRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterSelectRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterSelectRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.character_id_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterSelectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterSelectRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.character_id_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterSelectRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 60, 2> CharacterSelectRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CharacterSelectRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string session_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterSelectRequest, _impl_.session_id_)}},
    // string character_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterSelectRequest, _impl_.character_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string character_id = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterSelectRequest, _impl_.character_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterSelectRequest, _impl_.session_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\35\14\12\0\0\0\0\0"
    "mmorpg.CharacterSelectRequest"
    "character_id"
    "session_id"
  }},
};

::uint8_t* CharacterSelectRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterSelectRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    const std::string& _s = this->_internal_character_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterSelectRequest.character_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    const std::string& _s = this->_internal_session_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterSelectRequest.session_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterSelectRequest)
  return target;
}

::size_t CharacterSelectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterSelectRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_character_id());
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterSelectRequest::_class_data_ = {
    CharacterSelectRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterSelectRequest::GetClassData() const {
  return &_class_data_;
}

void CharacterSelectRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterSelectRequest*>(&to_msg);
  auto& from = static_cast<const CharacterSelectRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterSelectRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_character_id().empty()) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterSelectRequest::CopyFrom(const CharacterSelectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterSelectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterSelectRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterSelectRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterSelectRequest::InternalSwap(CharacterSelectRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_id_, &other->_impl_.character_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, &other->_impl_.session_id_, arena);
}

::google::protobuf::Metadata CharacterSelectRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[7]);
}
// ===================================================================

class CharacterSelectResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterSelectResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_._has_bits_);
  static const ::mmorpg::CharacterData& character_data(const CharacterSelectResponse* msg);
  static void set_has_character_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mmorpg::CharacterData& CharacterSelectResponse::_Internal::character_data(const CharacterSelectResponse* msg) {
  return *msg->_impl_.character_data_;
}
CharacterSelectResponse::CharacterSelectResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterSelectResponse)
}
inline PROTOBUF_NDEBUG_INLINE CharacterSelectResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        world_server_url_(arena, from.world_server_url_),
        world_token_(arena, from.world_token_),
        error_message_(arena, from.error_message_) {}

CharacterSelectResponse::CharacterSelectResponse(
    ::google::protobuf::Arena* arena,
    const CharacterSelectResponse& from)
    : ::google::protobuf::Message(arena) {
  CharacterSelectResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.character_data_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::CharacterData>(arena, *from._impl_.character_data_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.CharacterSelectResponse)
}
inline PROTOBUF_NDEBUG_INLINE CharacterSelectResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        world_server_url_(arena),
        world_token_(arena),
        error_message_(arena) {}

inline void CharacterSelectResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, character_data_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, character_data_) +
               sizeof(Impl_::error_code_));
}
CharacterSelectResponse::~CharacterSelectResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterSelectResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterSelectResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.world_server_url_.Destroy();
  _impl_.world_token_.Destroy();
  _impl_.error_message_.Destroy();
  delete _impl_.character_data_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterSelectResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterSelectResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.world_server_url_.ClearToEmpty();
  _impl_.world_token_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.character_data_ != nullptr);
    _impl_.character_data_->Clear();
  }
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterSelectResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 79, 2> CharacterSelectResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CharacterSelectResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CharacterSelectResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.success_)}},
    // .mmorpg.CharacterData character_data = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.character_data_)}},
    // string world_server_url = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.world_server_url_)}},
    // string world_token = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.world_token_)}},
    // string error_message = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.error_message_)}},
    // .mmorpg.ErrorCode error_code = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterSelectResponse, _impl_.error_code_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.error_code_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.success_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .mmorpg.CharacterData character_data = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.character_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string world_server_url = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.world_server_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string world_token = 4;
    {PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.world_token_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string error_message = 5;
    {PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.error_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 6;
    {PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.error_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::CharacterData>()},
  }}, {{
    "\36\0\0\20\13\15\0\0"
    "mmorpg.CharacterSelectResponse"
    "world_server_url"
    "world_token"
    "error_message"
  }},
};

::uint8_t* CharacterSelectResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterSelectResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.CharacterData character_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::character_data(this),
        _Internal::character_data(this).GetCachedSize(), target, stream);
  }

  // string world_server_url = 3;
  if (!this->_internal_world_server_url().empty()) {
    const std::string& _s = this->_internal_world_server_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterSelectResponse.world_server_url");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string world_token = 4;
  if (!this->_internal_world_token().empty()) {
    const std::string& _s = this->_internal_world_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterSelectResponse.world_token");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterSelectResponse.error_message");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 6;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterSelectResponse)
  return target;
}

::size_t CharacterSelectResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterSelectResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string world_server_url = 3;
  if (!this->_internal_world_server_url().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_world_server_url());
  }

  // string world_token = 4;
  if (!this->_internal_world_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_world_token());
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // .mmorpg.CharacterData character_data = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.character_data_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // .mmorpg.ErrorCode error_code = 6;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterSelectResponse::_class_data_ = {
    CharacterSelectResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterSelectResponse::GetClassData() const {
  return &_class_data_;
}

void CharacterSelectResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterSelectResponse*>(&to_msg);
  auto& from = static_cast<const CharacterSelectResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterSelectResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_world_server_url().empty()) {
    _this->_internal_set_world_server_url(from._internal_world_server_url());
  }
  if (!from._internal_world_token().empty()) {
    _this->_internal_set_world_token(from._internal_world_token());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_character_data()->::mmorpg::CharacterData::MergeFrom(
        from._internal_character_data());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterSelectResponse::CopyFrom(const CharacterSelectResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterSelectResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterSelectResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterSelectResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterSelectResponse::InternalSwap(CharacterSelectResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.world_server_url_, &other->_impl_.world_server_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.world_token_, &other->_impl_.world_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.error_code_)
      + sizeof(CharacterSelectResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(CharacterSelectResponse, _impl_.character_data_)>(
          reinterpret_cast<char*>(&_impl_.character_data_),
          reinterpret_cast<char*>(&other->_impl_.character_data_));
}

::google::protobuf::Metadata CharacterSelectResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[8]);
}
// ===================================================================

class CharacterInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& created_at(const CharacterInfo* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& last_played(const CharacterInfo* msg);
  static void set_has_last_played(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mmorpg::CharacterAppearance& appearance(const CharacterInfo* msg);
  static void set_has_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::google::protobuf::Timestamp& CharacterInfo::_Internal::created_at(const CharacterInfo* msg) {
  return *msg->_impl_.created_at_;
}
const ::google::protobuf::Timestamp& CharacterInfo::_Internal::last_played(const CharacterInfo* msg) {
  return *msg->_impl_.last_played_;
}
const ::mmorpg::CharacterAppearance& CharacterInfo::_Internal::appearance(const CharacterInfo* msg) {
  return *msg->_impl_.appearance_;
}
void CharacterInfo::clear_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CharacterInfo::clear_last_played() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_played_ != nullptr) _impl_.last_played_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CharacterInfo::CharacterInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterInfo)
}
inline PROTOBUF_NDEBUG_INLINE CharacterInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        equipment_preview_{visibility, arena, from.equipment_preview_},
        character_id_(arena, from.character_id_),
        name_(arena, from.name_),
        location_(arena, from.location_) {}

CharacterInfo::CharacterInfo(
    ::google::protobuf::Arena* arena,
    const CharacterInfo& from)
    : ::google::protobuf::Message(arena) {
  CharacterInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.created_at_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_)
                : nullptr;
  _impl_.last_played_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_played_)
                : nullptr;
  _impl_.appearance_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::mmorpg::CharacterAppearance>(arena, *from._impl_.appearance_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, class__),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, class__),
           offsetof(Impl_, playtime_seconds_) -
               offsetof(Impl_, class__) +
               sizeof(Impl_::playtime_seconds_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.CharacterInfo)
}
inline PROTOBUF_NDEBUG_INLINE CharacterInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        equipment_preview_{visibility, arena},
        character_id_(arena),
        name_(arena),
        location_(arena) {}

inline void CharacterInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_at_),
           0,
           offsetof(Impl_, playtime_seconds_) -
               offsetof(Impl_, created_at_) +
               sizeof(Impl_::playtime_seconds_));
}
CharacterInfo::~CharacterInfo() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.character_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.location_.Destroy();
  delete _impl_.created_at_;
  delete _impl_.last_played_;
  delete _impl_.appearance_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equipment_preview_.Clear();
  _impl_.character_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.last_played_ != nullptr);
      _impl_.last_played_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.appearance_ != nullptr);
      _impl_.appearance_->Clear();
    }
  }
  ::memset(&_impl_.class__, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.playtime_seconds_) -
      reinterpret_cast<char*>(&_impl_.class__)) + sizeof(_impl_.playtime_seconds_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 4, 61, 2> CharacterInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CharacterInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string character_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.character_id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.name_)}},
    // .mmorpg.CharacterClass class = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterInfo, _impl_.class__), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.class__)}},
    // .mmorpg.CharacterRace race = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterInfo, _impl_.race_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.race_)}},
    // .mmorpg.Gender gender = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterInfo, _impl_.gender_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.gender_)}},
    // int32 level = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterInfo, _impl_.level_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.level_)}},
    // string location = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.location_)}},
    // .google.protobuf.Timestamp created_at = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.created_at_)}},
    // .google.protobuf.Timestamp last_played = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 1, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.last_played_)}},
    // int64 playtime_seconds = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CharacterInfo, _impl_.playtime_seconds_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.playtime_seconds_)}},
    // .mmorpg.CharacterAppearance appearance = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 2, 2, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.appearance_)}},
    // repeated .mmorpg.EquipmentPreview equipment_preview = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 3, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.equipment_preview_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string character_id = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.character_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.CharacterClass class = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.class__), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mmorpg.CharacterRace race = 4;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.race_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mmorpg.Gender gender = 5;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.gender_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 level = 6;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string location = 7;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.location_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp created_at = 8;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.created_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_played = 9;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.last_played_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 playtime_seconds = 10;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.playtime_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .mmorpg.CharacterAppearance appearance = 11;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.appearance_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .mmorpg.EquipmentPreview equipment_preview = 12;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.equipment_preview_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::mmorpg::CharacterAppearance>()},
    {::_pbi::TcParser::GetTable<::mmorpg::EquipmentPreview>()},
  }}, {{
    "\24\14\4\0\0\0\0\10\0\0\0\0\0\0\0\0"
    "mmorpg.CharacterInfo"
    "character_id"
    "name"
    "location"
  }},
};

::uint8_t* CharacterInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    const std::string& _s = this->_internal_character_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterInfo.character_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterInfo.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .mmorpg.CharacterClass class = 3;
  if (this->_internal_class_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_class_(), target);
  }

  // .mmorpg.CharacterRace race = 4;
  if (this->_internal_race() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_race(), target);
  }

  // .mmorpg.Gender gender = 5;
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_gender(), target);
  }

  // int32 level = 6;
  if (this->_internal_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_level(), target);
  }

  // string location = 7;
  if (!this->_internal_location().empty()) {
    const std::string& _s = this->_internal_location();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterInfo.location");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp created_at = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_played = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, _Internal::last_played(this),
        _Internal::last_played(this).GetCachedSize(), target, stream);
  }

  // int64 playtime_seconds = 10;
  if (this->_internal_playtime_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<10>(
            stream, this->_internal_playtime_seconds(), target);
  }

  // .mmorpg.CharacterAppearance appearance = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::appearance(this),
        _Internal::appearance(this).GetCachedSize(), target, stream);
  }

  // repeated .mmorpg.EquipmentPreview equipment_preview = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_equipment_preview_size()); i < n; i++) {
    const auto& repfield = this->_internal_equipment_preview().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterInfo)
  return target;
}

::size_t CharacterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mmorpg.EquipmentPreview equipment_preview = 12;
  total_size += 1UL * this->_internal_equipment_preview_size();
  for (const auto& msg : this->_internal_equipment_preview()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_character_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string location = 7;
  if (!this->_internal_location().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_location());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Timestamp created_at = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.created_at_);
    }

    // .google.protobuf.Timestamp last_played = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_played_);
    }

    // .mmorpg.CharacterAppearance appearance = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.appearance_);
    }

  }
  // .mmorpg.CharacterClass class = 3;
  if (this->_internal_class_() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_class_());
  }

  // .mmorpg.CharacterRace race = 4;
  if (this->_internal_race() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_race());
  }

  // .mmorpg.Gender gender = 5;
  if (this->_internal_gender() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // int32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  // int64 playtime_seconds = 10;
  if (this->_internal_playtime_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_playtime_seconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterInfo::_class_data_ = {
    CharacterInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterInfo::GetClassData() const {
  return &_class_data_;
}

void CharacterInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterInfo*>(&to_msg);
  auto& from = static_cast<const CharacterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_equipment_preview()->MergeFrom(
      from._internal_equipment_preview());
  if (!from._internal_character_id().empty()) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_created_at());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_last_played()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_last_played());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_appearance()->::mmorpg::CharacterAppearance::MergeFrom(
          from._internal_appearance());
    }
  }
  if (from._internal_class_() != 0) {
    _this->_internal_set_class_(from._internal_class_());
  }
  if (from._internal_race() != 0) {
    _this->_internal_set_race(from._internal_race());
  }
  if (from._internal_gender() != 0) {
    _this->_internal_set_gender(from._internal_gender());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_playtime_seconds() != 0) {
    _this->_internal_set_playtime_seconds(from._internal_playtime_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterInfo::CopyFrom(const CharacterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterInfo::InternalSwap(CharacterInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.equipment_preview_.InternalSwap(&other->_impl_.equipment_preview_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_id_, &other->_impl_.character_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.location_, &other->_impl_.location_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.playtime_seconds_)
      + sizeof(CharacterInfo::_impl_.playtime_seconds_)
      - PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::google::protobuf::Metadata CharacterInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[9]);
}
// ===================================================================

CharacterData_EquippedItemsEntry_DoNotUse::CharacterData_EquippedItemsEntry_DoNotUse() {}
CharacterData_EquippedItemsEntry_DoNotUse::CharacterData_EquippedItemsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata CharacterData_EquippedItemsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[10]);
}
// ===================================================================

CharacterData_CurrenciesEntry_DoNotUse::CharacterData_CurrenciesEntry_DoNotUse() {}
CharacterData_CurrenciesEntry_DoNotUse::CharacterData_CurrenciesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata CharacterData_CurrenciesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[11]);
}
// ===================================================================

class CharacterData::_Internal {
 public:
  using HasBits = decltype(std::declval<CharacterData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CharacterData, _impl_._has_bits_);
  static const ::mmorpg::CharacterStats& stats(const CharacterData* msg);
  static void set_has_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mmorpg::CharacterAttributes& attributes(const CharacterData* msg);
  static void set_has_attributes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mmorpg::Transform& last_transform(const CharacterData* msg);
  static void set_has_last_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mmorpg::CharacterAppearance& appearance(const CharacterData* msg);
  static void set_has_appearance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::google::protobuf::Timestamp& created_at(const CharacterData* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::google::protobuf::Timestamp& last_played(const CharacterData* msg);
  static void set_has_last_played(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::mmorpg::CharacterStats& CharacterData::_Internal::stats(const CharacterData* msg) {
  return *msg->_impl_.stats_;
}
const ::mmorpg::CharacterAttributes& CharacterData::_Internal::attributes(const CharacterData* msg) {
  return *msg->_impl_.attributes_;
}
const ::mmorpg::Transform& CharacterData::_Internal::last_transform(const CharacterData* msg) {
  return *msg->_impl_.last_transform_;
}
const ::mmorpg::CharacterAppearance& CharacterData::_Internal::appearance(const CharacterData* msg) {
  return *msg->_impl_.appearance_;
}
const ::google::protobuf::Timestamp& CharacterData::_Internal::created_at(const CharacterData* msg) {
  return *msg->_impl_.created_at_;
}
const ::google::protobuf::Timestamp& CharacterData::_Internal::last_played(const CharacterData* msg) {
  return *msg->_impl_.last_played_;
}
void CharacterData::clear_last_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_transform_ != nullptr) _impl_.last_transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CharacterData::clear_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CharacterData::clear_last_played() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_played_ != nullptr) _impl_.last_played_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CharacterData::CharacterData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterData)
}
inline PROTOBUF_NDEBUG_INLINE CharacterData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        equipped_items_{visibility, arena, from.equipped_items_},
        currencies_{visibility, arena, from.currencies_},
        character_id_(arena, from.character_id_),
        name_(arena, from.name_),
        last_zone_id_(arena, from.last_zone_id_) {}

CharacterData::CharacterData(
    ::google::protobuf::Arena* arena,
    const CharacterData& from)
    : ::google::protobuf::Message(arena) {
  CharacterData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.stats_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::CharacterStats>(arena, *from._impl_.stats_)
                : nullptr;
  _impl_.attributes_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::mmorpg::CharacterAttributes>(arena, *from._impl_.attributes_)
                : nullptr;
  _impl_.last_transform_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.last_transform_)
                : nullptr;
  _impl_.appearance_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::mmorpg::CharacterAppearance>(arena, *from._impl_.appearance_)
                : nullptr;
  _impl_.created_at_ = (cached_has_bits & 0x00000010u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_)
                : nullptr;
  _impl_.last_played_ = (cached_has_bits & 0x00000020u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_played_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, class__),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, class__),
           offsetof(Impl_, playtime_seconds_) -
               offsetof(Impl_, class__) +
               sizeof(Impl_::playtime_seconds_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.CharacterData)
}
inline PROTOBUF_NDEBUG_INLINE CharacterData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        equipped_items_{visibility, arena},
        currencies_{visibility, arena},
        character_id_(arena),
        name_(arena),
        last_zone_id_(arena) {}

inline void CharacterData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stats_),
           0,
           offsetof(Impl_, playtime_seconds_) -
               offsetof(Impl_, stats_) +
               sizeof(Impl_::playtime_seconds_));
}
CharacterData::~CharacterData() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.character_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.last_zone_id_.Destroy();
  delete _impl_.stats_;
  delete _impl_.attributes_;
  delete _impl_.last_transform_;
  delete _impl_.appearance_;
  delete _impl_.created_at_;
  delete _impl_.last_played_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterData::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equipped_items_.Clear();
  _impl_.currencies_.Clear();
  _impl_.character_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.last_zone_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.stats_ != nullptr);
      _impl_.stats_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.attributes_ != nullptr);
      _impl_.attributes_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.last_transform_ != nullptr);
      _impl_.last_transform_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.appearance_ != nullptr);
      _impl_.appearance_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.last_played_ != nullptr);
      _impl_.last_played_->Clear();
    }
  }
  ::memset(&_impl_.class__, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.playtime_seconds_) -
      reinterpret_cast<char*>(&_impl_.class__)) + sizeof(_impl_.playtime_seconds_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 18, 8, 97, 2> CharacterData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CharacterData, _impl_._has_bits_),
    0, // no _extensions_
    18, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CharacterData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string character_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.character_id_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.name_)}},
    // .mmorpg.CharacterClass class = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterData, _impl_.class__), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.class__)}},
    // .mmorpg.CharacterRace race = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterData, _impl_.race_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.race_)}},
    // .mmorpg.Gender gender = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterData, _impl_.gender_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.gender_)}},
    // .mmorpg.CharacterStats stats = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.stats_)}},
    // .mmorpg.CharacterAttributes attributes = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.attributes_)}},
    // int32 level = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterData, _impl_.level_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.level_)}},
    // int64 experience = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CharacterData, _impl_.experience_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.experience_)}},
    // int64 experience_to_next_level = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CharacterData, _impl_.experience_to_next_level_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.experience_to_next_level_)}},
    // .mmorpg.Transform last_transform = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 2, 2, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.last_transform_)}},
    // string last_zone_id = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.last_zone_id_)}},
    // .mmorpg.CharacterAppearance appearance = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 3, 3, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.appearance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp created_at = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 4, 6, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.created_at_)}},
    // .google.protobuf.Timestamp last_played = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 5, 7, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.last_played_)}},
    // int64 playtime_seconds = 18;
    {::_pbi::TcParser::FastV64S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.playtime_seconds_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string character_id = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.character_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.CharacterClass class = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.class__), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mmorpg.CharacterRace race = 4;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.race_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mmorpg.Gender gender = 5;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.gender_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mmorpg.CharacterStats stats = 6;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.stats_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.CharacterAttributes attributes = 7;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.attributes_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 level = 8;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 experience = 9;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.experience_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 experience_to_next_level = 10;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.experience_to_next_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .mmorpg.Transform last_transform = 11;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.last_transform_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string last_zone_id = 12;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.last_zone_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.CharacterAppearance appearance = 13;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.appearance_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // map<string, string> equipped_items = 14;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.equipped_items_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // map<string, int64> currencies = 15;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.currencies_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // .google.protobuf.Timestamp created_at = 16;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.created_at_), _Internal::kHasBitsOffset + 4, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_played = 17;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.last_played_), _Internal::kHasBitsOffset + 5, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 playtime_seconds = 18;
    {PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.playtime_seconds_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::CharacterStats>()},
    {::_pbi::TcParser::GetTable<::mmorpg::CharacterAttributes>()},
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
    {::_pbi::TcParser::GetTable<::mmorpg::CharacterAppearance>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(CharacterData()._impl_.equipped_items_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(CharacterData()._impl_.currencies_)>(
        1, 0, 0, 9,
        3)},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\24\14\4\0\0\0\0\0\0\0\0\0\14\0\16\12\0\0\0\0\0\0\0\0"
    "mmorpg.CharacterData"
    "character_id"
    "name"
    "last_zone_id"
    "equipped_items"
    "currencies"
  }},
};

::uint8_t* CharacterData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    const std::string& _s = this->_internal_character_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterData.character_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterData.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .mmorpg.CharacterClass class = 3;
  if (this->_internal_class_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_class_(), target);
  }

  // .mmorpg.CharacterRace race = 4;
  if (this->_internal_race() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_race(), target);
  }

  // .mmorpg.Gender gender = 5;
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_gender(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.CharacterStats stats = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  // .mmorpg.CharacterAttributes attributes = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // int32 level = 8;
  if (this->_internal_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_level(), target);
  }

  // int64 experience = 9;
  if (this->_internal_experience() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<9>(
            stream, this->_internal_experience(), target);
  }

  // int64 experience_to_next_level = 10;
  if (this->_internal_experience_to_next_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<10>(
            stream, this->_internal_experience_to_next_level(), target);
  }

  // .mmorpg.Transform last_transform = 11;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, _Internal::last_transform(this),
        _Internal::last_transform(this).GetCachedSize(), target, stream);
  }

  // string last_zone_id = 12;
  if (!this->_internal_last_zone_id().empty()) {
    const std::string& _s = this->_internal_last_zone_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterData.last_zone_id");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // .mmorpg.CharacterAppearance appearance = 13;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, _Internal::appearance(this),
        _Internal::appearance(this).GetCachedSize(), target, stream);
  }

  // map<string, string> equipped_items = 14;
  if (!_internal_equipped_items().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_equipped_items();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            14, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterData.equipped_items");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterData.equipped_items");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            14, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterData.equipped_items");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterData.equipped_items");
      }
    }
  }

  // map<string, int64> currencies = 15;
  if (!_internal_currencies().empty()) {
    using MapType = ::google::protobuf::Map<std::string, ::int64_t>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, ::int64_t,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_INT64>;
    const auto& field = _internal_currencies();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            15, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterData.currencies");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            15, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterData.currencies");
      }
    }
  }

  // .google.protobuf.Timestamp created_at = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_played = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        17, _Internal::last_played(this),
        _Internal::last_played(this).GetCachedSize(), target, stream);
  }

  // int64 playtime_seconds = 18;
  if (this->_internal_playtime_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        18, this->_internal_playtime_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterData)
  return target;
}

::size_t CharacterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> equipped_items = 14;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_equipped_items_size());
  for (const auto& entry : _internal_equipped_items()) {
    total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // map<string, int64> currencies = 15;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_currencies_size());
  for (const auto& entry : _internal_currencies()) {
    total_size += _pbi::MapEntryFuncs<std::string, ::int64_t,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_INT64>::ByteSizeLong(entry.first, entry.second);
  }
  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_character_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string last_zone_id = 12;
  if (!this->_internal_last_zone_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_last_zone_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // .mmorpg.CharacterStats stats = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.stats_);
    }

    // .mmorpg.CharacterAttributes attributes = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.attributes_);
    }

    // .mmorpg.Transform last_transform = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_transform_);
    }

    // .mmorpg.CharacterAppearance appearance = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.appearance_);
    }

    // .google.protobuf.Timestamp created_at = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.created_at_);
    }

    // .google.protobuf.Timestamp last_played = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_played_);
    }

  }
  // .mmorpg.CharacterClass class = 3;
  if (this->_internal_class_() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_class_());
  }

  // .mmorpg.CharacterRace race = 4;
  if (this->_internal_race() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_race());
  }

  // .mmorpg.Gender gender = 5;
  if (this->_internal_gender() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_gender());
  }

  // int32 level = 8;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  // int64 experience = 9;
  if (this->_internal_experience() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_experience());
  }

  // int64 experience_to_next_level = 10;
  if (this->_internal_experience_to_next_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_experience_to_next_level());
  }

  // int64 playtime_seconds = 18;
  if (this->_internal_playtime_seconds() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_playtime_seconds());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterData::_class_data_ = {
    CharacterData::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterData::GetClassData() const {
  return &_class_data_;
}

void CharacterData::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterData*>(&to_msg);
  auto& from = static_cast<const CharacterData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.equipped_items_.MergeFrom(from._impl_.equipped_items_);
  _this->_impl_.currencies_.MergeFrom(from._impl_.currencies_);
  if (!from._internal_character_id().empty()) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_last_zone_id().empty()) {
    _this->_internal_set_last_zone_id(from._internal_last_zone_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stats()->::mmorpg::CharacterStats::MergeFrom(
          from._internal_stats());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_attributes()->::mmorpg::CharacterAttributes::MergeFrom(
          from._internal_attributes());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_last_transform()->::mmorpg::Transform::MergeFrom(
          from._internal_last_transform());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_appearance()->::mmorpg::CharacterAppearance::MergeFrom(
          from._internal_appearance());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_created_at());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_last_played()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_last_played());
    }
  }
  if (from._internal_class_() != 0) {
    _this->_internal_set_class_(from._internal_class_());
  }
  if (from._internal_race() != 0) {
    _this->_internal_set_race(from._internal_race());
  }
  if (from._internal_gender() != 0) {
    _this->_internal_set_gender(from._internal_gender());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_experience() != 0) {
    _this->_internal_set_experience(from._internal_experience());
  }
  if (from._internal_experience_to_next_level() != 0) {
    _this->_internal_set_experience_to_next_level(from._internal_experience_to_next_level());
  }
  if (from._internal_playtime_seconds() != 0) {
    _this->_internal_set_playtime_seconds(from._internal_playtime_seconds());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterData::CopyFrom(const CharacterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterData::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterData::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterData::InternalSwap(CharacterData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.equipped_items_.InternalSwap(&other->_impl_.equipped_items_);
  _impl_.currencies_.InternalSwap(&other->_impl_.currencies_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_id_, &other->_impl_.character_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.last_zone_id_, &other->_impl_.last_zone_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.playtime_seconds_)
      + sizeof(CharacterData::_impl_.playtime_seconds_)
      - PROTOBUF_FIELD_OFFSET(CharacterData, _impl_.stats_)>(
          reinterpret_cast<char*>(&_impl_.stats_),
          reinterpret_cast<char*>(&other->_impl_.stats_));
}

::google::protobuf::Metadata CharacterData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[12]);
}
// ===================================================================

CharacterAppearance_CustomOptionsEntry_DoNotUse::CharacterAppearance_CustomOptionsEntry_DoNotUse() {}
CharacterAppearance_CustomOptionsEntry_DoNotUse::CharacterAppearance_CustomOptionsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata CharacterAppearance_CustomOptionsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[13]);
}
// ===================================================================

class CharacterAppearance::_Internal {
 public:
};

CharacterAppearance::CharacterAppearance(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterAppearance)
}
inline PROTOBUF_NDEBUG_INLINE CharacterAppearance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : custom_options_{visibility, arena, from.custom_options_},
        _cached_size_{0} {}

CharacterAppearance::CharacterAppearance(
    ::google::protobuf::Arena* arena,
    const CharacterAppearance& from)
    : ::google::protobuf::Message(arena) {
  CharacterAppearance* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, face_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, face_type_),
           offsetof(Impl_, build_) -
               offsetof(Impl_, face_type_) +
               sizeof(Impl_::build_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.CharacterAppearance)
}
inline PROTOBUF_NDEBUG_INLINE CharacterAppearance::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : custom_options_{visibility, arena},
        _cached_size_{0} {}

inline void CharacterAppearance::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, face_type_),
           0,
           offsetof(Impl_, build_) -
               offsetof(Impl_, face_type_) +
               sizeof(Impl_::build_));
}
CharacterAppearance::~CharacterAppearance() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterAppearance)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterAppearance::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterAppearance::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterAppearance)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_options_.Clear();
  ::memset(&_impl_.face_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.build_) -
      reinterpret_cast<char*>(&_impl_.face_type_)) + sizeof(_impl_.build_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterAppearance::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 57, 2> CharacterAppearance::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CharacterAppearance_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 face_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAppearance, _impl_.face_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.face_type_)}},
    // int32 hair_style = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAppearance, _impl_.hair_style_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.hair_style_)}},
    // int32 hair_color = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAppearance, _impl_.hair_color_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.hair_color_)}},
    // int32 skin_color = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAppearance, _impl_.skin_color_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.skin_color_)}},
    // int32 eye_color = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAppearance, _impl_.eye_color_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.eye_color_)}},
    // float height = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.height_)}},
    // float build = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.build_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 face_type = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.face_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 hair_style = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.hair_style_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 hair_color = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.hair_color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 skin_color = 4;
    {PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.skin_color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 eye_color = 5;
    {PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.eye_color_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float height = 6;
    {PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.height_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float build = 7;
    {PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.build_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // map<string, int32> custom_options = 8;
    {PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.custom_options_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(CharacterAppearance()._impl_.custom_options_)>(
        1, 0, 0, 9,
        5)},
  }}, {{
    "\32\0\0\0\0\0\0\0\16\0\0\0\0\0\0\0"
    "mmorpg.CharacterAppearance"
    "custom_options"
  }},
};

::uint8_t* CharacterAppearance::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterAppearance)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 face_type = 1;
  if (this->_internal_face_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_face_type(), target);
  }

  // int32 hair_style = 2;
  if (this->_internal_hair_style() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_hair_style(), target);
  }

  // int32 hair_color = 3;
  if (this->_internal_hair_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_hair_color(), target);
  }

  // int32 skin_color = 4;
  if (this->_internal_skin_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_skin_color(), target);
  }

  // int32 eye_color = 5;
  if (this->_internal_eye_color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_eye_color(), target);
  }

  // float height = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_height(), target);
  }

  // float build = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_build = this->_internal_build();
  ::uint32_t raw_build;
  memcpy(&raw_build, &tmp_build, sizeof(tmp_build));
  if (raw_build != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_build(), target);
  }

  // map<string, int32> custom_options = 8;
  if (!_internal_custom_options().empty()) {
    using MapType = ::google::protobuf::Map<std::string, ::int32_t>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_INT32>;
    const auto& field = _internal_custom_options();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            8, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterAppearance.custom_options");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            8, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.CharacterAppearance.custom_options");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterAppearance)
  return target;
}

::size_t CharacterAppearance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterAppearance)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> custom_options = 8;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_custom_options_size());
  for (const auto& entry : _internal_custom_options()) {
    total_size += _pbi::MapEntryFuncs<std::string, ::int32_t,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_INT32>::ByteSizeLong(entry.first, entry.second);
  }
  // int32 face_type = 1;
  if (this->_internal_face_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_face_type());
  }

  // int32 hair_style = 2;
  if (this->_internal_hair_style() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_hair_style());
  }

  // int32 hair_color = 3;
  if (this->_internal_hair_color() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_hair_color());
  }

  // int32 skin_color = 4;
  if (this->_internal_skin_color() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_skin_color());
  }

  // int32 eye_color = 5;
  if (this->_internal_eye_color() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_eye_color());
  }

  // float height = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 5;
  }

  // float build = 7;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_build = this->_internal_build();
  ::uint32_t raw_build;
  memcpy(&raw_build, &tmp_build, sizeof(tmp_build));
  if (raw_build != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterAppearance::_class_data_ = {
    CharacterAppearance::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterAppearance::GetClassData() const {
  return &_class_data_;
}

void CharacterAppearance::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterAppearance*>(&to_msg);
  auto& from = static_cast<const CharacterAppearance&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterAppearance)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_options_.MergeFrom(from._impl_.custom_options_);
  if (from._internal_face_type() != 0) {
    _this->_internal_set_face_type(from._internal_face_type());
  }
  if (from._internal_hair_style() != 0) {
    _this->_internal_set_hair_style(from._internal_hair_style());
  }
  if (from._internal_hair_color() != 0) {
    _this->_internal_set_hair_color(from._internal_hair_color());
  }
  if (from._internal_skin_color() != 0) {
    _this->_internal_set_skin_color(from._internal_skin_color());
  }
  if (from._internal_eye_color() != 0) {
    _this->_internal_set_eye_color(from._internal_eye_color());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  ::uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_build = from._internal_build();
  ::uint32_t raw_build;
  memcpy(&raw_build, &tmp_build, sizeof(tmp_build));
  if (raw_build != 0) {
    _this->_internal_set_build(from._internal_build());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterAppearance::CopyFrom(const CharacterAppearance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterAppearance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterAppearance::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterAppearance::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterAppearance::InternalSwap(CharacterAppearance* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.custom_options_.InternalSwap(&other->_impl_.custom_options_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.build_)
      + sizeof(CharacterAppearance::_impl_.build_)
      - PROTOBUF_FIELD_OFFSET(CharacterAppearance, _impl_.face_type_)>(
          reinterpret_cast<char*>(&_impl_.face_type_),
          reinterpret_cast<char*>(&other->_impl_.face_type_));
}

::google::protobuf::Metadata CharacterAppearance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[14]);
}
// ===================================================================

class CharacterStats::_Internal {
 public:
};

CharacterStats::CharacterStats(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterStats)
}
CharacterStats::CharacterStats(
    ::google::protobuf::Arena* arena, const CharacterStats& from)
    : CharacterStats(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CharacterStats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CharacterStats::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, health_),
           0,
           offsetof(Impl_, cast_speed_) -
               offsetof(Impl_, health_) +
               sizeof(Impl_::cast_speed_));
}
CharacterStats::~CharacterStats() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterStats)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterStats::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterStats::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterStats)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.health_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cast_speed_) -
      reinterpret_cast<char*>(&_impl_.health_)) + sizeof(_impl_.cast_speed_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterStats::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 0, 0, 2> CharacterStats::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CharacterStats_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 health = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterStats, _impl_.health_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.health_)}},
    // int32 max_health = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterStats, _impl_.max_health_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.max_health_)}},
    // int32 mana = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterStats, _impl_.mana_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.mana_)}},
    // int32 max_mana = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterStats, _impl_.max_mana_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.max_mana_)}},
    // int32 stamina = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterStats, _impl_.stamina_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.stamina_)}},
    // int32 max_stamina = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterStats, _impl_.max_stamina_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.max_stamina_)}},
    // int32 attack_power = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterStats, _impl_.attack_power_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.attack_power_)}},
    // int32 spell_power = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterStats, _impl_.spell_power_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.spell_power_)}},
    // int32 defense = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterStats, _impl_.defense_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.defense_)}},
    // int32 magic_resistance = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterStats, _impl_.magic_resistance_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.magic_resistance_)}},
    // float critical_chance = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.critical_chance_)}},
    // float critical_damage = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.critical_damage_)}},
    // float dodge_chance = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.dodge_chance_)}},
    // float block_chance = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.block_chance_)}},
    // float movement_speed = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.movement_speed_)}},
    // float attack_speed = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.attack_speed_)}},
    // float cast_speed = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.cast_speed_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 health = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.health_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_health = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.max_health_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 mana = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.mana_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_mana = 4;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.max_mana_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 stamina = 5;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.stamina_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_stamina = 6;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.max_stamina_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 attack_power = 7;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.attack_power_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 spell_power = 8;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.spell_power_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 defense = 9;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.defense_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 magic_resistance = 10;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.magic_resistance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // float critical_chance = 11;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.critical_chance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float critical_damage = 12;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.critical_damage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float dodge_chance = 13;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.dodge_chance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float block_chance = 14;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.block_chance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float movement_speed = 15;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.movement_speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float attack_speed = 16;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.attack_speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float cast_speed = 17;
    {PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.cast_speed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CharacterStats::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterStats)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 health = 1;
  if (this->_internal_health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_health(), target);
  }

  // int32 max_health = 2;
  if (this->_internal_max_health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_max_health(), target);
  }

  // int32 mana = 3;
  if (this->_internal_mana() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_mana(), target);
  }

  // int32 max_mana = 4;
  if (this->_internal_max_mana() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_max_mana(), target);
  }

  // int32 stamina = 5;
  if (this->_internal_stamina() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_stamina(), target);
  }

  // int32 max_stamina = 6;
  if (this->_internal_max_stamina() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_max_stamina(), target);
  }

  // int32 attack_power = 7;
  if (this->_internal_attack_power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_attack_power(), target);
  }

  // int32 spell_power = 8;
  if (this->_internal_spell_power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_spell_power(), target);
  }

  // int32 defense = 9;
  if (this->_internal_defense() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_defense(), target);
  }

  // int32 magic_resistance = 10;
  if (this->_internal_magic_resistance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_magic_resistance(), target);
  }

  // float critical_chance = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_critical_chance = this->_internal_critical_chance();
  ::uint32_t raw_critical_chance;
  memcpy(&raw_critical_chance, &tmp_critical_chance, sizeof(tmp_critical_chance));
  if (raw_critical_chance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        11, this->_internal_critical_chance(), target);
  }

  // float critical_damage = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_critical_damage = this->_internal_critical_damage();
  ::uint32_t raw_critical_damage;
  memcpy(&raw_critical_damage, &tmp_critical_damage, sizeof(tmp_critical_damage));
  if (raw_critical_damage != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this->_internal_critical_damage(), target);
  }

  // float dodge_chance = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dodge_chance = this->_internal_dodge_chance();
  ::uint32_t raw_dodge_chance;
  memcpy(&raw_dodge_chance, &tmp_dodge_chance, sizeof(tmp_dodge_chance));
  if (raw_dodge_chance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        13, this->_internal_dodge_chance(), target);
  }

  // float block_chance = 14;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_block_chance = this->_internal_block_chance();
  ::uint32_t raw_block_chance;
  memcpy(&raw_block_chance, &tmp_block_chance, sizeof(tmp_block_chance));
  if (raw_block_chance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        14, this->_internal_block_chance(), target);
  }

  // float movement_speed = 15;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_movement_speed = this->_internal_movement_speed();
  ::uint32_t raw_movement_speed;
  memcpy(&raw_movement_speed, &tmp_movement_speed, sizeof(tmp_movement_speed));
  if (raw_movement_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        15, this->_internal_movement_speed(), target);
  }

  // float attack_speed = 16;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attack_speed = this->_internal_attack_speed();
  ::uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        16, this->_internal_attack_speed(), target);
  }

  // float cast_speed = 17;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cast_speed = this->_internal_cast_speed();
  ::uint32_t raw_cast_speed;
  memcpy(&raw_cast_speed, &tmp_cast_speed, sizeof(tmp_cast_speed));
  if (raw_cast_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        17, this->_internal_cast_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterStats)
  return target;
}

::size_t CharacterStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterStats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 health = 1;
  if (this->_internal_health() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_health());
  }

  // int32 max_health = 2;
  if (this->_internal_max_health() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_health());
  }

  // int32 mana = 3;
  if (this->_internal_mana() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_mana());
  }

  // int32 max_mana = 4;
  if (this->_internal_max_mana() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_mana());
  }

  // int32 stamina = 5;
  if (this->_internal_stamina() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_stamina());
  }

  // int32 max_stamina = 6;
  if (this->_internal_max_stamina() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_stamina());
  }

  // int32 attack_power = 7;
  if (this->_internal_attack_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_attack_power());
  }

  // int32 spell_power = 8;
  if (this->_internal_spell_power() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_spell_power());
  }

  // int32 defense = 9;
  if (this->_internal_defense() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_defense());
  }

  // int32 magic_resistance = 10;
  if (this->_internal_magic_resistance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_magic_resistance());
  }

  // float critical_chance = 11;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_critical_chance = this->_internal_critical_chance();
  ::uint32_t raw_critical_chance;
  memcpy(&raw_critical_chance, &tmp_critical_chance, sizeof(tmp_critical_chance));
  if (raw_critical_chance != 0) {
    total_size += 5;
  }

  // float critical_damage = 12;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_critical_damage = this->_internal_critical_damage();
  ::uint32_t raw_critical_damage;
  memcpy(&raw_critical_damage, &tmp_critical_damage, sizeof(tmp_critical_damage));
  if (raw_critical_damage != 0) {
    total_size += 5;
  }

  // float dodge_chance = 13;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dodge_chance = this->_internal_dodge_chance();
  ::uint32_t raw_dodge_chance;
  memcpy(&raw_dodge_chance, &tmp_dodge_chance, sizeof(tmp_dodge_chance));
  if (raw_dodge_chance != 0) {
    total_size += 5;
  }

  // float block_chance = 14;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_block_chance = this->_internal_block_chance();
  ::uint32_t raw_block_chance;
  memcpy(&raw_block_chance, &tmp_block_chance, sizeof(tmp_block_chance));
  if (raw_block_chance != 0) {
    total_size += 5;
  }

  // float movement_speed = 15;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_movement_speed = this->_internal_movement_speed();
  ::uint32_t raw_movement_speed;
  memcpy(&raw_movement_speed, &tmp_movement_speed, sizeof(tmp_movement_speed));
  if (raw_movement_speed != 0) {
    total_size += 5;
  }

  // float attack_speed = 16;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attack_speed = this->_internal_attack_speed();
  ::uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    total_size += 6;
  }

  // float cast_speed = 17;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cast_speed = this->_internal_cast_speed();
  ::uint32_t raw_cast_speed;
  memcpy(&raw_cast_speed, &tmp_cast_speed, sizeof(tmp_cast_speed));
  if (raw_cast_speed != 0) {
    total_size += 6;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterStats::_class_data_ = {
    CharacterStats::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterStats::GetClassData() const {
  return &_class_data_;
}

void CharacterStats::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterStats*>(&to_msg);
  auto& from = static_cast<const CharacterStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterStats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_health() != 0) {
    _this->_internal_set_health(from._internal_health());
  }
  if (from._internal_max_health() != 0) {
    _this->_internal_set_max_health(from._internal_max_health());
  }
  if (from._internal_mana() != 0) {
    _this->_internal_set_mana(from._internal_mana());
  }
  if (from._internal_max_mana() != 0) {
    _this->_internal_set_max_mana(from._internal_max_mana());
  }
  if (from._internal_stamina() != 0) {
    _this->_internal_set_stamina(from._internal_stamina());
  }
  if (from._internal_max_stamina() != 0) {
    _this->_internal_set_max_stamina(from._internal_max_stamina());
  }
  if (from._internal_attack_power() != 0) {
    _this->_internal_set_attack_power(from._internal_attack_power());
  }
  if (from._internal_spell_power() != 0) {
    _this->_internal_set_spell_power(from._internal_spell_power());
  }
  if (from._internal_defense() != 0) {
    _this->_internal_set_defense(from._internal_defense());
  }
  if (from._internal_magic_resistance() != 0) {
    _this->_internal_set_magic_resistance(from._internal_magic_resistance());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_critical_chance = from._internal_critical_chance();
  ::uint32_t raw_critical_chance;
  memcpy(&raw_critical_chance, &tmp_critical_chance, sizeof(tmp_critical_chance));
  if (raw_critical_chance != 0) {
    _this->_internal_set_critical_chance(from._internal_critical_chance());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_critical_damage = from._internal_critical_damage();
  ::uint32_t raw_critical_damage;
  memcpy(&raw_critical_damage, &tmp_critical_damage, sizeof(tmp_critical_damage));
  if (raw_critical_damage != 0) {
    _this->_internal_set_critical_damage(from._internal_critical_damage());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_dodge_chance = from._internal_dodge_chance();
  ::uint32_t raw_dodge_chance;
  memcpy(&raw_dodge_chance, &tmp_dodge_chance, sizeof(tmp_dodge_chance));
  if (raw_dodge_chance != 0) {
    _this->_internal_set_dodge_chance(from._internal_dodge_chance());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_block_chance = from._internal_block_chance();
  ::uint32_t raw_block_chance;
  memcpy(&raw_block_chance, &tmp_block_chance, sizeof(tmp_block_chance));
  if (raw_block_chance != 0) {
    _this->_internal_set_block_chance(from._internal_block_chance());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_movement_speed = from._internal_movement_speed();
  ::uint32_t raw_movement_speed;
  memcpy(&raw_movement_speed, &tmp_movement_speed, sizeof(tmp_movement_speed));
  if (raw_movement_speed != 0) {
    _this->_internal_set_movement_speed(from._internal_movement_speed());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_attack_speed = from._internal_attack_speed();
  ::uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    _this->_internal_set_attack_speed(from._internal_attack_speed());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_cast_speed = from._internal_cast_speed();
  ::uint32_t raw_cast_speed;
  memcpy(&raw_cast_speed, &tmp_cast_speed, sizeof(tmp_cast_speed));
  if (raw_cast_speed != 0) {
    _this->_internal_set_cast_speed(from._internal_cast_speed());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterStats::CopyFrom(const CharacterStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterStats::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterStats::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterStats::InternalSwap(CharacterStats* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.cast_speed_)
      + sizeof(CharacterStats::_impl_.cast_speed_)
      - PROTOBUF_FIELD_OFFSET(CharacterStats, _impl_.health_)>(
          reinterpret_cast<char*>(&_impl_.health_),
          reinterpret_cast<char*>(&other->_impl_.health_));
}

::google::protobuf::Metadata CharacterStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[15]);
}
// ===================================================================

class CharacterAttributes::_Internal {
 public:
};

CharacterAttributes::CharacterAttributes(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.CharacterAttributes)
}
CharacterAttributes::CharacterAttributes(
    ::google::protobuf::Arena* arena, const CharacterAttributes& from)
    : CharacterAttributes(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CharacterAttributes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CharacterAttributes::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, strength_),
           0,
           offsetof(Impl_, unspent_points_) -
               offsetof(Impl_, strength_) +
               sizeof(Impl_::unspent_points_));
}
CharacterAttributes::~CharacterAttributes() {
  // @@protoc_insertion_point(destructor:mmorpg.CharacterAttributes)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CharacterAttributes::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void CharacterAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.CharacterAttributes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.strength_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.unspent_points_) -
      reinterpret_cast<char*>(&_impl_.strength_)) + sizeof(_impl_.unspent_points_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CharacterAttributes::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2> CharacterAttributes::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CharacterAttributes_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 strength = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAttributes, _impl_.strength_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.strength_)}},
    // int32 agility = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAttributes, _impl_.agility_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.agility_)}},
    // int32 intelligence = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAttributes, _impl_.intelligence_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.intelligence_)}},
    // int32 wisdom = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAttributes, _impl_.wisdom_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.wisdom_)}},
    // int32 constitution = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAttributes, _impl_.constitution_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.constitution_)}},
    // int32 charisma = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAttributes, _impl_.charisma_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.charisma_)}},
    // int32 unspent_points = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterAttributes, _impl_.unspent_points_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.unspent_points_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 strength = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.strength_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 agility = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.agility_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 intelligence = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.intelligence_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 wisdom = 4;
    {PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.wisdom_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 constitution = 5;
    {PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.constitution_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 charisma = 6;
    {PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.charisma_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 unspent_points = 7;
    {PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.unspent_points_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CharacterAttributes::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.CharacterAttributes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 strength = 1;
  if (this->_internal_strength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_strength(), target);
  }

  // int32 agility = 2;
  if (this->_internal_agility() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_agility(), target);
  }

  // int32 intelligence = 3;
  if (this->_internal_intelligence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_intelligence(), target);
  }

  // int32 wisdom = 4;
  if (this->_internal_wisdom() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_wisdom(), target);
  }

  // int32 constitution = 5;
  if (this->_internal_constitution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_constitution(), target);
  }

  // int32 charisma = 6;
  if (this->_internal_charisma() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_charisma(), target);
  }

  // int32 unspent_points = 7;
  if (this->_internal_unspent_points() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_unspent_points(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.CharacterAttributes)
  return target;
}

::size_t CharacterAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.CharacterAttributes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 strength = 1;
  if (this->_internal_strength() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_strength());
  }

  // int32 agility = 2;
  if (this->_internal_agility() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_agility());
  }

  // int32 intelligence = 3;
  if (this->_internal_intelligence() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_intelligence());
  }

  // int32 wisdom = 4;
  if (this->_internal_wisdom() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_wisdom());
  }

  // int32 constitution = 5;
  if (this->_internal_constitution() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_constitution());
  }

  // int32 charisma = 6;
  if (this->_internal_charisma() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_charisma());
  }

  // int32 unspent_points = 7;
  if (this->_internal_unspent_points() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_unspent_points());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CharacterAttributes::_class_data_ = {
    CharacterAttributes::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* CharacterAttributes::GetClassData() const {
  return &_class_data_;
}

void CharacterAttributes::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CharacterAttributes*>(&to_msg);
  auto& from = static_cast<const CharacterAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.CharacterAttributes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_strength() != 0) {
    _this->_internal_set_strength(from._internal_strength());
  }
  if (from._internal_agility() != 0) {
    _this->_internal_set_agility(from._internal_agility());
  }
  if (from._internal_intelligence() != 0) {
    _this->_internal_set_intelligence(from._internal_intelligence());
  }
  if (from._internal_wisdom() != 0) {
    _this->_internal_set_wisdom(from._internal_wisdom());
  }
  if (from._internal_constitution() != 0) {
    _this->_internal_set_constitution(from._internal_constitution());
  }
  if (from._internal_charisma() != 0) {
    _this->_internal_set_charisma(from._internal_charisma());
  }
  if (from._internal_unspent_points() != 0) {
    _this->_internal_set_unspent_points(from._internal_unspent_points());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterAttributes::CopyFrom(const CharacterAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.CharacterAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CharacterAttributes::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* CharacterAttributes::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void CharacterAttributes::InternalSwap(CharacterAttributes* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.unspent_points_)
      + sizeof(CharacterAttributes::_impl_.unspent_points_)
      - PROTOBUF_FIELD_OFFSET(CharacterAttributes, _impl_.strength_)>(
          reinterpret_cast<char*>(&_impl_.strength_),
          reinterpret_cast<char*>(&other->_impl_.strength_));
}

::google::protobuf::Metadata CharacterAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[16]);
}
// ===================================================================

class EquipmentPreview::_Internal {
 public:
};

EquipmentPreview::EquipmentPreview(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.EquipmentPreview)
}
inline PROTOBUF_NDEBUG_INLINE EquipmentPreview::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : slot_(arena, from.slot_),
        item_id_(arena, from.item_id_),
        icon_id_(arena, from.icon_id_),
        _cached_size_{0} {}

EquipmentPreview::EquipmentPreview(
    ::google::protobuf::Arena* arena,
    const EquipmentPreview& from)
    : ::google::protobuf::Message(arena) {
  EquipmentPreview* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.quality_ = from._impl_.quality_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.EquipmentPreview)
}
inline PROTOBUF_NDEBUG_INLINE EquipmentPreview::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : slot_(arena),
        item_id_(arena),
        icon_id_(arena),
        _cached_size_{0} {}

inline void EquipmentPreview::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.quality_ = {};
}
EquipmentPreview::~EquipmentPreview() {
  // @@protoc_insertion_point(destructor:mmorpg.EquipmentPreview)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EquipmentPreview::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.slot_.Destroy();
  _impl_.item_id_.Destroy();
  _impl_.icon_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EquipmentPreview::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.EquipmentPreview)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slot_.ClearToEmpty();
  _impl_.item_id_.ClearToEmpty();
  _impl_.icon_id_.ClearToEmpty();
  _impl_.quality_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EquipmentPreview::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 50, 2> EquipmentPreview::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EquipmentPreview_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 quality = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EquipmentPreview, _impl_.quality_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(EquipmentPreview, _impl_.quality_)}},
    // string slot = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EquipmentPreview, _impl_.slot_)}},
    // string item_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EquipmentPreview, _impl_.item_id_)}},
    // string icon_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(EquipmentPreview, _impl_.icon_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string slot = 1;
    {PROTOBUF_FIELD_OFFSET(EquipmentPreview, _impl_.slot_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string item_id = 2;
    {PROTOBUF_FIELD_OFFSET(EquipmentPreview, _impl_.item_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string icon_id = 3;
    {PROTOBUF_FIELD_OFFSET(EquipmentPreview, _impl_.icon_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 quality = 4;
    {PROTOBUF_FIELD_OFFSET(EquipmentPreview, _impl_.quality_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\27\4\7\7\0\0\0\0"
    "mmorpg.EquipmentPreview"
    "slot"
    "item_id"
    "icon_id"
  }},
};

::uint8_t* EquipmentPreview::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.EquipmentPreview)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string slot = 1;
  if (!this->_internal_slot().empty()) {
    const std::string& _s = this->_internal_slot();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.EquipmentPreview.slot");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string item_id = 2;
  if (!this->_internal_item_id().empty()) {
    const std::string& _s = this->_internal_item_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.EquipmentPreview.item_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string icon_id = 3;
  if (!this->_internal_icon_id().empty()) {
    const std::string& _s = this->_internal_icon_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.EquipmentPreview.icon_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 quality = 4;
  if (this->_internal_quality() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.EquipmentPreview)
  return target;
}

::size_t EquipmentPreview::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.EquipmentPreview)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slot = 1;
  if (!this->_internal_slot().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_slot());
  }

  // string item_id = 2;
  if (!this->_internal_item_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_item_id());
  }

  // string icon_id = 3;
  if (!this->_internal_icon_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_icon_id());
  }

  // int32 quality = 4;
  if (this->_internal_quality() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_quality());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EquipmentPreview::_class_data_ = {
    EquipmentPreview::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EquipmentPreview::GetClassData() const {
  return &_class_data_;
}

void EquipmentPreview::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EquipmentPreview*>(&to_msg);
  auto& from = static_cast<const EquipmentPreview&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.EquipmentPreview)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_slot().empty()) {
    _this->_internal_set_slot(from._internal_slot());
  }
  if (!from._internal_item_id().empty()) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (!from._internal_icon_id().empty()) {
    _this->_internal_set_icon_id(from._internal_icon_id());
  }
  if (from._internal_quality() != 0) {
    _this->_internal_set_quality(from._internal_quality());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EquipmentPreview::CopyFrom(const EquipmentPreview& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.EquipmentPreview)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EquipmentPreview::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EquipmentPreview::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EquipmentPreview::InternalSwap(EquipmentPreview* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.slot_, &other->_impl_.slot_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.item_id_, &other->_impl_.item_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.icon_id_, &other->_impl_.icon_id_, arena);
        swap(_impl_.quality_, other->_impl_.quality_);
}

::google::protobuf::Metadata EquipmentPreview::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_character_2eproto_getter, &descriptor_table_character_2eproto_once,
      file_level_metadata_character_2eproto[17]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace mmorpg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
