// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#include "auth.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mmorpg {
      template <typename>
PROTOBUF_CONSTEXPR RegisterResponse_FieldErrorsEntry_DoNotUse::RegisterResponse_FieldErrorsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct RegisterResponse_FieldErrorsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterResponse_FieldErrorsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterResponse_FieldErrorsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RegisterResponse_FieldErrorsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterResponse_FieldErrorsEntry_DoNotUseDefaultTypeInternal _RegisterResponse_FieldErrorsEntry_DoNotUse_default_instance_;

inline constexpr RegisterRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        email_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        referral_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        accept_terms_{false} {}

template <typename>
PROTOBUF_CONSTEXPR RegisterRequest::RegisterRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RegisterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterRequestDefaultTypeInternal() {}
  union {
    RegisterRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterRequestDefaultTypeInternal _RegisterRequest_default_instance_;

inline constexpr RefreshTokenResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : access_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        refresh_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        expires_in_{0},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RefreshTokenResponse::RefreshTokenResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RefreshTokenResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RefreshTokenResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RefreshTokenResponseDefaultTypeInternal() {}
  union {
    RefreshTokenResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RefreshTokenResponseDefaultTypeInternal _RefreshTokenResponse_default_instance_;

inline constexpr RefreshTokenRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : refresh_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RefreshTokenRequest::RefreshTokenRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RefreshTokenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RefreshTokenRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RefreshTokenRequestDefaultTypeInternal() {}
  union {
    RefreshTokenRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RefreshTokenRequestDefaultTypeInternal _RefreshTokenRequest_default_instance_;

inline constexpr PasswordResetResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PasswordResetResponse::PasswordResetResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PasswordResetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasswordResetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasswordResetResponseDefaultTypeInternal() {}
  union {
    PasswordResetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasswordResetResponseDefaultTypeInternal _PasswordResetResponse_default_instance_;

inline constexpr PasswordResetRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : email_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PasswordResetRequest::PasswordResetRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PasswordResetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PasswordResetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PasswordResetRequestDefaultTypeInternal() {}
  union {
    PasswordResetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PasswordResetRequestDefaultTypeInternal _PasswordResetRequest_default_instance_;

inline constexpr LogoutResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LogoutResponse::LogoutResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogoutResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutResponseDefaultTypeInternal() {}
  union {
    LogoutResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutResponseDefaultTypeInternal _LogoutResponse_default_instance_;

inline constexpr LogoutRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : session_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        logout_all_devices_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LogoutRequest::LogoutRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LogoutRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogoutRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogoutRequestDefaultTypeInternal() {}
  union {
    LogoutRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogoutRequestDefaultTypeInternal _LogoutRequest_default_instance_;

inline constexpr LoginRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : email_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        platform_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LoginRequest::LoginRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRequestDefaultTypeInternal() {}
  union {
    LoginRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;

inline constexpr ChangePasswordResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChangePasswordResponse::ChangePasswordResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChangePasswordResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangePasswordResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangePasswordResponseDefaultTypeInternal() {}
  union {
    ChangePasswordResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangePasswordResponseDefaultTypeInternal _ChangePasswordResponse_default_instance_;

inline constexpr ChangePasswordRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : current_password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        new_password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        session_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChangePasswordRequest::ChangePasswordRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChangePasswordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangePasswordRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangePasswordRequestDefaultTypeInternal() {}
  union {
    ChangePasswordRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangePasswordRequestDefaultTypeInternal _ChangePasswordRequest_default_instance_;

inline constexpr UserInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        roles_{},
        user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        email_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        username_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_at_{nullptr},
        last_login_{nullptr},
        premium_expires_{nullptr},
        account_status_{static_cast< ::mmorpg::AccountStatus >(0)},
        email_verified_{false},
        is_premium_{false},
        max_characters_{0},
        character_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UserInfo::UserInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;

inline constexpr SessionInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        session_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_address_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_agent_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_at_{nullptr},
        last_active_{nullptr},
        expires_at_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SessionInfo::SessionInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SessionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionInfoDefaultTypeInternal() {}
  union {
    SessionInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionInfoDefaultTypeInternal _SessionInfo_default_instance_;

inline constexpr RegisterResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : field_errors_{},
        user_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR RegisterResponse::RegisterResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RegisterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterResponseDefaultTypeInternal() {}
  union {
    RegisterResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterResponseDefaultTypeInternal _RegisterResponse_default_instance_;

inline constexpr LoginResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        access_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        refresh_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        session_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_info_{nullptr},
        success_{false},
        expires_in_{0},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR LoginResponse::LoginResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponseDefaultTypeInternal() {}
  union {
    LoginResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
}  // namespace mmorpg
static ::_pb::Metadata file_level_metadata_auth_2eproto[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_auth_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_auth_2eproto = nullptr;
const ::uint32_t TableStruct_auth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginRequest, _impl_.email_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginRequest, _impl_.password_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginRequest, _impl_.client_version_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginRequest, _impl_.device_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginRequest, _impl_.platform_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginResponse, _impl_.access_token_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginResponse, _impl_.refresh_token_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginResponse, _impl_.session_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginResponse, _impl_.expires_in_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginResponse, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LoginResponse, _impl_.user_info_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterRequest, _impl_.email_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterRequest, _impl_.password_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterRequest, _impl_.username_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterRequest, _impl_.client_version_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterRequest, _impl_.accept_terms_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterRequest, _impl_.referral_code_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterResponse_FieldErrorsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterResponse_FieldErrorsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterResponse_FieldErrorsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterResponse_FieldErrorsEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterResponse, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterResponse, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RegisterResponse, _impl_.field_errors_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::LogoutRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::LogoutRequest, _impl_.session_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LogoutRequest, _impl_.logout_all_devices_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::LogoutResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::LogoutResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LogoutResponse, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::RefreshTokenRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::RefreshTokenRequest, _impl_.refresh_token_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::RefreshTokenResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::RefreshTokenResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RefreshTokenResponse, _impl_.access_token_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RefreshTokenResponse, _impl_.refresh_token_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RefreshTokenResponse, _impl_.expires_in_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RefreshTokenResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::RefreshTokenResponse, _impl_.error_code_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::PasswordResetRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::PasswordResetRequest, _impl_.email_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::PasswordResetResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::PasswordResetResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PasswordResetResponse, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChangePasswordRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChangePasswordRequest, _impl_.current_password_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChangePasswordRequest, _impl_.new_password_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChangePasswordRequest, _impl_.session_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChangePasswordResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChangePasswordResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChangePasswordResponse, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChangePasswordResponse, _impl_.error_code_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.email_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.username_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.last_login_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.email_verified_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.account_status_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.roles_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.max_characters_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.character_count_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.is_premium_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::UserInfo, _impl_.premium_expires_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    2,
    PROTOBUF_FIELD_OFFSET(::mmorpg::SessionInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SessionInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::SessionInfo, _impl_.session_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SessionInfo, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SessionInfo, _impl_.device_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SessionInfo, _impl_.ip_address_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SessionInfo, _impl_.user_agent_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SessionInfo, _impl_.created_at_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SessionInfo, _impl_.last_active_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SessionInfo, _impl_.expires_at_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    2,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::mmorpg::LoginRequest)},
        {13, 29, -1, sizeof(::mmorpg::LoginResponse)},
        {37, 51, -1, sizeof(::mmorpg::RegisterRequest)},
        {57, 67, -1, sizeof(::mmorpg::RegisterResponse_FieldErrorsEntry_DoNotUse)},
        {69, -1, -1, sizeof(::mmorpg::RegisterResponse)},
        {82, -1, -1, sizeof(::mmorpg::LogoutRequest)},
        {92, -1, -1, sizeof(::mmorpg::LogoutResponse)},
        {102, -1, -1, sizeof(::mmorpg::RefreshTokenRequest)},
        {111, -1, -1, sizeof(::mmorpg::RefreshTokenResponse)},
        {125, -1, -1, sizeof(::mmorpg::PasswordResetRequest)},
        {134, -1, -1, sizeof(::mmorpg::PasswordResetResponse)},
        {144, -1, -1, sizeof(::mmorpg::ChangePasswordRequest)},
        {155, -1, -1, sizeof(::mmorpg::ChangePasswordResponse)},
        {166, 186, -1, sizeof(::mmorpg::UserInfo)},
        {198, 214, -1, sizeof(::mmorpg::SessionInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mmorpg::_LoginRequest_default_instance_._instance,
    &::mmorpg::_LoginResponse_default_instance_._instance,
    &::mmorpg::_RegisterRequest_default_instance_._instance,
    &::mmorpg::_RegisterResponse_FieldErrorsEntry_DoNotUse_default_instance_._instance,
    &::mmorpg::_RegisterResponse_default_instance_._instance,
    &::mmorpg::_LogoutRequest_default_instance_._instance,
    &::mmorpg::_LogoutResponse_default_instance_._instance,
    &::mmorpg::_RefreshTokenRequest_default_instance_._instance,
    &::mmorpg::_RefreshTokenResponse_default_instance_._instance,
    &::mmorpg::_PasswordResetRequest_default_instance_._instance,
    &::mmorpg::_PasswordResetResponse_default_instance_._instance,
    &::mmorpg::_ChangePasswordRequest_default_instance_._instance,
    &::mmorpg::_ChangePasswordResponse_default_instance_._instance,
    &::mmorpg::_UserInfo_default_instance_._instance,
    &::mmorpg::_SessionInfo_default_instance_._instance,
};
const char descriptor_table_protodef_auth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nauth.proto\022\006mmorpg\032\037google/protobuf/ti"
    "mestamp.proto\032\nbase.proto\"l\n\014LoginReques"
    "t\022\r\n\005email\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022\026\n\016cl"
    "ient_version\030\003 \001(\t\022\021\n\tdevice_id\030\004 \001(\t\022\020\n"
    "\010platform\030\005 \001(\t\"\330\001\n\rLoginResponse\022\017\n\007suc"
    "cess\030\001 \001(\010\022\024\n\014access_token\030\002 \001(\t\022\025\n\rrefr"
    "esh_token\030\003 \001(\t\022\022\n\nsession_id\030\004 \001(\t\022\022\n\ne"
    "xpires_in\030\005 \001(\005\022\025\n\rerror_message\030\006 \001(\t\022%"
    "\n\nerror_code\030\007 \001(\0162\021.mmorpg.ErrorCode\022#\n"
    "\tuser_info\030\010 \001(\0132\020.mmorpg.UserInfo\"\240\001\n\017R"
    "egisterRequest\022\r\n\005email\030\001 \001(\t\022\020\n\010passwor"
    "d\030\002 \001(\t\022\020\n\010username\030\003 \001(\t\022\026\n\016client_vers"
    "ion\030\004 \001(\t\022\024\n\014accept_terms\030\005 \001(\010\022\032\n\rrefer"
    "ral_code\030\006 \001(\tH\000\210\001\001B\020\n\016_referral_code\"\347\001"
    "\n\020RegisterResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007u"
    "ser_id\030\002 \001(\t\022\025\n\rerror_message\030\003 \001(\t\022%\n\ne"
    "rror_code\030\004 \001(\0162\021.mmorpg.ErrorCode\022\?\n\014fi"
    "eld_errors\030\005 \003(\0132).mmorpg.RegisterRespon"
    "se.FieldErrorsEntry\0322\n\020FieldErrorsEntry\022"
    "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\?\n\rLogou"
    "tRequest\022\022\n\nsession_id\030\001 \001(\t\022\032\n\022logout_a"
    "ll_devices\030\002 \001(\010\"2\n\016LogoutResponse\022\017\n\007su"
    "ccess\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\",\n\023RefreshT"
    "okenRequest\022\025\n\rrefresh_token\030\001 \001(\t\"\246\001\n\024R"
    "efreshTokenResponse\022\017\n\007success\030\001 \001(\010\022\024\n\014"
    "access_token\030\002 \001(\t\022\025\n\rrefresh_token\030\003 \001("
    "\t\022\022\n\nexpires_in\030\004 \001(\005\022\025\n\rerror_message\030\005"
    " \001(\t\022%\n\nerror_code\030\006 \001(\0162\021.mmorpg.ErrorC"
    "ode\"%\n\024PasswordResetRequest\022\r\n\005email\030\001 \001"
    "(\t\"9\n\025PasswordResetResponse\022\017\n\007success\030\001"
    " \001(\010\022\017\n\007message\030\002 \001(\t\"[\n\025ChangePasswordR"
    "equest\022\030\n\020current_password\030\001 \001(\t\022\024\n\014new_"
    "password\030\002 \001(\t\022\022\n\nsession_id\030\003 \001(\t\"a\n\026Ch"
    "angePasswordResponse\022\017\n\007success\030\001 \001(\010\022\017\n"
    "\007message\030\002 \001(\t\022%\n\nerror_code\030\003 \001(\0162\021.mmo"
    "rpg.ErrorCode\"\354\002\n\010UserInfo\022\017\n\007user_id\030\001 "
    "\001(\t\022\r\n\005email\030\002 \001(\t\022\020\n\010username\030\003 \001(\t\022.\n\n"
    "created_at\030\004 \001(\0132\032.google.protobuf.Times"
    "tamp\022.\n\nlast_login\030\005 \001(\0132\032.google.protob"
    "uf.Timestamp\022\026\n\016email_verified\030\006 \001(\010\022-\n\016"
    "account_status\030\007 \001(\0162\025.mmorpg.AccountSta"
    "tus\022\r\n\005roles\030\010 \003(\t\022\026\n\016max_characters\030\t \001"
    "(\005\022\027\n\017character_count\030\n \001(\005\022\022\n\nis_premiu"
    "m\030\013 \001(\010\0223\n\017premium_expires\030\014 \001(\0132\032.googl"
    "e.protobuf.Timestamp\"\376\001\n\013SessionInfo\022\022\n\n"
    "session_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022\021\n\tdev"
    "ice_id\030\003 \001(\t\022\022\n\nip_address\030\004 \001(\t\022\022\n\nuser"
    "_agent\030\005 \001(\t\022.\n\ncreated_at\030\006 \001(\0132\032.googl"
    "e.protobuf.Timestamp\022/\n\013last_active\030\007 \001("
    "\0132\032.google.protobuf.Timestamp\022.\n\nexpires"
    "_at\030\010 \001(\0132\032.google.protobuf.Timestamp*\310\001"
    "\n\rAccountStatus\022\036\n\032ACCOUNT_STATUS_UNSPEC"
    "IFIED\020\000\022\031\n\025ACCOUNT_STATUS_ACTIVE\020\001\022\034\n\030AC"
    "COUNT_STATUS_SUSPENDED\020\002\022\031\n\025ACCOUNT_STAT"
    "US_BANNED\020\003\022\'\n#ACCOUNT_STATUS_PENDING_VE"
    "RIFICATION\020\004\022\032\n\026ACCOUNT_STATUS_DELETED\020\005"
    "B.Z,github.com/mmorpg-template/backend/p"
    "kg/protob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_auth_2eproto_deps[2] =
    {
        &::descriptor_table_base_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_auth_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_auth_2eproto = {
    false,
    false,
    2296,
    descriptor_table_protodef_auth_2eproto,
    "auth.proto",
    &descriptor_table_auth_2eproto_once,
    descriptor_table_auth_2eproto_deps,
    2,
    15,
    schemas,
    file_default_instances,
    TableStruct_auth_2eproto::offsets,
    file_level_metadata_auth_2eproto,
    file_level_enum_descriptors_auth_2eproto,
    file_level_service_descriptors_auth_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_auth_2eproto_getter() {
  return &descriptor_table_auth_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_auth_2eproto(&descriptor_table_auth_2eproto);
namespace mmorpg {
const ::google::protobuf::EnumDescriptor* AccountStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_auth_2eproto);
  return file_level_enum_descriptors_auth_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t AccountStatus_internal_data_[] = {
    393216u, 0u, };
bool AccountStatus_IsValid(int value) {
  return 0 <= value && value <= 5;
}
// ===================================================================

class LoginRequest::_Internal {
 public:
};

LoginRequest::LoginRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.LoginRequest)
}
inline PROTOBUF_NDEBUG_INLINE LoginRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : email_(arena, from.email_),
        password_(arena, from.password_),
        client_version_(arena, from.client_version_),
        device_id_(arena, from.device_id_),
        platform_(arena, from.platform_),
        _cached_size_{0} {}

LoginRequest::LoginRequest(
    ::google::protobuf::Arena* arena,
    const LoginRequest& from)
    : ::google::protobuf::Message(arena) {
  LoginRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:mmorpg.LoginRequest)
}
inline PROTOBUF_NDEBUG_INLINE LoginRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : email_(arena),
        password_(arena),
        client_version_(arena),
        device_id_(arena),
        platform_(arena),
        _cached_size_{0} {}

inline void LoginRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.LoginRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LoginRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.email_.Destroy();
  _impl_.password_.Destroy();
  _impl_.client_version_.Destroy();
  _impl_.device_id_.Destroy();
  _impl_.platform_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.LoginRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.client_version_.ClearToEmpty();
  _impl_.device_id_.ClearToEmpty();
  _impl_.platform_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 72, 2> LoginRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LoginRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string email = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.email_)}},
    // string password = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.password_)}},
    // string client_version = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.client_version_)}},
    // string device_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.device_id_)}},
    // string platform = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.platform_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string email = 1;
    {PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.email_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string password = 2;
    {PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.password_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string client_version = 3;
    {PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.client_version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string device_id = 4;
    {PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.device_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string platform = 5;
    {PROTOBUF_FIELD_OFFSET(LoginRequest, _impl_.platform_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\5\10\16\11\10\0\0"
    "mmorpg.LoginRequest"
    "email"
    "password"
    "client_version"
    "device_id"
    "platform"
  }},
};

::uint8_t* LoginRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.LoginRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    const std::string& _s = this->_internal_email();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LoginRequest.email");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LoginRequest.password");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string client_version = 3;
  if (!this->_internal_client_version().empty()) {
    const std::string& _s = this->_internal_client_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LoginRequest.client_version");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string device_id = 4;
  if (!this->_internal_device_id().empty()) {
    const std::string& _s = this->_internal_device_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LoginRequest.device_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string platform = 5;
  if (!this->_internal_platform().empty()) {
    const std::string& _s = this->_internal_platform();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LoginRequest.platform");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.LoginRequest)
  return target;
}

::size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.LoginRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_email());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  // string client_version = 3;
  if (!this->_internal_client_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_client_version());
  }

  // string device_id = 4;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_device_id());
  }

  // string platform = 5;
  if (!this->_internal_platform().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_platform());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LoginRequest::_class_data_ = {
    LoginRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LoginRequest::GetClassData() const {
  return &_class_data_;
}

void LoginRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LoginRequest*>(&to_msg);
  auto& from = static_cast<const LoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.LoginRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_client_version().empty()) {
    _this->_internal_set_client_version(from._internal_client_version());
  }
  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_platform().empty()) {
    _this->_internal_set_platform(from._internal_platform());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LoginRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LoginRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LoginRequest::InternalSwap(LoginRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, &other->_impl_.email_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, &other->_impl_.password_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_version_, &other->_impl_.client_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_id_, &other->_impl_.device_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.platform_, &other->_impl_.platform_, arena);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[0]);
}
// ===================================================================

class LoginResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_._has_bits_);
  static const ::mmorpg::UserInfo& user_info(const LoginResponse* msg);
  static void set_has_user_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mmorpg::UserInfo& LoginResponse::_Internal::user_info(const LoginResponse* msg) {
  return *msg->_impl_.user_info_;
}
LoginResponse::LoginResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.LoginResponse)
}
inline PROTOBUF_NDEBUG_INLINE LoginResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        access_token_(arena, from.access_token_),
        refresh_token_(arena, from.refresh_token_),
        session_id_(arena, from.session_id_),
        error_message_(arena, from.error_message_) {}

LoginResponse::LoginResponse(
    ::google::protobuf::Arena* arena,
    const LoginResponse& from)
    : ::google::protobuf::Message(arena) {
  LoginResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.user_info_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::UserInfo>(arena, *from._impl_.user_info_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.LoginResponse)
}
inline PROTOBUF_NDEBUG_INLINE LoginResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        access_token_(arena),
        refresh_token_(arena),
        session_id_(arena),
        error_message_(arena) {}

inline void LoginResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, user_info_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, user_info_) +
               sizeof(Impl_::error_code_));
}
LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.LoginResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LoginResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.access_token_.Destroy();
  _impl_.refresh_token_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.error_message_.Destroy();
  delete _impl_.user_info_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.LoginResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.access_token_.ClearToEmpty();
  _impl_.refresh_token_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_info_ != nullptr);
    _impl_.user_info_->Clear();
  }
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LoginResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 85, 2> LoginResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_LoginResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mmorpg.UserInfo user_info = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.user_info_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(LoginResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.success_)}},
    // string access_token = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.access_token_)}},
    // string refresh_token = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.refresh_token_)}},
    // string session_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.session_id_)}},
    // int32 expires_in = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LoginResponse, _impl_.expires_in_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.expires_in_)}},
    // string error_message = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.error_message_)}},
    // .mmorpg.ErrorCode error_code = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LoginResponse, _impl_.error_code_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.error_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.success_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string access_token = 2;
    {PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.access_token_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string refresh_token = 3;
    {PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.refresh_token_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string session_id = 4;
    {PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.session_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 expires_in = 5;
    {PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.expires_in_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string error_message = 6;
    {PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.error_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 7;
    {PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.error_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .mmorpg.UserInfo user_info = 8;
    {PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.user_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::UserInfo>()},
  }}, {{
    "\24\0\14\15\12\0\15\0\0\0\0\0\0\0\0\0"
    "mmorpg.LoginResponse"
    "access_token"
    "refresh_token"
    "session_id"
    "error_message"
  }},
};

::uint8_t* LoginResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.LoginResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string access_token = 2;
  if (!this->_internal_access_token().empty()) {
    const std::string& _s = this->_internal_access_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LoginResponse.access_token");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string refresh_token = 3;
  if (!this->_internal_refresh_token().empty()) {
    const std::string& _s = this->_internal_refresh_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LoginResponse.refresh_token");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string session_id = 4;
  if (!this->_internal_session_id().empty()) {
    const std::string& _s = this->_internal_session_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LoginResponse.session_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int32 expires_in = 5;
  if (this->_internal_expires_in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_expires_in(), target);
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LoginResponse.error_message");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 7;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_error_code(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.UserInfo user_info = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::user_info(this),
        _Internal::user_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.LoginResponse)
  return target;
}

::size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.LoginResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string access_token = 2;
  if (!this->_internal_access_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_access_token());
  }

  // string refresh_token = 3;
  if (!this->_internal_refresh_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_refresh_token());
  }

  // string session_id = 4;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_session_id());
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // .mmorpg.UserInfo user_info = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.user_info_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // int32 expires_in = 5;
  if (this->_internal_expires_in() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_expires_in());
  }

  // .mmorpg.ErrorCode error_code = 7;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LoginResponse::_class_data_ = {
    LoginResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LoginResponse::GetClassData() const {
  return &_class_data_;
}

void LoginResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LoginResponse*>(&to_msg);
  auto& from = static_cast<const LoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.LoginResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_access_token().empty()) {
    _this->_internal_set_access_token(from._internal_access_token());
  }
  if (!from._internal_refresh_token().empty()) {
    _this->_internal_set_refresh_token(from._internal_refresh_token());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user_info()->::mmorpg::UserInfo::MergeFrom(
        from._internal_user_info());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_expires_in() != 0) {
    _this->_internal_set_expires_in(from._internal_expires_in());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LoginResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LoginResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LoginResponse::InternalSwap(LoginResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.access_token_, &other->_impl_.access_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.refresh_token_, &other->_impl_.refresh_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, &other->_impl_.session_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.error_code_)
      + sizeof(LoginResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.user_info_)>(
          reinterpret_cast<char*>(&_impl_.user_info_),
          reinterpret_cast<char*>(&other->_impl_.user_info_));
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[1]);
}
// ===================================================================

class RegisterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_._has_bits_);
  static void set_has_referral_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RegisterRequest::RegisterRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.RegisterRequest)
}
inline PROTOBUF_NDEBUG_INLINE RegisterRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        email_(arena, from.email_),
        password_(arena, from.password_),
        username_(arena, from.username_),
        client_version_(arena, from.client_version_),
        referral_code_(arena, from.referral_code_) {}

RegisterRequest::RegisterRequest(
    ::google::protobuf::Arena* arena,
    const RegisterRequest& from)
    : ::google::protobuf::Message(arena) {
  RegisterRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.accept_terms_ = from._impl_.accept_terms_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.RegisterRequest)
}
inline PROTOBUF_NDEBUG_INLINE RegisterRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        email_(arena),
        password_(arena),
        username_(arena),
        client_version_(arena),
        referral_code_(arena) {}

inline void RegisterRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.accept_terms_ = {};
}
RegisterRequest::~RegisterRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.RegisterRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RegisterRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.email_.Destroy();
  _impl_.password_.Destroy();
  _impl_.username_.Destroy();
  _impl_.client_version_.Destroy();
  _impl_.referral_code_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RegisterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.RegisterRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.client_version_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.referral_code_.ClearNonDefaultToEmpty();
  }
  _impl_.accept_terms_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RegisterRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 79, 2> RegisterRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RegisterRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string email = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.email_)}},
    // string password = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.password_)}},
    // string username = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.username_)}},
    // string client_version = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.client_version_)}},
    // bool accept_terms = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RegisterRequest, _impl_.accept_terms_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.accept_terms_)}},
    // optional string referral_code = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.referral_code_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string email = 1;
    {PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.email_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string password = 2;
    {PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.password_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string username = 3;
    {PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string client_version = 4;
    {PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.client_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool accept_terms = 5;
    {PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.accept_terms_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // optional string referral_code = 6;
    {PROTOBUF_FIELD_OFFSET(RegisterRequest, _impl_.referral_code_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\5\10\10\16\0\15\0"
    "mmorpg.RegisterRequest"
    "email"
    "password"
    "username"
    "client_version"
    "referral_code"
  }},
};

::uint8_t* RegisterRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.RegisterRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    const std::string& _s = this->_internal_email();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RegisterRequest.email");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RegisterRequest.password");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string username = 3;
  if (!this->_internal_username().empty()) {
    const std::string& _s = this->_internal_username();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RegisterRequest.username");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string client_version = 4;
  if (!this->_internal_client_version().empty()) {
    const std::string& _s = this->_internal_client_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RegisterRequest.client_version");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool accept_terms = 5;
  if (this->_internal_accept_terms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_accept_terms(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string referral_code = 6;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_referral_code();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RegisterRequest.referral_code");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.RegisterRequest)
  return target;
}

::size_t RegisterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.RegisterRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_email());
  }

  // string password = 2;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  // string username = 3;
  if (!this->_internal_username().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_username());
  }

  // string client_version = 4;
  if (!this->_internal_client_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_client_version());
  }

  // optional string referral_code = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_referral_code());
  }

  // bool accept_terms = 5;
  if (this->_internal_accept_terms() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RegisterRequest::_class_data_ = {
    RegisterRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RegisterRequest::GetClassData() const {
  return &_class_data_;
}

void RegisterRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RegisterRequest*>(&to_msg);
  auto& from = static_cast<const RegisterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.RegisterRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_client_version().empty()) {
    _this->_internal_set_client_version(from._internal_client_version());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_referral_code(from._internal_referral_code());
  }
  if (from._internal_accept_terms() != 0) {
    _this->_internal_set_accept_terms(from._internal_accept_terms());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterRequest::CopyFrom(const RegisterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.RegisterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RegisterRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RegisterRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RegisterRequest::InternalSwap(RegisterRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, &other->_impl_.email_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, &other->_impl_.password_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, &other->_impl_.username_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_version_, &other->_impl_.client_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.referral_code_, &other->_impl_.referral_code_, arena);
        swap(_impl_.accept_terms_, other->_impl_.accept_terms_);
}

::google::protobuf::Metadata RegisterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[2]);
}
// ===================================================================

RegisterResponse_FieldErrorsEntry_DoNotUse::RegisterResponse_FieldErrorsEntry_DoNotUse() {}
RegisterResponse_FieldErrorsEntry_DoNotUse::RegisterResponse_FieldErrorsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata RegisterResponse_FieldErrorsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[3]);
}
// ===================================================================

class RegisterResponse::_Internal {
 public:
};

RegisterResponse::RegisterResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.RegisterResponse)
}
inline PROTOBUF_NDEBUG_INLINE RegisterResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : field_errors_{visibility, arena, from.field_errors_},
        user_id_(arena, from.user_id_),
        error_message_(arena, from.error_message_),
        _cached_size_{0} {}

RegisterResponse::RegisterResponse(
    ::google::protobuf::Arena* arena,
    const RegisterResponse& from)
    : ::google::protobuf::Message(arena) {
  RegisterResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.RegisterResponse)
}
inline PROTOBUF_NDEBUG_INLINE RegisterResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : field_errors_{visibility, arena},
        user_id_(arena),
        error_message_(arena),
        _cached_size_{0} {}

inline void RegisterResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));
}
RegisterResponse::~RegisterResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.RegisterResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RegisterResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RegisterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.RegisterResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_errors_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RegisterResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 5, 1, 64, 2> RegisterResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_RegisterResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mmorpg.ErrorCode error_code = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RegisterResponse, _impl_.error_code_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.error_code_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RegisterResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.success_)}},
    // string user_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.user_id_)}},
    // string error_message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.error_message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string user_id = 2;
    {PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.user_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string error_message = 3;
    {PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.error_message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 4;
    {PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.error_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // map<string, string> field_errors = 5;
    {PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.field_errors_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(RegisterResponse()._impl_.field_errors_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\27\0\7\15\0\14\0\0"
    "mmorpg.RegisterResponse"
    "user_id"
    "error_message"
    "field_errors"
  }},
};

::uint8_t* RegisterResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.RegisterResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RegisterResponse.user_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RegisterResponse.error_message");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 4;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_error_code(), target);
  }

  // map<string, string> field_errors = 5;
  if (!_internal_field_errors().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_field_errors();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            5, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RegisterResponse.field_errors");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RegisterResponse.field_errors");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            5, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RegisterResponse.field_errors");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RegisterResponse.field_errors");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.RegisterResponse)
  return target;
}

::size_t RegisterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.RegisterResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> field_errors = 5;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_field_errors_size());
  for (const auto& entry : _internal_field_errors()) {
    total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string error_message = 3;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // .mmorpg.ErrorCode error_code = 4;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RegisterResponse::_class_data_ = {
    RegisterResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RegisterResponse::GetClassData() const {
  return &_class_data_;
}

void RegisterResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RegisterResponse*>(&to_msg);
  auto& from = static_cast<const RegisterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.RegisterResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.field_errors_.MergeFrom(from._impl_.field_errors_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterResponse::CopyFrom(const RegisterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.RegisterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RegisterResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RegisterResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RegisterResponse::InternalSwap(RegisterResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.field_errors_.InternalSwap(&other->_impl_.field_errors_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, &other->_impl_.user_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.error_code_)
      + sizeof(RegisterResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(RegisterResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::google::protobuf::Metadata RegisterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[4]);
}
// ===================================================================

class LogoutRequest::_Internal {
 public:
};

LogoutRequest::LogoutRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.LogoutRequest)
}
inline PROTOBUF_NDEBUG_INLINE LogoutRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : session_id_(arena, from.session_id_),
        _cached_size_{0} {}

LogoutRequest::LogoutRequest(
    ::google::protobuf::Arena* arena,
    const LogoutRequest& from)
    : ::google::protobuf::Message(arena) {
  LogoutRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.logout_all_devices_ = from._impl_.logout_all_devices_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.LogoutRequest)
}
inline PROTOBUF_NDEBUG_INLINE LogoutRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : session_id_(arena),
        _cached_size_{0} {}

inline void LogoutRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.logout_all_devices_ = {};
}
LogoutRequest::~LogoutRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.LogoutRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogoutRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.session_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LogoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.LogoutRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_.ClearToEmpty();
  _impl_.logout_all_devices_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogoutRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 39, 2> LogoutRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LogoutRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool logout_all_devices = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(LogoutRequest, _impl_.logout_all_devices_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LogoutRequest, _impl_.logout_all_devices_)}},
    // string session_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LogoutRequest, _impl_.session_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string session_id = 1;
    {PROTOBUF_FIELD_OFFSET(LogoutRequest, _impl_.session_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool logout_all_devices = 2;
    {PROTOBUF_FIELD_OFFSET(LogoutRequest, _impl_.logout_all_devices_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\24\12\0\0\0\0\0\0"
    "mmorpg.LogoutRequest"
    "session_id"
  }},
};

::uint8_t* LogoutRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.LogoutRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    const std::string& _s = this->_internal_session_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LogoutRequest.session_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bool logout_all_devices = 2;
  if (this->_internal_logout_all_devices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_logout_all_devices(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.LogoutRequest)
  return target;
}

::size_t LogoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.LogoutRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_session_id());
  }

  // bool logout_all_devices = 2;
  if (this->_internal_logout_all_devices() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LogoutRequest::_class_data_ = {
    LogoutRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LogoutRequest::GetClassData() const {
  return &_class_data_;
}

void LogoutRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LogoutRequest*>(&to_msg);
  auto& from = static_cast<const LogoutRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.LogoutRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (from._internal_logout_all_devices() != 0) {
    _this->_internal_set_logout_all_devices(from._internal_logout_all_devices());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutRequest::CopyFrom(const LogoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.LogoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogoutRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LogoutRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LogoutRequest::InternalSwap(LogoutRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, &other->_impl_.session_id_, arena);
        swap(_impl_.logout_all_devices_, other->_impl_.logout_all_devices_);
}

::google::protobuf::Metadata LogoutRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[5]);
}
// ===================================================================

class LogoutResponse::_Internal {
 public:
};

LogoutResponse::LogoutResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.LogoutResponse)
}
inline PROTOBUF_NDEBUG_INLINE LogoutResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_(arena, from.message_),
        _cached_size_{0} {}

LogoutResponse::LogoutResponse(
    ::google::protobuf::Arena* arena,
    const LogoutResponse& from)
    : ::google::protobuf::Message(arena) {
  LogoutResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.LogoutResponse)
}
inline PROTOBUF_NDEBUG_INLINE LogoutResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void LogoutResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
LogoutResponse::~LogoutResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.LogoutResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LogoutResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LogoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.LogoutResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LogoutResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 37, 2> LogoutResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LogoutResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LogoutResponse, _impl_.message_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(LogoutResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(LogoutResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(LogoutResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(LogoutResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\25\0\7\0\0\0\0\0"
    "mmorpg.LogoutResponse"
    "message"
  }},
};

::uint8_t* LogoutResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.LogoutResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LogoutResponse.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.LogoutResponse)
  return target;
}

::size_t LogoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.LogoutResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LogoutResponse::_class_data_ = {
    LogoutResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LogoutResponse::GetClassData() const {
  return &_class_data_;
}

void LogoutResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LogoutResponse*>(&to_msg);
  auto& from = static_cast<const LogoutResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.LogoutResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogoutResponse::CopyFrom(const LogoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.LogoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LogoutResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LogoutResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LogoutResponse::InternalSwap(LogoutResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata LogoutResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[6]);
}
// ===================================================================

class RefreshTokenRequest::_Internal {
 public:
};

RefreshTokenRequest::RefreshTokenRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.RefreshTokenRequest)
}
inline PROTOBUF_NDEBUG_INLINE RefreshTokenRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : refresh_token_(arena, from.refresh_token_),
        _cached_size_{0} {}

RefreshTokenRequest::RefreshTokenRequest(
    ::google::protobuf::Arena* arena,
    const RefreshTokenRequest& from)
    : ::google::protobuf::Message(arena) {
  RefreshTokenRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:mmorpg.RefreshTokenRequest)
}
inline PROTOBUF_NDEBUG_INLINE RefreshTokenRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : refresh_token_(arena),
        _cached_size_{0} {}

inline void RefreshTokenRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
RefreshTokenRequest::~RefreshTokenRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.RefreshTokenRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RefreshTokenRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.refresh_token_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RefreshTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.RefreshTokenRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.refresh_token_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RefreshTokenRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 48, 2> RefreshTokenRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RefreshTokenRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string refresh_token = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(RefreshTokenRequest, _impl_.refresh_token_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string refresh_token = 1;
    {PROTOBUF_FIELD_OFFSET(RefreshTokenRequest, _impl_.refresh_token_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\15\0\0\0\0\0\0"
    "mmorpg.RefreshTokenRequest"
    "refresh_token"
  }},
};

::uint8_t* RefreshTokenRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.RefreshTokenRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string refresh_token = 1;
  if (!this->_internal_refresh_token().empty()) {
    const std::string& _s = this->_internal_refresh_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RefreshTokenRequest.refresh_token");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.RefreshTokenRequest)
  return target;
}

::size_t RefreshTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.RefreshTokenRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string refresh_token = 1;
  if (!this->_internal_refresh_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_refresh_token());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RefreshTokenRequest::_class_data_ = {
    RefreshTokenRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RefreshTokenRequest::GetClassData() const {
  return &_class_data_;
}

void RefreshTokenRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RefreshTokenRequest*>(&to_msg);
  auto& from = static_cast<const RefreshTokenRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.RefreshTokenRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_refresh_token().empty()) {
    _this->_internal_set_refresh_token(from._internal_refresh_token());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RefreshTokenRequest::CopyFrom(const RefreshTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.RefreshTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RefreshTokenRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RefreshTokenRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RefreshTokenRequest::InternalSwap(RefreshTokenRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.refresh_token_, &other->_impl_.refresh_token_, arena);
}

::google::protobuf::Metadata RefreshTokenRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[7]);
}
// ===================================================================

class RefreshTokenResponse::_Internal {
 public:
};

RefreshTokenResponse::RefreshTokenResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.RefreshTokenResponse)
}
inline PROTOBUF_NDEBUG_INLINE RefreshTokenResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : access_token_(arena, from.access_token_),
        refresh_token_(arena, from.refresh_token_),
        error_message_(arena, from.error_message_),
        _cached_size_{0} {}

RefreshTokenResponse::RefreshTokenResponse(
    ::google::protobuf::Arena* arena,
    const RefreshTokenResponse& from)
    : ::google::protobuf::Message(arena) {
  RefreshTokenResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.RefreshTokenResponse)
}
inline PROTOBUF_NDEBUG_INLINE RefreshTokenResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : access_token_(arena),
        refresh_token_(arena),
        error_message_(arena),
        _cached_size_{0} {}

inline void RefreshTokenResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));
}
RefreshTokenResponse::~RefreshTokenResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.RefreshTokenResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void RefreshTokenResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.access_token_.Destroy();
  _impl_.refresh_token_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void RefreshTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.RefreshTokenResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.access_token_.ClearToEmpty();
  _impl_.refresh_token_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* RefreshTokenResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 74, 2> RefreshTokenResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_RefreshTokenResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(RefreshTokenResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.success_)}},
    // string access_token = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.access_token_)}},
    // string refresh_token = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.refresh_token_)}},
    // int32 expires_in = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RefreshTokenResponse, _impl_.expires_in_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.expires_in_)}},
    // string error_message = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.error_message_)}},
    // .mmorpg.ErrorCode error_code = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(RefreshTokenResponse, _impl_.error_code_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.error_code_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string access_token = 2;
    {PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.access_token_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string refresh_token = 3;
    {PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.refresh_token_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 expires_in = 4;
    {PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.expires_in_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string error_message = 5;
    {PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.error_message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 6;
    {PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.error_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\33\0\14\15\0\15\0\0"
    "mmorpg.RefreshTokenResponse"
    "access_token"
    "refresh_token"
    "error_message"
  }},
};

::uint8_t* RefreshTokenResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.RefreshTokenResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string access_token = 2;
  if (!this->_internal_access_token().empty()) {
    const std::string& _s = this->_internal_access_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RefreshTokenResponse.access_token");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string refresh_token = 3;
  if (!this->_internal_refresh_token().empty()) {
    const std::string& _s = this->_internal_refresh_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RefreshTokenResponse.refresh_token");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 expires_in = 4;
  if (this->_internal_expires_in() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_expires_in(), target);
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.RefreshTokenResponse.error_message");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 6;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.RefreshTokenResponse)
  return target;
}

::size_t RefreshTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.RefreshTokenResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string access_token = 2;
  if (!this->_internal_access_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_access_token());
  }

  // string refresh_token = 3;
  if (!this->_internal_refresh_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_refresh_token());
  }

  // string error_message = 5;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // int32 expires_in = 4;
  if (this->_internal_expires_in() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_expires_in());
  }

  // .mmorpg.ErrorCode error_code = 6;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData RefreshTokenResponse::_class_data_ = {
    RefreshTokenResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* RefreshTokenResponse::GetClassData() const {
  return &_class_data_;
}

void RefreshTokenResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<RefreshTokenResponse*>(&to_msg);
  auto& from = static_cast<const RefreshTokenResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.RefreshTokenResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_access_token().empty()) {
    _this->_internal_set_access_token(from._internal_access_token());
  }
  if (!from._internal_refresh_token().empty()) {
    _this->_internal_set_refresh_token(from._internal_refresh_token());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_expires_in() != 0) {
    _this->_internal_set_expires_in(from._internal_expires_in());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void RefreshTokenResponse::CopyFrom(const RefreshTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.RefreshTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool RefreshTokenResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* RefreshTokenResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void RefreshTokenResponse::InternalSwap(RefreshTokenResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.access_token_, &other->_impl_.access_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.refresh_token_, &other->_impl_.refresh_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.error_code_)
      + sizeof(RefreshTokenResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(RefreshTokenResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::google::protobuf::Metadata RefreshTokenResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[8]);
}
// ===================================================================

class PasswordResetRequest::_Internal {
 public:
};

PasswordResetRequest::PasswordResetRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.PasswordResetRequest)
}
inline PROTOBUF_NDEBUG_INLINE PasswordResetRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : email_(arena, from.email_),
        _cached_size_{0} {}

PasswordResetRequest::PasswordResetRequest(
    ::google::protobuf::Arena* arena,
    const PasswordResetRequest& from)
    : ::google::protobuf::Message(arena) {
  PasswordResetRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:mmorpg.PasswordResetRequest)
}
inline PROTOBUF_NDEBUG_INLINE PasswordResetRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : email_(arena),
        _cached_size_{0} {}

inline void PasswordResetRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
PasswordResetRequest::~PasswordResetRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.PasswordResetRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PasswordResetRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.email_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PasswordResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.PasswordResetRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.email_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PasswordResetRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 41, 2> PasswordResetRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PasswordResetRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string email = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PasswordResetRequest, _impl_.email_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string email = 1;
    {PROTOBUF_FIELD_OFFSET(PasswordResetRequest, _impl_.email_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\5\0\0\0\0\0\0"
    "mmorpg.PasswordResetRequest"
    "email"
  }},
};

::uint8_t* PasswordResetRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.PasswordResetRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    const std::string& _s = this->_internal_email();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.PasswordResetRequest.email");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.PasswordResetRequest)
  return target;
}

::size_t PasswordResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.PasswordResetRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string email = 1;
  if (!this->_internal_email().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_email());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PasswordResetRequest::_class_data_ = {
    PasswordResetRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PasswordResetRequest::GetClassData() const {
  return &_class_data_;
}

void PasswordResetRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PasswordResetRequest*>(&to_msg);
  auto& from = static_cast<const PasswordResetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.PasswordResetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PasswordResetRequest::CopyFrom(const PasswordResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.PasswordResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PasswordResetRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PasswordResetRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PasswordResetRequest::InternalSwap(PasswordResetRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, &other->_impl_.email_, arena);
}

::google::protobuf::Metadata PasswordResetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[9]);
}
// ===================================================================

class PasswordResetResponse::_Internal {
 public:
};

PasswordResetResponse::PasswordResetResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.PasswordResetResponse)
}
inline PROTOBUF_NDEBUG_INLINE PasswordResetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_(arena, from.message_),
        _cached_size_{0} {}

PasswordResetResponse::PasswordResetResponse(
    ::google::protobuf::Arena* arena,
    const PasswordResetResponse& from)
    : ::google::protobuf::Message(arena) {
  PasswordResetResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.PasswordResetResponse)
}
inline PROTOBUF_NDEBUG_INLINE PasswordResetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void PasswordResetResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
PasswordResetResponse::~PasswordResetResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.PasswordResetResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PasswordResetResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PasswordResetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.PasswordResetResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PasswordResetResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 44, 2> PasswordResetResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_PasswordResetResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PasswordResetResponse, _impl_.message_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PasswordResetResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PasswordResetResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(PasswordResetResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(PasswordResetResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\0\7\0\0\0\0\0"
    "mmorpg.PasswordResetResponse"
    "message"
  }},
};

::uint8_t* PasswordResetResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.PasswordResetResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.PasswordResetResponse.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.PasswordResetResponse)
  return target;
}

::size_t PasswordResetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.PasswordResetResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PasswordResetResponse::_class_data_ = {
    PasswordResetResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PasswordResetResponse::GetClassData() const {
  return &_class_data_;
}

void PasswordResetResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PasswordResetResponse*>(&to_msg);
  auto& from = static_cast<const PasswordResetResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.PasswordResetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PasswordResetResponse::CopyFrom(const PasswordResetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.PasswordResetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PasswordResetResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PasswordResetResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PasswordResetResponse::InternalSwap(PasswordResetResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata PasswordResetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[10]);
}
// ===================================================================

class ChangePasswordRequest::_Internal {
 public:
};

ChangePasswordRequest::ChangePasswordRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChangePasswordRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChangePasswordRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : current_password_(arena, from.current_password_),
        new_password_(arena, from.new_password_),
        session_id_(arena, from.session_id_),
        _cached_size_{0} {}

ChangePasswordRequest::ChangePasswordRequest(
    ::google::protobuf::Arena* arena,
    const ChangePasswordRequest& from)
    : ::google::protobuf::Message(arena) {
  ChangePasswordRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChangePasswordRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChangePasswordRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : current_password_(arena),
        new_password_(arena),
        session_id_(arena),
        _cached_size_{0} {}

inline void ChangePasswordRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ChangePasswordRequest::~ChangePasswordRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.ChangePasswordRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChangePasswordRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.current_password_.Destroy();
  _impl_.new_password_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChangePasswordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChangePasswordRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.current_password_.ClearToEmpty();
  _impl_.new_password_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChangePasswordRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 75, 2> ChangePasswordRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChangePasswordRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string current_password = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChangePasswordRequest, _impl_.current_password_)}},
    // string new_password = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ChangePasswordRequest, _impl_.new_password_)}},
    // string session_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChangePasswordRequest, _impl_.session_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string current_password = 1;
    {PROTOBUF_FIELD_OFFSET(ChangePasswordRequest, _impl_.current_password_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string new_password = 2;
    {PROTOBUF_FIELD_OFFSET(ChangePasswordRequest, _impl_.new_password_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string session_id = 3;
    {PROTOBUF_FIELD_OFFSET(ChangePasswordRequest, _impl_.session_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\20\14\12\0\0\0\0"
    "mmorpg.ChangePasswordRequest"
    "current_password"
    "new_password"
    "session_id"
  }},
};

::uint8_t* ChangePasswordRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChangePasswordRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string current_password = 1;
  if (!this->_internal_current_password().empty()) {
    const std::string& _s = this->_internal_current_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChangePasswordRequest.current_password");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    const std::string& _s = this->_internal_new_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChangePasswordRequest.new_password");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string session_id = 3;
  if (!this->_internal_session_id().empty()) {
    const std::string& _s = this->_internal_session_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChangePasswordRequest.session_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChangePasswordRequest)
  return target;
}

::size_t ChangePasswordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChangePasswordRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string current_password = 1;
  if (!this->_internal_current_password().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_current_password());
  }

  // string new_password = 2;
  if (!this->_internal_new_password().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_new_password());
  }

  // string session_id = 3;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_session_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChangePasswordRequest::_class_data_ = {
    ChangePasswordRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChangePasswordRequest::GetClassData() const {
  return &_class_data_;
}

void ChangePasswordRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChangePasswordRequest*>(&to_msg);
  auto& from = static_cast<const ChangePasswordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChangePasswordRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_current_password().empty()) {
    _this->_internal_set_current_password(from._internal_current_password());
  }
  if (!from._internal_new_password().empty()) {
    _this->_internal_set_new_password(from._internal_new_password());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChangePasswordRequest::CopyFrom(const ChangePasswordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChangePasswordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChangePasswordRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChangePasswordRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChangePasswordRequest::InternalSwap(ChangePasswordRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_password_, &other->_impl_.current_password_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.new_password_, &other->_impl_.new_password_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, &other->_impl_.session_id_, arena);
}

::google::protobuf::Metadata ChangePasswordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[11]);
}
// ===================================================================

class ChangePasswordResponse::_Internal {
 public:
};

ChangePasswordResponse::ChangePasswordResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChangePasswordResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChangePasswordResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_(arena, from.message_),
        _cached_size_{0} {}

ChangePasswordResponse::ChangePasswordResponse(
    ::google::protobuf::Arena* arena,
    const ChangePasswordResponse& from)
    : ::google::protobuf::Message(arena) {
  ChangePasswordResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChangePasswordResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChangePasswordResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void ChangePasswordResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));
}
ChangePasswordResponse::~ChangePasswordResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.ChangePasswordResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChangePasswordResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChangePasswordResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChangePasswordResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChangePasswordResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 45, 2> ChangePasswordResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChangePasswordResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChangePasswordResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ChangePasswordResponse, _impl_.success_)}},
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ChangePasswordResponse, _impl_.message_)}},
    // .mmorpg.ErrorCode error_code = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChangePasswordResponse, _impl_.error_code_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ChangePasswordResponse, _impl_.error_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(ChangePasswordResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(ChangePasswordResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 3;
    {PROTOBUF_FIELD_OFFSET(ChangePasswordResponse, _impl_.error_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\35\0\7\0\0\0\0\0"
    "mmorpg.ChangePasswordResponse"
    "message"
  }},
};

::uint8_t* ChangePasswordResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChangePasswordResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChangePasswordResponse.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 3;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChangePasswordResponse)
  return target;
}

::size_t ChangePasswordResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChangePasswordResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // .mmorpg.ErrorCode error_code = 3;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChangePasswordResponse::_class_data_ = {
    ChangePasswordResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChangePasswordResponse::GetClassData() const {
  return &_class_data_;
}

void ChangePasswordResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChangePasswordResponse*>(&to_msg);
  auto& from = static_cast<const ChangePasswordResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChangePasswordResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChangePasswordResponse::CopyFrom(const ChangePasswordResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChangePasswordResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChangePasswordResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChangePasswordResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChangePasswordResponse::InternalSwap(ChangePasswordResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChangePasswordResponse, _impl_.error_code_)
      + sizeof(ChangePasswordResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(ChangePasswordResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::google::protobuf::Metadata ChangePasswordResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[12]);
}
// ===================================================================

class UserInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<UserInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UserInfo, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& created_at(const UserInfo* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& last_login(const UserInfo* msg);
  static void set_has_last_login(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Timestamp& premium_expires(const UserInfo* msg);
  static void set_has_premium_expires(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::google::protobuf::Timestamp& UserInfo::_Internal::created_at(const UserInfo* msg) {
  return *msg->_impl_.created_at_;
}
const ::google::protobuf::Timestamp& UserInfo::_Internal::last_login(const UserInfo* msg) {
  return *msg->_impl_.last_login_;
}
const ::google::protobuf::Timestamp& UserInfo::_Internal::premium_expires(const UserInfo* msg) {
  return *msg->_impl_.premium_expires_;
}
void UserInfo::clear_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UserInfo::clear_last_login() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_login_ != nullptr) _impl_.last_login_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void UserInfo::clear_premium_expires() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.premium_expires_ != nullptr) _impl_.premium_expires_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
UserInfo::UserInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.UserInfo)
}
inline PROTOBUF_NDEBUG_INLINE UserInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        roles_{visibility, arena, from.roles_},
        user_id_(arena, from.user_id_),
        email_(arena, from.email_),
        username_(arena, from.username_) {}

UserInfo::UserInfo(
    ::google::protobuf::Arena* arena,
    const UserInfo& from)
    : ::google::protobuf::Message(arena) {
  UserInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.created_at_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_)
                : nullptr;
  _impl_.last_login_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_login_)
                : nullptr;
  _impl_.premium_expires_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.premium_expires_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, account_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, account_status_),
           offsetof(Impl_, character_count_) -
               offsetof(Impl_, account_status_) +
               sizeof(Impl_::character_count_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.UserInfo)
}
inline PROTOBUF_NDEBUG_INLINE UserInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        roles_{visibility, arena},
        user_id_(arena),
        email_(arena),
        username_(arena) {}

inline void UserInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_at_),
           0,
           offsetof(Impl_, character_count_) -
               offsetof(Impl_, created_at_) +
               sizeof(Impl_::character_count_));
}
UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:mmorpg.UserInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UserInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.user_id_.Destroy();
  _impl_.email_.Destroy();
  _impl_.username_.Destroy();
  delete _impl_.created_at_;
  delete _impl_.last_login_;
  delete _impl_.premium_expires_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.UserInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roles_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.last_login_ != nullptr);
      _impl_.last_login_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.premium_expires_ != nullptr);
      _impl_.premium_expires_->Clear();
    }
  }
  ::memset(&_impl_.account_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.character_count_) -
      reinterpret_cast<char*>(&_impl_.account_status_)) + sizeof(_impl_.character_count_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 3, 57, 2> UserInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UserInfo, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_UserInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string user_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.user_id_)}},
    // string email = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.email_)}},
    // string username = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.username_)}},
    // .google.protobuf.Timestamp created_at = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.created_at_)}},
    // .google.protobuf.Timestamp last_login = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.last_login_)}},
    // bool email_verified = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(UserInfo, _impl_.email_verified_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.email_verified_)}},
    // .mmorpg.AccountStatus account_status = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UserInfo, _impl_.account_status_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.account_status_)}},
    // repeated string roles = 8;
    {::_pbi::TcParser::FastUR1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.roles_)}},
    // int32 max_characters = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UserInfo, _impl_.max_characters_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.max_characters_)}},
    // int32 character_count = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UserInfo, _impl_.character_count_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.character_count_)}},
    // bool is_premium = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(UserInfo, _impl_.is_premium_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.is_premium_)}},
    // .google.protobuf.Timestamp premium_expires = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 2, 2, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.premium_expires_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string user_id = 1;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.user_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string email = 2;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.email_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string username = 3;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.username_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp created_at = 4;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.created_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_login = 5;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.last_login_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool email_verified = 6;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.email_verified_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .mmorpg.AccountStatus account_status = 7;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.account_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated string roles = 8;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.roles_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // int32 max_characters = 9;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.max_characters_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 character_count = 10;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.character_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_premium = 11;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.is_premium_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp premium_expires = 12;
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.premium_expires_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\17\7\5\10\0\0\0\0\5\0\0\0\0\0\0\0"
    "mmorpg.UserInfo"
    "user_id"
    "email"
    "username"
    "roles"
  }},
};

::uint8_t* UserInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.UserInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.UserInfo.user_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    const std::string& _s = this->_internal_email();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.UserInfo.email");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string username = 3;
  if (!this->_internal_username().empty()) {
    const std::string& _s = this->_internal_username();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.UserInfo.username");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp created_at = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_login = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::last_login(this),
        _Internal::last_login(this).GetCachedSize(), target, stream);
  }

  // bool email_verified = 6;
  if (this->_internal_email_verified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_email_verified(), target);
  }

  // .mmorpg.AccountStatus account_status = 7;
  if (this->_internal_account_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_account_status(), target);
  }

  // repeated string roles = 8;
  for (int i = 0, n = this->_internal_roles_size(); i < n; ++i) {
    const auto& s = this->_internal_roles().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.UserInfo.roles");
    target = stream->WriteString(8, s, target);
  }

  // int32 max_characters = 9;
  if (this->_internal_max_characters() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_max_characters(), target);
  }

  // int32 character_count = 10;
  if (this->_internal_character_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_character_count(), target);
  }

  // bool is_premium = 11;
  if (this->_internal_is_premium() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_is_premium(), target);
  }

  // .google.protobuf.Timestamp premium_expires = 12;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, _Internal::premium_expires(this),
        _Internal::premium_expires(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.UserInfo)
  return target;
}

::size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.UserInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 8;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_roles().size());
  for (int i = 0, n = _internal_roles().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_roles().Get(i));
  }
  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string email = 2;
  if (!this->_internal_email().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_email());
  }

  // string username = 3;
  if (!this->_internal_username().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_username());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Timestamp created_at = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.created_at_);
    }

    // .google.protobuf.Timestamp last_login = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_login_);
    }

    // .google.protobuf.Timestamp premium_expires = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.premium_expires_);
    }

  }
  // .mmorpg.AccountStatus account_status = 7;
  if (this->_internal_account_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_account_status());
  }

  // bool email_verified = 6;
  if (this->_internal_email_verified() != 0) {
    total_size += 2;
  }

  // bool is_premium = 11;
  if (this->_internal_is_premium() != 0) {
    total_size += 2;
  }

  // int32 max_characters = 9;
  if (this->_internal_max_characters() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_characters());
  }

  // int32 character_count = 10;
  if (this->_internal_character_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_character_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData UserInfo::_class_data_ = {
    UserInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* UserInfo::GetClassData() const {
  return &_class_data_;
}

void UserInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.UserInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_roles()->MergeFrom(from._internal_roles());
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_created_at());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_last_login()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_last_login());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_premium_expires()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_premium_expires());
    }
  }
  if (from._internal_account_status() != 0) {
    _this->_internal_set_account_status(from._internal_account_status());
  }
  if (from._internal_email_verified() != 0) {
    _this->_internal_set_email_verified(from._internal_email_verified());
  }
  if (from._internal_is_premium() != 0) {
    _this->_internal_set_is_premium(from._internal_is_premium());
  }
  if (from._internal_max_characters() != 0) {
    _this->_internal_set_max_characters(from._internal_max_characters());
  }
  if (from._internal_character_count() != 0) {
    _this->_internal_set_character_count(from._internal_character_count());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool UserInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* UserInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void UserInfo::InternalSwap(UserInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.roles_.InternalSwap(&other->_impl_.roles_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, &other->_impl_.user_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, &other->_impl_.email_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, &other->_impl_.username_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.character_count_)
      + sizeof(UserInfo::_impl_.character_count_)
      - PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[13]);
}
// ===================================================================

class SessionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& created_at(const SessionInfo* msg);
  static void set_has_created_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& last_active(const SessionInfo* msg);
  static void set_has_last_active(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::google::protobuf::Timestamp& expires_at(const SessionInfo* msg);
  static void set_has_expires_at(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::google::protobuf::Timestamp& SessionInfo::_Internal::created_at(const SessionInfo* msg) {
  return *msg->_impl_.created_at_;
}
const ::google::protobuf::Timestamp& SessionInfo::_Internal::last_active(const SessionInfo* msg) {
  return *msg->_impl_.last_active_;
}
const ::google::protobuf::Timestamp& SessionInfo::_Internal::expires_at(const SessionInfo* msg) {
  return *msg->_impl_.expires_at_;
}
void SessionInfo::clear_created_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void SessionInfo::clear_last_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.last_active_ != nullptr) _impl_.last_active_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void SessionInfo::clear_expires_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.expires_at_ != nullptr) _impl_.expires_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
SessionInfo::SessionInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.SessionInfo)
}
inline PROTOBUF_NDEBUG_INLINE SessionInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        session_id_(arena, from.session_id_),
        user_id_(arena, from.user_id_),
        device_id_(arena, from.device_id_),
        ip_address_(arena, from.ip_address_),
        user_agent_(arena, from.user_agent_) {}

SessionInfo::SessionInfo(
    ::google::protobuf::Arena* arena,
    const SessionInfo& from)
    : ::google::protobuf::Message(arena) {
  SessionInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.created_at_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_)
                : nullptr;
  _impl_.last_active_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.last_active_)
                : nullptr;
  _impl_.expires_at_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.expires_at_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mmorpg.SessionInfo)
}
inline PROTOBUF_NDEBUG_INLINE SessionInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        session_id_(arena),
        user_id_(arena),
        device_id_(arena),
        ip_address_(arena),
        user_agent_(arena) {}

inline void SessionInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_at_),
           0,
           offsetof(Impl_, expires_at_) -
               offsetof(Impl_, created_at_) +
               sizeof(Impl_::expires_at_));
}
SessionInfo::~SessionInfo() {
  // @@protoc_insertion_point(destructor:mmorpg.SessionInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SessionInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.session_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.device_id_.Destroy();
  _impl_.ip_address_.Destroy();
  _impl_.user_agent_.Destroy();
  delete _impl_.created_at_;
  delete _impl_.last_active_;
  delete _impl_.expires_at_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SessionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.SessionInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.device_id_.ClearToEmpty();
  _impl_.ip_address_.ClearToEmpty();
  _impl_.user_agent_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.last_active_ != nullptr);
      _impl_.last_active_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.expires_at_ != nullptr);
      _impl_.expires_at_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SessionInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 3, 81, 2> SessionInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SessionInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .google.protobuf.Timestamp expires_at = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 2, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.expires_at_)}},
    // string session_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.session_id_)}},
    // string user_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.user_id_)}},
    // string device_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.device_id_)}},
    // string ip_address = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.ip_address_)}},
    // string user_agent = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.user_agent_)}},
    // .google.protobuf.Timestamp created_at = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.created_at_)}},
    // .google.protobuf.Timestamp last_active = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.last_active_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string session_id = 1;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.session_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string user_id = 2;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.user_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string device_id = 3;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.device_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ip_address = 4;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.ip_address_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string user_agent = 5;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.user_agent_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp created_at = 6;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.created_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_active = 7;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.last_active_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp expires_at = 8;
    {PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.expires_at_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\22\12\7\11\12\12\0\0\0\0\0\0\0\0\0\0"
    "mmorpg.SessionInfo"
    "session_id"
    "user_id"
    "device_id"
    "ip_address"
    "user_agent"
  }},
};

::uint8_t* SessionInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.SessionInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    const std::string& _s = this->_internal_session_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.SessionInfo.session_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.SessionInfo.user_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string device_id = 3;
  if (!this->_internal_device_id().empty()) {
    const std::string& _s = this->_internal_device_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.SessionInfo.device_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string ip_address = 4;
  if (!this->_internal_ip_address().empty()) {
    const std::string& _s = this->_internal_ip_address();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.SessionInfo.ip_address");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string user_agent = 5;
  if (!this->_internal_user_agent().empty()) {
    const std::string& _s = this->_internal_user_agent();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.SessionInfo.user_agent");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp created_at = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::created_at(this),
        _Internal::created_at(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_active = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::last_active(this),
        _Internal::last_active(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp expires_at = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, _Internal::expires_at(this),
        _Internal::expires_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.SessionInfo)
  return target;
}

::size_t SessionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.SessionInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_session_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string device_id = 3;
  if (!this->_internal_device_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_device_id());
  }

  // string ip_address = 4;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ip_address());
  }

  // string user_agent = 5;
  if (!this->_internal_user_agent().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_user_agent());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .google.protobuf.Timestamp created_at = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.created_at_);
    }

    // .google.protobuf.Timestamp last_active = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.last_active_);
    }

    // .google.protobuf.Timestamp expires_at = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.expires_at_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SessionInfo::_class_data_ = {
    SessionInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SessionInfo::GetClassData() const {
  return &_class_data_;
}

void SessionInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SessionInfo*>(&to_msg);
  auto& from = static_cast<const SessionInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.SessionInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_user_agent().empty()) {
    _this->_internal_set_user_agent(from._internal_user_agent());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_created_at()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_created_at());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_last_active()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_last_active());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_expires_at()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_expires_at());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SessionInfo::CopyFrom(const SessionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.SessionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SessionInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SessionInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SessionInfo::InternalSwap(SessionInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, &other->_impl_.session_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, &other->_impl_.user_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_id_, &other->_impl_.device_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_address_, &other->_impl_.ip_address_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_agent_, &other->_impl_.user_agent_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.expires_at_)
      + sizeof(SessionInfo::_impl_.expires_at_)
      - PROTOBUF_FIELD_OFFSET(SessionInfo, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::google::protobuf::Metadata SessionInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_auth_2eproto_getter, &descriptor_table_auth_2eproto_once,
      file_level_metadata_auth_2eproto[14]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace mmorpg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
