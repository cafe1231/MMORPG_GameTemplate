// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#include "base.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mmorpg {

inline constexpr Vector3::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        z_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Vector3::Vector3(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;

inline constexpr Rotation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : yaw_{0},
        pitch_{0},
        roll_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Rotation::Rotation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct RotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotationDefaultTypeInternal() {}
  union {
    Rotation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotationDefaultTypeInternal _Rotation_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR ErrorResponse_DetailsEntry_DoNotUse::ErrorResponse_DetailsEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct ErrorResponse_DetailsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorResponse_DetailsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorResponse_DetailsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ErrorResponse_DetailsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorResponse_DetailsEntry_DoNotUseDefaultTypeInternal _ErrorResponse_DetailsEntry_DoNotUse_default_instance_;

inline constexpr Transform::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        position_{nullptr},
        rotation_{nullptr},
        scale_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Transform::Transform(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformDefaultTypeInternal _Transform_default_instance_;

inline constexpr GameMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        payload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        version_{0u},
        sequence_{0u},
        type_{static_cast< ::mmorpg::MessageType >(0)},
        ack_sequence_{0u},
        requires_ack_{false} {}

template <typename>
PROTOBUF_CONSTEXPR GameMessage::GameMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GameMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameMessageDefaultTypeInternal() {}
  union {
    GameMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameMessageDefaultTypeInternal _GameMessage_default_instance_;

inline constexpr ErrorResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : details_{},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        code_{static_cast< ::mmorpg::ErrorCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ErrorResponse::ErrorResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ErrorResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorResponseDefaultTypeInternal() {}
  union {
    ErrorResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorResponseDefaultTypeInternal _ErrorResponse_default_instance_;
}  // namespace mmorpg
static ::_pb::Metadata file_level_metadata_base_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_base_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_base_2eproto = nullptr;
const ::uint32_t TableStruct_base_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::mmorpg::GameMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::GameMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::GameMessage, _impl_.version_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::GameMessage, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::GameMessage, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::GameMessage, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::GameMessage, _impl_.payload_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::GameMessage, _impl_.ack_sequence_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::GameMessage, _impl_.requires_ack_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    1,
    2,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::Vector3, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::Vector3, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::Vector3, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::Vector3, _impl_.z_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::Rotation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::Rotation, _impl_.yaw_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::Rotation, _impl_.pitch_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::Rotation, _impl_.roll_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::Transform, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::Transform, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::Transform, _impl_.position_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::Transform, _impl_.rotation_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::Transform, _impl_.scale_),
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::mmorpg::ErrorResponse_DetailsEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ErrorResponse_DetailsEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ErrorResponse_DetailsEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ErrorResponse_DetailsEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ErrorResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ErrorResponse, _impl_.code_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ErrorResponse, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ErrorResponse, _impl_.details_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 15, -1, sizeof(::mmorpg::GameMessage)},
        {22, -1, -1, sizeof(::mmorpg::Vector3)},
        {33, -1, -1, sizeof(::mmorpg::Rotation)},
        {44, 55, -1, sizeof(::mmorpg::Transform)},
        {58, 68, -1, sizeof(::mmorpg::ErrorResponse_DetailsEntry_DoNotUse)},
        {70, -1, -1, sizeof(::mmorpg::ErrorResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mmorpg::_GameMessage_default_instance_._instance,
    &::mmorpg::_Vector3_default_instance_._instance,
    &::mmorpg::_Rotation_default_instance_._instance,
    &::mmorpg::_Transform_default_instance_._instance,
    &::mmorpg::_ErrorResponse_DetailsEntry_DoNotUse_default_instance_._instance,
    &::mmorpg::_ErrorResponse_default_instance_._instance,
};
const char descriptor_table_protodef_base_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nbase.proto\022\006mmorpg\032\037google/protobuf/ti"
    "mestamp.proto\"\353\001\n\013GameMessage\022\017\n\007version"
    "\030\001 \001(\r\022\020\n\010sequence\030\002 \001(\r\022-\n\ttimestamp\030\003 "
    "\001(\0132\032.google.protobuf.Timestamp\022!\n\004type\030"
    "\004 \001(\0162\023.mmorpg.MessageType\022\017\n\007payload\030\005 "
    "\001(\014\022\031\n\014ack_sequence\030\006 \001(\rH\000\210\001\001\022\031\n\014requir"
    "es_ack\030\007 \001(\010H\001\210\001\001B\017\n\r_ack_sequenceB\017\n\r_r"
    "equires_ack\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002"
    " \001(\002\022\t\n\001z\030\003 \001(\002\"4\n\010Rotation\022\013\n\003yaw\030\001 \001(\002"
    "\022\r\n\005pitch\030\002 \001(\002\022\014\n\004roll\030\003 \001(\002\"r\n\tTransfo"
    "rm\022!\n\010position\030\001 \001(\0132\017.mmorpg.Vector3\022\"\n"
    "\010rotation\030\002 \001(\0132\020.mmorpg.Rotation\022\036\n\005sca"
    "le\030\003 \001(\0132\017.mmorpg.Vector3\"\246\001\n\rErrorRespo"
    "nse\022\037\n\004code\030\001 \001(\0162\021.mmorpg.ErrorCode\022\017\n\007"
    "message\030\002 \001(\t\0223\n\007details\030\003 \003(\0132\".mmorpg."
    "ErrorResponse.DetailsEntry\032.\n\014DetailsEnt"
    "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001*\222\r\n\013M"
    "essageType\022\034\n\030MESSAGE_TYPE_UNSPECIFIED\020\000"
    "\022#\n\037MESSAGE_TYPE_AUTH_LOGIN_REQUEST\020\001\022$\n"
    " MESSAGE_TYPE_AUTH_LOGIN_RESPONSE\020\002\022&\n\"M"
    "ESSAGE_TYPE_AUTH_REGISTER_REQUEST\020\003\022\'\n#M"
    "ESSAGE_TYPE_AUTH_REGISTER_RESPONSE\020\004\022$\n "
    "MESSAGE_TYPE_AUTH_LOGOUT_REQUEST\020\005\022%\n!ME"
    "SSAGE_TYPE_AUTH_LOGOUT_RESPONSE\020\006\022+\n\'MES"
    "SAGE_TYPE_AUTH_REFRESH_TOKEN_REQUEST\020\007\022,"
    "\n(MESSAGE_TYPE_AUTH_REFRESH_TOKEN_RESPON"
    "SE\020\010\022\'\n#MESSAGE_TYPE_CHARACTER_LIST_REQU"
    "EST\020d\022(\n$MESSAGE_TYPE_CHARACTER_LIST_RES"
    "PONSE\020e\022)\n%MESSAGE_TYPE_CHARACTER_CREATE"
    "_REQUEST\020f\022*\n&MESSAGE_TYPE_CHARACTER_CRE"
    "ATE_RESPONSE\020g\022)\n%MESSAGE_TYPE_CHARACTER"
    "_DELETE_REQUEST\020h\022*\n&MESSAGE_TYPE_CHARAC"
    "TER_DELETE_RESPONSE\020i\022)\n%MESSAGE_TYPE_CH"
    "ARACTER_SELECT_REQUEST\020j\022*\n&MESSAGE_TYPE"
    "_CHARACTER_SELECT_RESPONSE\020k\022%\n MESSAGE_"
    "TYPE_WORLD_ENTER_REQUEST\020\310\001\022&\n!MESSAGE_T"
    "YPE_WORLD_ENTER_RESPONSE\020\311\001\022%\n MESSAGE_T"
    "YPE_WORLD_LEAVE_REQUEST\020\312\001\022&\n!MESSAGE_TY"
    "PE_WORLD_LEAVE_RESPONSE\020\313\001\022\'\n\"MESSAGE_TY"
    "PE_WORLD_POSITION_UPDATE\020\314\001\022#\n\036MESSAGE_T"
    "YPE_WORLD_AREA_UPDATE\020\315\001\022$\n\037MESSAGE_TYPE"
    "_WORLD_ENTITY_SPAWN\020\316\001\022&\n!MESSAGE_TYPE_W"
    "ORLD_ENTITY_DESPAWN\020\317\001\022%\n MESSAGE_TYPE_G"
    "AME_ACTION_REQUEST\020\254\002\022&\n!MESSAGE_TYPE_GA"
    "ME_ACTION_RESPONSE\020\255\002\022\'\n\"MESSAGE_TYPE_GA"
    "ME_INVENTORY_UPDATE\020\256\002\022#\n\036MESSAGE_TYPE_G"
    "AME_STATS_UPDATE\020\257\002\022#\n\036MESSAGE_TYPE_GAME"
    "_QUEST_UPDATE\020\260\002\022$\n\037MESSAGE_TYPE_GAME_CO"
    "MBAT_ACTION\020\261\002\022$\n\037MESSAGE_TYPE_GAME_COMB"
    "AT_RESULT\020\262\002\022\036\n\031MESSAGE_TYPE_CHAT_MESSAG"
    "E\020\220\003\022\036\n\031MESSAGE_TYPE_CHAT_WHISPER\020\221\003\022#\n\036"
    "MESSAGE_TYPE_CHAT_CHANNEL_JOIN\020\222\003\022$\n\037MES"
    "SAGE_TYPE_CHAT_CHANNEL_LEAVE\020\223\003\022#\n\036MESSA"
    "GE_TYPE_CHAT_CHANNEL_LIST\020\224\003\022\035\n\030MESSAGE_"
    "TYPE_SYSTEM_PING\020\364\003\022\035\n\030MESSAGE_TYPE_SYST"
    "EM_PONG\020\365\003\022\036\n\031MESSAGE_TYPE_SYSTEM_ERROR\020"
    "\366\003\022%\n MESSAGE_TYPE_SYSTEM_NOTIFICATION\020\367"
    "\003\022$\n\037MESSAGE_TYPE_SYSTEM_MAINTENANCE\020\370\003\022"
    "&\n!MESSAGE_TYPE_SYSTEM_VERSION_CHECK\020\371\003*"
    "\206\005\n\tErrorCode\022\032\n\026ERROR_CODE_UNSPECIFIED\020"
    "\000\022\036\n\032ERROR_CODE_INVALID_REQUEST\020\001\022\033\n\027ERR"
    "OR_CODE_UNAUTHORIZED\020\002\022\030\n\024ERROR_CODE_FOR"
    "BIDDEN\020\003\022\030\n\024ERROR_CODE_NOT_FOUND\020\004\022\035\n\031ER"
    "ROR_CODE_ALREADY_EXISTS\020\005\022\033\n\027ERROR_CODE_"
    "RATE_LIMITED\020\006\022\033\n\027ERROR_CODE_SERVER_ERRO"
    "R\020\007\022\"\n\036ERROR_CODE_SERVICE_UNAVAILABLE\020\010\022"
    "\026\n\022ERROR_CODE_TIMEOUT\020\t\022\"\n\036ERROR_CODE_IN"
    "VALID_CREDENTIALS\020\n\022\035\n\031ERROR_CODE_ACCOUN"
    "T_LOCKED\020\013\022&\n\"ERROR_CODE_CHARACTER_LIMIT"
    "_REACHED\020\014\022%\n!ERROR_CODE_INVALID_CHARACT"
    "ER_NAME\020\r\022\031\n\025ERROR_CODE_WORLD_FULL\020\016\022\035\n\031"
    "ERROR_CODE_INVALID_ACTION\020\017\022%\n!ERROR_COD"
    "E_INSUFFICIENT_RESOURCES\020\020\022\035\n\031ERROR_CODE"
    "_INVENTORY_FULL\020\021\022\"\n\036ERROR_CODE_QUEST_NO"
    "T_AVAILABLE\020\022\022!\n\035ERROR_CODE_COMBAT_NOT_A"
    "LLOWED\020\023B.Z,github.com/mmorpg-template/b"
    "ackend/pkg/protob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_base_2eproto_deps[1] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_base_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_base_2eproto = {
    false,
    false,
    3064,
    descriptor_table_protodef_base_2eproto,
    "base.proto",
    &descriptor_table_base_2eproto_once,
    descriptor_table_base_2eproto_deps,
    1,
    6,
    schemas,
    file_default_instances,
    TableStruct_base_2eproto::offsets,
    file_level_metadata_base_2eproto,
    file_level_enum_descriptors_base_2eproto,
    file_level_service_descriptors_base_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_base_2eproto_getter() {
  return &descriptor_table_base_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_base_2eproto(&descriptor_table_base_2eproto);
namespace mmorpg {
const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_base_2eproto);
  return file_level_enum_descriptors_base_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MessageType_internal_data_[] = {
    589824u, 512u, 0u, 0u, 4160749568u, 7u, 0u, 2147483648u, 127u, 0u, 0u, 1016u, 0u, 0u, 3968u, 0u, 0u, 129024u, };
bool MessageType_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, MessageType_internal_data_);
}
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_base_2eproto);
  return file_level_enum_descriptors_base_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ErrorCode_internal_data_[] = {
    1310720u, 0u, };
bool ErrorCode_IsValid(int value) {
  return 0 <= value && value <= 19;
}
// ===================================================================

class GameMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<GameMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GameMessage, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const GameMessage* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ack_sequence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_requires_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::google::protobuf::Timestamp& GameMessage::_Internal::timestamp(const GameMessage* msg) {
  return *msg->_impl_.timestamp_;
}
void GameMessage::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GameMessage::GameMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.GameMessage)
}
inline PROTOBUF_NDEBUG_INLINE GameMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        payload_(arena, from.payload_) {}

GameMessage::GameMessage(
    ::google::protobuf::Arena* arena,
    const GameMessage& from)
    : ::google::protobuf::Message(arena) {
  GameMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, version_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, version_),
           offsetof(Impl_, requires_ack_) -
               offsetof(Impl_, version_) +
               sizeof(Impl_::requires_ack_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.GameMessage)
}
inline PROTOBUF_NDEBUG_INLINE GameMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        payload_(arena) {}

inline void GameMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, requires_ack_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::requires_ack_));
}
GameMessage::~GameMessage() {
  // @@protoc_insertion_point(destructor:mmorpg.GameMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GameMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.payload_.Destroy();
  delete _impl_.timestamp_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GameMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.GameMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  ::memset(&_impl_.version_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.type_));
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.ack_sequence_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.requires_ack_) -
        reinterpret_cast<char*>(&_impl_.ack_sequence_)) + sizeof(_impl_.requires_ack_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GameMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 0, 2> GameMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GameMessage, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GameMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 version = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameMessage, _impl_.version_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.version_)}},
    // uint32 sequence = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameMessage, _impl_.sequence_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.sequence_)}},
    // .google.protobuf.Timestamp timestamp = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.timestamp_)}},
    // .mmorpg.MessageType type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameMessage, _impl_.type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.type_)}},
    // bytes payload = 5;
    {::_pbi::TcParser::FastBS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.payload_)}},
    // optional uint32 ack_sequence = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GameMessage, _impl_.ack_sequence_), 1>(),
     {48, 1, 0, PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.ack_sequence_)}},
    // optional bool requires_ack = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GameMessage, _impl_.requires_ack_), 2>(),
     {56, 2, 0, PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.requires_ack_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 version = 1;
    {PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 sequence = 2;
    {PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.sequence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .google.protobuf.Timestamp timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.MessageType type = 4;
    {PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bytes payload = 5;
    {PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.payload_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 ack_sequence = 6;
    {PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.ack_sequence_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool requires_ack = 7;
    {PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.requires_ack_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* GameMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.GameMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_version(), target);
  }

  // uint32 sequence = 2;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_sequence(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // .mmorpg.MessageType type = 4;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_type(), target);
  }

  // bytes payload = 5;
  if (!this->_internal_payload().empty()) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // optional uint32 ack_sequence = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_ack_sequence(), target);
  }

  // optional bool requires_ack = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_requires_ack(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.GameMessage)
  return target;
}

::size_t GameMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.GameMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 5;
  if (!this->_internal_payload().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_payload());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_);
  }

  // uint32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_version());
  }

  // uint32 sequence = 2;
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_sequence());
  }

  // .mmorpg.MessageType type = 4;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (cached_has_bits & 0x00000006u) {
    // optional uint32 ack_sequence = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ack_sequence());
    }

    // optional bool requires_ack = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GameMessage::_class_data_ = {
    GameMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GameMessage::GetClassData() const {
  return &_class_data_;
}

void GameMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GameMessage*>(&to_msg);
  auto& from = static_cast<const GameMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.GameMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ack_sequence_ = from._impl_.ack_sequence_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.requires_ack_ = from._impl_.requires_ack_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GameMessage::CopyFrom(const GameMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.GameMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GameMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GameMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GameMessage::InternalSwap(GameMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, &other->_impl_.payload_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.requires_ack_)
      + sizeof(GameMessage::_impl_.requires_ack_)
      - PROTOBUF_FIELD_OFFSET(GameMessage, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata GameMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[0]);
}
// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.Vector3)
}
Vector3::Vector3(
    ::google::protobuf::Arena* arena, const Vector3& from)
    : Vector3(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Vector3::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Vector3::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::z_));
}
Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:mmorpg.Vector3)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Vector3::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.Vector3)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Vector3::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Vector3_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float x = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)}},
    // float y = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.y_)}},
    // float z = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float x = 1;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float y = 2;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float z = 3;
    {PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Vector3::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.Vector3)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.Vector3)
  return target;
}

::size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.Vector3)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 5;
  }

  // float y = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 5;
  }

  // float z = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Vector3::_class_data_ = {
    Vector3::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Vector3::GetClassData() const {
  return &_class_data_;
}

void Vector3::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Vector3*>(&to_msg);
  auto& from = static_cast<const Vector3&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.Vector3)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  ::uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  ::uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  ::uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Vector3::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Vector3::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Vector3::InternalSwap(Vector3* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, _impl_.z_)
      + sizeof(Vector3::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[1]);
}
// ===================================================================

class Rotation::_Internal {
 public:
};

Rotation::Rotation(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.Rotation)
}
Rotation::Rotation(
    ::google::protobuf::Arena* arena, const Rotation& from)
    : Rotation(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Rotation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Rotation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, yaw_),
           0,
           offsetof(Impl_, roll_) -
               offsetof(Impl_, yaw_) +
               sizeof(Impl_::roll_));
}
Rotation::~Rotation() {
  // @@protoc_insertion_point(destructor:mmorpg.Rotation)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Rotation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Rotation::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.Rotation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.yaw_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.roll_) -
      reinterpret_cast<char*>(&_impl_.yaw_)) + sizeof(_impl_.roll_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Rotation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Rotation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_Rotation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float yaw = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.yaw_)}},
    // float pitch = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.pitch_)}},
    // float roll = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(Rotation, _impl_.roll_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float yaw = 1;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.yaw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float pitch = 2;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.pitch_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float roll = 3;
    {PROTOBUF_FIELD_OFFSET(Rotation, _impl_.roll_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* Rotation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.Rotation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // float yaw = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        1, this->_internal_yaw(), target);
  }

  // float pitch = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_pitch(), target);
  }

  // float roll = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  ::uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.Rotation)
  return target;
}

::size_t Rotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.Rotation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float yaw = 1;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 5;
  }

  // float pitch = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 5;
  }

  // float roll = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  ::uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Rotation::_class_data_ = {
    Rotation::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Rotation::GetClassData() const {
  return &_class_data_;
}

void Rotation::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Rotation*>(&to_msg);
  auto& from = static_cast<const Rotation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.Rotation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  ::uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  ::uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  ::uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Rotation::CopyFrom(const Rotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.Rotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Rotation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Rotation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Rotation::InternalSwap(Rotation* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rotation, _impl_.roll_)
      + sizeof(Rotation::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(Rotation, _impl_.yaw_)>(
          reinterpret_cast<char*>(&_impl_.yaw_),
          reinterpret_cast<char*>(&other->_impl_.yaw_));
}

::google::protobuf::Metadata Rotation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[2]);
}
// ===================================================================

class Transform::_Internal {
 public:
  using HasBits = decltype(std::declval<Transform>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Transform, _impl_._has_bits_);
  static const ::mmorpg::Vector3& position(const Transform* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mmorpg::Rotation& rotation(const Transform* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mmorpg::Vector3& scale(const Transform* msg);
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mmorpg::Vector3& Transform::_Internal::position(const Transform* msg) {
  return *msg->_impl_.position_;
}
const ::mmorpg::Rotation& Transform::_Internal::rotation(const Transform* msg) {
  return *msg->_impl_.rotation_;
}
const ::mmorpg::Vector3& Transform::_Internal::scale(const Transform* msg) {
  return *msg->_impl_.scale_;
}
Transform::Transform(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.Transform)
}
inline PROTOBUF_NDEBUG_INLINE Transform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Transform::Transform(
    ::google::protobuf::Arena* arena,
    const Transform& from)
    : ::google::protobuf::Message(arena) {
  Transform* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.position_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Vector3>(arena, *from._impl_.position_)
                : nullptr;
  _impl_.rotation_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::mmorpg::Rotation>(arena, *from._impl_.rotation_)
                : nullptr;
  _impl_.scale_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::mmorpg::Vector3>(arena, *from._impl_.scale_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mmorpg.Transform)
}
inline PROTOBUF_NDEBUG_INLINE Transform::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Transform::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, position_),
           0,
           offsetof(Impl_, scale_) -
               offsetof(Impl_, position_) +
               sizeof(Impl_::scale_));
}
Transform::~Transform() {
  // @@protoc_insertion_point(destructor:mmorpg.Transform)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void Transform::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.position_;
  delete _impl_.rotation_;
  delete _impl_.scale_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.Transform)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.position_ != nullptr);
      _impl_.position_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rotation_ != nullptr);
      _impl_.rotation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.scale_ != nullptr);
      _impl_.scale_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* Transform::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Transform::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Transform, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_Transform_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .mmorpg.Vector3 position = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Transform, _impl_.position_)}},
    // .mmorpg.Rotation rotation = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_)}},
    // .mmorpg.Vector3 scale = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Transform, _impl_.scale_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mmorpg.Vector3 position = 1;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.position_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.Rotation rotation = 2;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.rotation_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.Vector3 scale = 3;
    {PROTOBUF_FIELD_OFFSET(Transform, _impl_.scale_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Vector3>()},
    {::_pbi::TcParser::GetTable<::mmorpg::Rotation>()},
    {::_pbi::TcParser::GetTable<::mmorpg::Vector3>()},
  }}, {{
  }},
};

::uint8_t* Transform::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.Transform)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Vector3 position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .mmorpg.Rotation rotation = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // .mmorpg.Vector3 scale = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.Transform)
  return target;
}

::size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.Transform)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // .mmorpg.Vector3 position = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.position_);
    }

    // .mmorpg.Rotation rotation = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.rotation_);
    }

    // .mmorpg.Vector3 scale = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.scale_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData Transform::_class_data_ = {
    Transform::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* Transform::GetClassData() const {
  return &_class_data_;
}

void Transform::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<Transform*>(&to_msg);
  auto& from = static_cast<const Transform&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.Transform)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_position()->::mmorpg::Vector3::MergeFrom(
          from._internal_position());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rotation()->::mmorpg::Rotation::MergeFrom(
          from._internal_rotation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_scale()->::mmorpg::Vector3::MergeFrom(
          from._internal_scale());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool Transform::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* Transform::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void Transform::InternalSwap(Transform* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, _impl_.scale_)
      + sizeof(Transform::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(Transform, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::google::protobuf::Metadata Transform::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[3]);
}
// ===================================================================

ErrorResponse_DetailsEntry_DoNotUse::ErrorResponse_DetailsEntry_DoNotUse() {}
ErrorResponse_DetailsEntry_DoNotUse::ErrorResponse_DetailsEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata ErrorResponse_DetailsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[4]);
}
// ===================================================================

class ErrorResponse::_Internal {
 public:
};

ErrorResponse::ErrorResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ErrorResponse)
}
inline PROTOBUF_NDEBUG_INLINE ErrorResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : details_{visibility, arena, from.details_},
        message_(arena, from.message_),
        _cached_size_{0} {}

ErrorResponse::ErrorResponse(
    ::google::protobuf::Arena* arena,
    const ErrorResponse& from)
    : ::google::protobuf::Message(arena) {
  ErrorResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.code_ = from._impl_.code_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.ErrorResponse)
}
inline PROTOBUF_NDEBUG_INLINE ErrorResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : details_{visibility, arena},
        message_(arena),
        _cached_size_{0} {}

inline void ErrorResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.code_ = {};
}
ErrorResponse::~ErrorResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.ErrorResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ErrorResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ErrorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ErrorResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.details_.Clear();
  _impl_.message_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ErrorResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 3, 1, 43, 2> ErrorResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ErrorResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.message_)}},
    // .mmorpg.ErrorCode code = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ErrorResponse, _impl_.code_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .mmorpg.ErrorCode code = 1;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> details = 3;
    {PROTOBUF_FIELD_OFFSET(ErrorResponse, _impl_.details_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(ErrorResponse()._impl_.details_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\24\0\7\7\0\0\0\0"
    "mmorpg.ErrorResponse"
    "message"
    "details"
  }},
};

::uint8_t* ErrorResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ErrorResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mmorpg.ErrorCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ErrorResponse.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // map<string, string> details = 3;
  if (!_internal_details().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_details();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ErrorResponse.details");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ErrorResponse.details");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            3, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ErrorResponse.details");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ErrorResponse.details");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ErrorResponse)
  return target;
}

::size_t ErrorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ErrorResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> details = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_details_size());
  for (const auto& entry : _internal_details()) {
    total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .mmorpg.ErrorCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ErrorResponse::_class_data_ = {
    ErrorResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ErrorResponse::GetClassData() const {
  return &_class_data_;
}

void ErrorResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ErrorResponse*>(&to_msg);
  auto& from = static_cast<const ErrorResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ErrorResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.details_.MergeFrom(from._impl_.details_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorResponse::CopyFrom(const ErrorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ErrorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ErrorResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ErrorResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ErrorResponse::InternalSwap(ErrorResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.details_.InternalSwap(&other->_impl_.details_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.code_, other->_impl_.code_);
}

::google::protobuf::Metadata ErrorResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace mmorpg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
