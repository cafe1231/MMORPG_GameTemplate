// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: world.proto

#include "world.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mmorpg {
      template <typename>
PROTOBUF_CONSTEXPR WorldObject_PropertiesEntry_DoNotUse::WorldObject_PropertiesEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct WorldObject_PropertiesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldObject_PropertiesEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldObject_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    WorldObject_PropertiesEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldObject_PropertiesEntry_DoNotUseDefaultTypeInternal _WorldObject_PropertiesEntry_DoNotUse_default_instance_;

inline constexpr WorldLeaveResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WorldLeaveResponse::WorldLeaveResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WorldLeaveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldLeaveResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldLeaveResponseDefaultTypeInternal() {}
  union {
    WorldLeaveResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldLeaveResponseDefaultTypeInternal _WorldLeaveResponse_default_instance_;

inline constexpr WorldLeaveRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR WorldLeaveRequest::WorldLeaveRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WorldLeaveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldLeaveRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldLeaveRequestDefaultTypeInternal() {}
  union {
    WorldLeaveRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldLeaveRequestDefaultTypeInternal _WorldLeaveRequest_default_instance_;

inline constexpr StatusEffect::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : effect_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        effect_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        icon_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        source_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        duration_{0},
        stacks_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StatusEffect::StatusEffect(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StatusEffectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusEffectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusEffectDefaultTypeInternal() {}
  union {
    StatusEffect _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusEffectDefaultTypeInternal _StatusEffect_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR PlayerState_VisibleEquipmentEntry_DoNotUse::PlayerState_VisibleEquipmentEntry_DoNotUse(::_pbi::ConstantInitialized) {}
struct PlayerState_VisibleEquipmentEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerState_VisibleEquipmentEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerState_VisibleEquipmentEntry_DoNotUseDefaultTypeInternal() {}
  union {
    PlayerState_VisibleEquipmentEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerState_VisibleEquipmentEntry_DoNotUseDefaultTypeInternal _PlayerState_VisibleEquipmentEntry_DoNotUse_default_instance_;

inline constexpr LevelUpEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        new_level_{0},
        stat_points_gained_{0},
        skill_points_gained_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LevelUpEvent::LevelUpEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct LevelUpEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LevelUpEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LevelUpEventDefaultTypeInternal() {}
  union {
    LevelUpEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LevelUpEventDefaultTypeInternal _LevelUpEvent_default_instance_;

inline constexpr InterestUpdateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : interest_filters_{},
        player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        view_distance_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InterestUpdateRequest::InterestUpdateRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct InterestUpdateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterestUpdateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterestUpdateRequestDefaultTypeInternal() {}
  union {
    InterestUpdateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterestUpdateRequestDefaultTypeInternal _InterestUpdateRequest_default_instance_;

inline constexpr HealEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : source_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        heal_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        heal_amount_{0},
        is_critical_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealEvent::HealEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HealEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealEventDefaultTypeInternal() {}
  union {
    HealEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealEventDefaultTypeInternal _HealEvent_default_instance_;

inline constexpr EntityDespawn::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        entity_type_{static_cast< ::mmorpg::EntityType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EntityDespawn::EntityDespawn(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EntityDespawnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityDespawnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityDespawnDefaultTypeInternal() {}
  union {
    EntityDespawn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityDespawnDefaultTypeInternal _EntityDespawn_default_instance_;

inline constexpr EmoteEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        emote_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EmoteEvent::EmoteEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EmoteEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EmoteEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EmoteEventDefaultTypeInternal() {}
  union {
    EmoteEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EmoteEventDefaultTypeInternal _EmoteEvent_default_instance_;

inline constexpr DamageEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : source_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        damage_{0},
        damage_type_{static_cast< ::mmorpg::DamageType >(0)},
        is_critical_{false},
        is_blocked_{false},
        is_dodged_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DamageEvent::DamageEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DamageEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DamageEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DamageEventDefaultTypeInternal() {}
  union {
    DamageEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DamageEventDefaultTypeInternal _DamageEvent_default_instance_;

inline constexpr ZoneChangeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        new_zone_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        world_server_url_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        world_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        spawn_transform_{nullptr},
        success_{false},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR ZoneChangeResponse::ZoneChangeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ZoneChangeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZoneChangeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZoneChangeResponseDefaultTypeInternal() {}
  union {
    ZoneChangeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZoneChangeResponseDefaultTypeInternal _ZoneChangeResponse_default_instance_;

inline constexpr ZoneChangeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_zone_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_transform_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ZoneChangeRequest::ZoneChangeRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ZoneChangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZoneChangeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZoneChangeRequestDefaultTypeInternal() {}
  union {
    ZoneChangeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZoneChangeRequestDefaultTypeInternal _ZoneChangeRequest_default_instance_;

inline constexpr WorldObject::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        properties_{},
        allowed_looters_{},
        object_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        object_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        interaction_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        transform_{nullptr},
        interaction_range_{0},
        is_interactable_{false},
        is_lootable_{false} {}

template <typename>
PROTOBUF_CONSTEXPR WorldObject::WorldObject(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WorldObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldObjectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldObjectDefaultTypeInternal() {}
  union {
    WorldObject _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldObjectDefaultTypeInternal _WorldObject_default_instance_;

inline constexpr WorldEnterResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        zone_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        spawn_transform_{nullptr},
        server_time_{nullptr},
        success_{false},
        tick_rate_{0},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR WorldEnterResponse::WorldEnterResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WorldEnterResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldEnterResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldEnterResponseDefaultTypeInternal() {}
  union {
    WorldEnterResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldEnterResponseDefaultTypeInternal _WorldEnterResponse_default_instance_;

inline constexpr WorldEnterRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        character_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        world_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        zone_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        spawn_transform_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR WorldEnterRequest::WorldEnterRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WorldEnterRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldEnterRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldEnterRequestDefaultTypeInternal() {}
  union {
    WorldEnterRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldEnterRequestDefaultTypeInternal _WorldEnterRequest_default_instance_;

inline constexpr VisualEffectEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        effect_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        attach_to_entity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        location_{nullptr},
        duration_{0},
        scale_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VisualEffectEvent::VisualEffectEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct VisualEffectEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VisualEffectEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VisualEffectEventDefaultTypeInternal() {}
  union {
    VisualEffectEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VisualEffectEventDefaultTypeInternal _VisualEffectEvent_default_instance_;

inline constexpr SoundEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sound_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        location_{nullptr},
        volume_{0},
        range_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SoundEvent::SoundEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SoundEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SoundEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SoundEventDefaultTypeInternal() {}
  union {
    SoundEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SoundEventDefaultTypeInternal _SoundEvent_default_instance_;

inline constexpr PlayerState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        status_effects_{},
        visible_equipment_{},
        player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        character_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_animation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        transform_{nullptr},
        velocity_{nullptr},
        class__{static_cast< ::mmorpg::CharacterClass >(0)},
        level_{0},
        movement_flags_{0u},
        health_{0},
        max_health_{0},
        mana_{0},
        max_mana_{0},
        combat_state_{static_cast< ::mmorpg::CombatState >(0)},
        animation_time_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerState::PlayerState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlayerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerStateDefaultTypeInternal() {}
  union {
    PlayerState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerStateDefaultTypeInternal _PlayerState_default_instance_;

inline constexpr PlayerPositionUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        transform_{nullptr},
        velocity_{nullptr},
        acceleration_{nullptr},
        timestamp_{nullptr},
        movement_flags_{0u},
        sequence_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerPositionUpdate::PlayerPositionUpdate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct PlayerPositionUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerPositionUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerPositionUpdateDefaultTypeInternal() {}
  union {
    PlayerPositionUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerPositionUpdateDefaultTypeInternal _PlayerPositionUpdate_default_instance_;

inline constexpr NPCState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        status_effects_{},
        npc_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        npc_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        display_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_animation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        transform_{nullptr},
        velocity_{nullptr},
        health_{0},
        max_health_{0},
        level_{0},
        behavior_state_{static_cast< ::mmorpg::NPCBehaviorState >(0)},
        is_hostile_{false},
        is_quest_giver_{false},
        is_vendor_{false},
        animation_time_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NPCState::NPCState(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NPCStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NPCStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NPCStateDefaultTypeInternal() {}
  union {
    NPCState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NPCStateDefaultTypeInternal _NPCState_default_instance_;

inline constexpr DeathEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        killer_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        death_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        death_location_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR DeathEvent::DeathEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DeathEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeathEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeathEventDefaultTypeInternal() {}
  union {
    DeathEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeathEventDefaultTypeInternal _DeathEvent_default_instance_;

inline constexpr EntitySpawn::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : entity_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR EntitySpawn::EntitySpawn(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EntitySpawnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntitySpawnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntitySpawnDefaultTypeInternal() {}
  union {
    EntitySpawn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntitySpawnDefaultTypeInternal _EntitySpawn_default_instance_;

inline constexpr EntityEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        entity_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        event_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        event_data_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR EntityEvent::EntityEvent(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct EntityEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntityEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntityEventDefaultTypeInternal() {}
  union {
    EntityEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntityEventDefaultTypeInternal _EntityEvent_default_instance_;

inline constexpr AreaUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        players_{},
        npcs_{},
        objects_{},
        events_{},
        server_time_{nullptr},
        tick_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR AreaUpdate::AreaUpdate(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AreaUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AreaUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AreaUpdateDefaultTypeInternal() {}
  union {
    AreaUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AreaUpdateDefaultTypeInternal _AreaUpdate_default_instance_;
}  // namespace mmorpg
static ::_pb::Metadata file_level_metadata_world_2eproto[25];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_world_2eproto[5];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_world_2eproto = nullptr;
const ::uint32_t TableStruct_world_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterRequest, _impl_.character_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterRequest, _impl_.world_token_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterRequest, _impl_.spawn_transform_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterRequest, _impl_.zone_id_),
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterResponse, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterResponse, _impl_.zone_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterResponse, _impl_.spawn_transform_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterResponse, _impl_.server_time_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterResponse, _impl_.tick_rate_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldEnterResponse, _impl_.error_code_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldLeaveRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldLeaveRequest, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldLeaveRequest, _impl_.reason_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldLeaveResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldLeaveResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldLeaveResponse, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerPositionUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerPositionUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerPositionUpdate, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerPositionUpdate, _impl_.transform_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerPositionUpdate, _impl_.velocity_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerPositionUpdate, _impl_.acceleration_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerPositionUpdate, _impl_.movement_flags_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerPositionUpdate, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerPositionUpdate, _impl_.sequence_),
    ~0u,
    0,
    1,
    2,
    ~0u,
    3,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::mmorpg::AreaUpdate, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::AreaUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::AreaUpdate, _impl_.players_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::AreaUpdate, _impl_.npcs_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::AreaUpdate, _impl_.objects_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::AreaUpdate, _impl_.events_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::AreaUpdate, _impl_.server_time_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::AreaUpdate, _impl_.tick_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState_VisibleEquipmentEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState_VisibleEquipmentEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState_VisibleEquipmentEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState_VisibleEquipmentEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.character_name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.class__),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.transform_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.velocity_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.movement_flags_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.health_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.max_health_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.mana_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.max_mana_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.status_effects_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.combat_state_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.current_animation_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.animation_time_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::PlayerState, _impl_.visible_equipment_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.npc_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.npc_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.display_name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.transform_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.velocity_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.health_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.max_health_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.level_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.behavior_state_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.target_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.status_effects_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.is_hostile_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.is_quest_giver_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.is_vendor_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.current_animation_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::NPCState, _impl_.animation_time_),
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject_PropertiesEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject_PropertiesEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject_PropertiesEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject_PropertiesEntry_DoNotUse, value_),
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject, _impl_.object_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject, _impl_.object_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject, _impl_.transform_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject, _impl_.is_interactable_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject, _impl_.interaction_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject, _impl_.interaction_range_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject, _impl_.properties_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject, _impl_.is_lootable_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WorldObject, _impl_.allowed_looters_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntitySpawn, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntitySpawn, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntitySpawn, _impl_.entity_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityDespawn, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityDespawn, _impl_.entity_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityDespawn, _impl_.entity_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityDespawn, _impl_.reason_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityEvent, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityEvent, _impl_.entity_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityEvent, _impl_.event_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityEvent, _impl_.timestamp_),
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityEvent, _impl_.event_data_),
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::DamageEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::DamageEvent, _impl_.source_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::DamageEvent, _impl_.target_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::DamageEvent, _impl_.damage_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::DamageEvent, _impl_.damage_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::DamageEvent, _impl_.is_critical_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::DamageEvent, _impl_.is_blocked_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::DamageEvent, _impl_.is_dodged_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::HealEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::HealEvent, _impl_.source_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::HealEvent, _impl_.target_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::HealEvent, _impl_.heal_amount_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::HealEvent, _impl_.heal_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::HealEvent, _impl_.is_critical_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::DeathEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::DeathEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::DeathEvent, _impl_.entity_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::DeathEvent, _impl_.killer_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::DeathEvent, _impl_.death_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::DeathEvent, _impl_.death_location_),
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::LevelUpEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::LevelUpEvent, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LevelUpEvent, _impl_.new_level_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LevelUpEvent, _impl_.stat_points_gained_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::LevelUpEvent, _impl_.skill_points_gained_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::EmoteEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::EmoteEvent, _impl_.entity_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::EmoteEvent, _impl_.emote_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::EmoteEvent, _impl_.target_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SoundEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SoundEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::SoundEvent, _impl_.sound_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SoundEvent, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SoundEvent, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::SoundEvent, _impl_.range_),
    ~0u,
    0,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::mmorpg::VisualEffectEvent, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::VisualEffectEvent, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::VisualEffectEvent, _impl_.effect_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::VisualEffectEvent, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::VisualEffectEvent, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::VisualEffectEvent, _impl_.scale_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::VisualEffectEvent, _impl_.attach_to_entity_),
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::StatusEffect, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::StatusEffect, _impl_.effect_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::StatusEffect, _impl_.effect_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::StatusEffect, _impl_.icon_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::StatusEffect, _impl_.duration_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::StatusEffect, _impl_.stacks_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::StatusEffect, _impl_.source_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeRequest, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeRequest, _impl_.target_zone_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeRequest, _impl_.target_transform_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeResponse, _impl_.new_zone_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeResponse, _impl_.world_server_url_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeResponse, _impl_.world_token_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeResponse, _impl_.spawn_transform_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ZoneChangeResponse, _impl_.error_code_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::InterestUpdateRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::InterestUpdateRequest, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::InterestUpdateRequest, _impl_.view_distance_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::InterestUpdateRequest, _impl_.interest_filters_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::mmorpg::WorldEnterRequest)},
        {16, 32, -1, sizeof(::mmorpg::WorldEnterResponse)},
        {40, -1, -1, sizeof(::mmorpg::WorldLeaveRequest)},
        {50, -1, -1, sizeof(::mmorpg::WorldLeaveResponse)},
        {60, 75, -1, sizeof(::mmorpg::PlayerPositionUpdate)},
        {82, 96, -1, sizeof(::mmorpg::AreaUpdate)},
        {102, 112, -1, sizeof(::mmorpg::PlayerState_VisibleEquipmentEntry_DoNotUse)},
        {114, 138, -1, sizeof(::mmorpg::PlayerState)},
        {154, 178, -1, sizeof(::mmorpg::NPCState)},
        {194, 204, -1, sizeof(::mmorpg::WorldObject_PropertiesEntry_DoNotUse)},
        {206, 223, -1, sizeof(::mmorpg::WorldObject)},
        {232, -1, -1, sizeof(::mmorpg::EntitySpawn)},
        {244, -1, -1, sizeof(::mmorpg::EntityDespawn)},
        {255, 274, -1, sizeof(::mmorpg::EntityEvent)},
        {284, -1, -1, sizeof(::mmorpg::DamageEvent)},
        {299, -1, -1, sizeof(::mmorpg::HealEvent)},
        {312, 324, -1, sizeof(::mmorpg::DeathEvent)},
        {328, -1, -1, sizeof(::mmorpg::LevelUpEvent)},
        {340, -1, -1, sizeof(::mmorpg::EmoteEvent)},
        {351, 363, -1, sizeof(::mmorpg::SoundEvent)},
        {367, 380, -1, sizeof(::mmorpg::VisualEffectEvent)},
        {385, -1, -1, sizeof(::mmorpg::StatusEffect)},
        {399, 410, -1, sizeof(::mmorpg::ZoneChangeRequest)},
        {413, 428, -1, sizeof(::mmorpg::ZoneChangeResponse)},
        {435, -1, -1, sizeof(::mmorpg::InterestUpdateRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mmorpg::_WorldEnterRequest_default_instance_._instance,
    &::mmorpg::_WorldEnterResponse_default_instance_._instance,
    &::mmorpg::_WorldLeaveRequest_default_instance_._instance,
    &::mmorpg::_WorldLeaveResponse_default_instance_._instance,
    &::mmorpg::_PlayerPositionUpdate_default_instance_._instance,
    &::mmorpg::_AreaUpdate_default_instance_._instance,
    &::mmorpg::_PlayerState_VisibleEquipmentEntry_DoNotUse_default_instance_._instance,
    &::mmorpg::_PlayerState_default_instance_._instance,
    &::mmorpg::_NPCState_default_instance_._instance,
    &::mmorpg::_WorldObject_PropertiesEntry_DoNotUse_default_instance_._instance,
    &::mmorpg::_WorldObject_default_instance_._instance,
    &::mmorpg::_EntitySpawn_default_instance_._instance,
    &::mmorpg::_EntityDespawn_default_instance_._instance,
    &::mmorpg::_EntityEvent_default_instance_._instance,
    &::mmorpg::_DamageEvent_default_instance_._instance,
    &::mmorpg::_HealEvent_default_instance_._instance,
    &::mmorpg::_DeathEvent_default_instance_._instance,
    &::mmorpg::_LevelUpEvent_default_instance_._instance,
    &::mmorpg::_EmoteEvent_default_instance_._instance,
    &::mmorpg::_SoundEvent_default_instance_._instance,
    &::mmorpg::_VisualEffectEvent_default_instance_._instance,
    &::mmorpg::_StatusEffect_default_instance_._instance,
    &::mmorpg::_ZoneChangeRequest_default_instance_._instance,
    &::mmorpg::_ZoneChangeResponse_default_instance_._instance,
    &::mmorpg::_InterestUpdateRequest_default_instance_._instance,
};
const char descriptor_table_protodef_world_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\013world.proto\022\006mmorpg\032\037google/protobuf/t"
    "imestamp.proto\032\nbase.proto\032\017character.pr"
    "oto\"{\n\021WorldEnterRequest\022\024\n\014character_id"
    "\030\001 \001(\t\022\023\n\013world_token\030\002 \001(\t\022*\n\017spawn_tra"
    "nsform\030\003 \001(\0132\021.mmorpg.Transform\022\017\n\007zone_"
    "id\030\004 \001(\t\"\367\001\n\022WorldEnterResponse\022\017\n\007succe"
    "ss\030\001 \001(\010\022\021\n\tplayer_id\030\002 \001(\t\022\017\n\007zone_id\030\003"
    " \001(\t\022*\n\017spawn_transform\030\004 \001(\0132\021.mmorpg.T"
    "ransform\022/\n\013server_time\030\005 \001(\0132\032.google.p"
    "rotobuf.Timestamp\022\021\n\ttick_rate\030\006 \001(\005\022\025\n\r"
    "error_message\030\007 \001(\t\022%\n\nerror_code\030\010 \001(\0162"
    "\021.mmorpg.ErrorCode\"6\n\021WorldLeaveRequest\022"
    "\021\n\tplayer_id\030\001 \001(\t\022\016\n\006reason\030\002 \001(\t\"6\n\022Wo"
    "rldLeaveResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007mes"
    "sage\030\002 \001(\t\"\362\001\n\024PlayerPositionUpdate\022\021\n\tp"
    "layer_id\030\001 \001(\t\022$\n\ttransform\030\002 \001(\0132\021.mmor"
    "pg.Transform\022!\n\010velocity\030\003 \001(\0132\017.mmorpg."
    "Vector3\022%\n\014acceleration\030\004 \001(\0132\017.mmorpg.V"
    "ector3\022\026\n\016movement_flags\030\005 \001(\r\022-\n\ttimest"
    "amp\030\006 \001(\0132\032.google.protobuf.Timestamp\022\020\n"
    "\010sequence\030\007 \001(\r\"\334\001\n\nAreaUpdate\022$\n\007player"
    "s\030\001 \003(\0132\023.mmorpg.PlayerState\022\036\n\004npcs\030\002 \003"
    "(\0132\020.mmorpg.NPCState\022$\n\007objects\030\003 \003(\0132\023."
    "mmorpg.WorldObject\022#\n\006events\030\004 \003(\0132\023.mmo"
    "rpg.EntityEvent\022/\n\013server_time\030\005 \001(\0132\032.g"
    "oogle.protobuf.Timestamp\022\014\n\004tick\030\006 \001(\r\"\236"
    "\004\n\013PlayerState\022\021\n\tplayer_id\030\001 \001(\t\022\026\n\016cha"
    "racter_name\030\002 \001(\t\022%\n\005class\030\003 \001(\0162\026.mmorp"
    "g.CharacterClass\022\r\n\005level\030\004 \001(\005\022$\n\ttrans"
    "form\030\005 \001(\0132\021.mmorpg.Transform\022!\n\010velocit"
    "y\030\006 \001(\0132\017.mmorpg.Vector3\022\026\n\016movement_fla"
    "gs\030\007 \001(\r\022\016\n\006health\030\010 \001(\005\022\022\n\nmax_health\030\t"
    " \001(\005\022\014\n\004mana\030\n \001(\005\022\020\n\010max_mana\030\013 \001(\005\022,\n\016"
    "status_effects\030\014 \003(\0132\024.mmorpg.StatusEffe"
    "ct\022)\n\014combat_state\030\r \001(\0162\023.mmorpg.Combat"
    "State\022\031\n\021current_animation\030\016 \001(\t\022\026\n\016anim"
    "ation_time\030\017 \001(\002\022D\n\021visible_equipment\030\020 "
    "\003(\0132).mmorpg.PlayerState.VisibleEquipmen"
    "tEntry\0327\n\025VisibleEquipmentEntry\022\013\n\003key\030\001"
    " \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\243\003\n\010NPCState\022\016\n\006"
    "npc_id\030\001 \001(\t\022\020\n\010npc_type\030\002 \001(\t\022\024\n\014displa"
    "y_name\030\003 \001(\t\022$\n\ttransform\030\004 \001(\0132\021.mmorpg"
    ".Transform\022!\n\010velocity\030\005 \001(\0132\017.mmorpg.Ve"
    "ctor3\022\016\n\006health\030\006 \001(\005\022\022\n\nmax_health\030\007 \001("
    "\005\022\r\n\005level\030\010 \001(\005\0220\n\016behavior_state\030\t \001(\016"
    "2\030.mmorpg.NPCBehaviorState\022\021\n\ttarget_id\030"
    "\n \001(\t\022,\n\016status_effects\030\013 \003(\0132\024.mmorpg.S"
    "tatusEffect\022\022\n\nis_hostile\030\014 \001(\010\022\026\n\016is_qu"
    "est_giver\030\r \001(\010\022\021\n\tis_vendor\030\016 \001(\010\022\031\n\021cu"
    "rrent_animation\030\017 \001(\t\022\026\n\016animation_time\030"
    "\020 \001(\002\"\303\002\n\013WorldObject\022\021\n\tobject_id\030\001 \001(\t"
    "\022\023\n\013object_type\030\002 \001(\t\022$\n\ttransform\030\003 \001(\013"
    "2\021.mmorpg.Transform\022\027\n\017is_interactable\030\004"
    " \001(\010\022\030\n\020interaction_type\030\005 \001(\t\022\031\n\021intera"
    "ction_range\030\006 \001(\002\0227\n\nproperties\030\007 \003(\0132#."
    "mmorpg.WorldObject.PropertiesEntry\022\023\n\013is"
    "_lootable\030\010 \001(\010\022\027\n\017allowed_looters\030\t \003(\t"
    "\0321\n\017PropertiesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
    "e\030\002 \001(\t:\0028\001\"\206\001\n\013EntitySpawn\022%\n\006player\030\001 "
    "\001(\0132\023.mmorpg.PlayerStateH\000\022\037\n\003npc\030\002 \001(\0132"
    "\020.mmorpg.NPCStateH\000\022%\n\006object\030\003 \001(\0132\023.mm"
    "orpg.WorldObjectH\000B\010\n\006entity\"[\n\rEntityDe"
    "spawn\022\021\n\tentity_id\030\001 \001(\t\022\'\n\013entity_type\030"
    "\002 \001(\0162\022.mmorpg.EntityType\022\016\n\006reason\030\003 \001("
    "\t\"\210\003\n\013EntityEvent\022\021\n\tentity_id\030\001 \001(\t\022\022\n\n"
    "event_type\030\002 \001(\t\022-\n\ttimestamp\030\003 \001(\0132\032.go"
    "ogle.protobuf.Timestamp\022%\n\006damage\030\004 \001(\0132"
    "\023.mmorpg.DamageEventH\000\022!\n\004heal\030\005 \001(\0132\021.m"
    "morpg.HealEventH\000\022#\n\005death\030\006 \001(\0132\022.mmorp"
    "g.DeathEventH\000\022(\n\010level_up\030\007 \001(\0132\024.mmorp"
    "g.LevelUpEventH\000\022#\n\005emote\030\010 \001(\0132\022.mmorpg"
    ".EmoteEventH\000\022#\n\005sound\030\t \001(\0132\022.mmorpg.So"
    "undEventH\000\0222\n\rvisual_effect\030\n \001(\0132\031.mmor"
    "pg.VisualEffectEventH\000B\014\n\nevent_data\"\250\001\n"
    "\013DamageEvent\022\021\n\tsource_id\030\001 \001(\t\022\021\n\ttarge"
    "t_id\030\002 \001(\t\022\016\n\006damage\030\003 \001(\005\022\'\n\013damage_typ"
    "e\030\004 \001(\0162\022.mmorpg.DamageType\022\023\n\013is_critic"
    "al\030\005 \001(\010\022\022\n\nis_blocked\030\006 \001(\010\022\021\n\tis_dodge"
    "d\030\007 \001(\010\"n\n\tHealEvent\022\021\n\tsource_id\030\001 \001(\t\022"
    "\021\n\ttarget_id\030\002 \001(\t\022\023\n\013heal_amount\030\003 \001(\005\022"
    "\021\n\theal_type\030\004 \001(\t\022\023\n\013is_critical\030\005 \001(\010\""
    "q\n\nDeathEvent\022\021\n\tentity_id\030\001 \001(\t\022\021\n\tkill"
    "er_id\030\002 \001(\t\022\022\n\ndeath_type\030\003 \001(\t\022)\n\016death"
    "_location\030\004 \001(\0132\021.mmorpg.Transform\"m\n\014Le"
    "velUpEvent\022\021\n\tplayer_id\030\001 \001(\t\022\021\n\tnew_lev"
    "el\030\002 \001(\005\022\032\n\022stat_points_gained\030\003 \001(\005\022\033\n\023"
    "skill_points_gained\030\004 \001(\005\"D\n\nEmoteEvent\022"
    "\021\n\tentity_id\030\001 \001(\t\022\020\n\010emote_id\030\002 \001(\t\022\021\n\t"
    "target_id\030\003 \001(\t\"b\n\nSoundEvent\022\020\n\010sound_i"
    "d\030\001 \001(\t\022#\n\010location\030\002 \001(\0132\021.mmorpg.Trans"
    "form\022\016\n\006volume\030\003 \001(\002\022\r\n\005range\030\004 \001(\002\"\206\001\n\021"
    "VisualEffectEvent\022\021\n\teffect_id\030\001 \001(\t\022#\n\010"
    "location\030\002 \001(\0132\021.mmorpg.Transform\022\020\n\010dur"
    "ation\030\003 \001(\002\022\r\n\005scale\030\004 \001(\002\022\030\n\020attach_to_"
    "entity\030\005 \001(\t\"|\n\014StatusEffect\022\021\n\teffect_i"
    "d\030\001 \001(\t\022\023\n\013effect_type\030\002 \001(\t\022\017\n\007icon_id\030"
    "\003 \001(\t\022\020\n\010duration\030\004 \001(\002\022\016\n\006stacks\030\005 \001(\005\022"
    "\021\n\tsource_id\030\006 \001(\t\"k\n\021ZoneChangeRequest\022"
    "\021\n\tplayer_id\030\001 \001(\t\022\026\n\016target_zone_id\030\002 \001"
    "(\t\022+\n\020target_transform\030\003 \001(\0132\021.mmorpg.Tr"
    "ansform\"\323\001\n\022ZoneChangeResponse\022\017\n\007succes"
    "s\030\001 \001(\010\022\023\n\013new_zone_id\030\002 \001(\t\022\030\n\020world_se"
    "rver_url\030\003 \001(\t\022\023\n\013world_token\030\004 \001(\t\022*\n\017s"
    "pawn_transform\030\005 \001(\0132\021.mmorpg.Transform\022"
    "\025\n\rerror_message\030\006 \001(\t\022%\n\nerror_code\030\007 \001"
    "(\0162\021.mmorpg.ErrorCode\"[\n\025InterestUpdateR"
    "equest\022\021\n\tplayer_id\030\001 \001(\t\022\025\n\rview_distan"
    "ce\030\002 \001(\002\022\030\n\020interest_filters\030\003 \003(\t*\240\001\n\nE"
    "ntityType\022\033\n\027ENTITY_TYPE_UNSPECIFIED\020\000\022\026"
    "\n\022ENTITY_TYPE_PLAYER\020\001\022\023\n\017ENTITY_TYPE_NP"
    "C\020\002\022\026\n\022ENTITY_TYPE_OBJECT\020\003\022\024\n\020ENTITY_TY"
    "PE_ITEM\020\004\022\032\n\026ENTITY_TYPE_PROJECTILE\020\005*\352\001"
    "\n\nDamageType\022\033\n\027DAMAGE_TYPE_UNSPECIFIED\020"
    "\000\022\030\n\024DAMAGE_TYPE_PHYSICAL\020\001\022\027\n\023DAMAGE_TY"
    "PE_MAGICAL\020\002\022\024\n\020DAMAGE_TYPE_FIRE\020\003\022\025\n\021DA"
    "MAGE_TYPE_FROST\020\004\022\031\n\025DAMAGE_TYPE_LIGHTNI"
    "NG\020\005\022\026\n\022DAMAGE_TYPE_POISON\020\006\022\024\n\020DAMAGE_T"
    "YPE_HOLY\020\007\022\026\n\022DAMAGE_TYPE_SHADOW\020\010*\230\001\n\013C"
    "ombatState\022\034\n\030COMBAT_STATE_UNSPECIFIED\020\000"
    "\022\036\n\032COMBAT_STATE_OUT_OF_COMBAT\020\001\022\032\n\026COMB"
    "AT_STATE_IN_COMBAT\020\002\022\030\n\024COMBAT_STATE_EVA"
    "DING\020\003\022\025\n\021COMBAT_STATE_DEAD\020\004*\356\001\n\020NPCBeh"
    "aviorState\022\034\n\030NPC_BEHAVIOR_UNSPECIFIED\020\000"
    "\022\025\n\021NPC_BEHAVIOR_IDLE\020\001\022\033\n\027NPC_BEHAVIOR_"
    "PATROLLING\020\002\022\030\n\024NPC_BEHAVIOR_CHASING\020\003\022\032"
    "\n\026NPC_BEHAVIOR_ATTACKING\020\004\022\030\n\024NPC_BEHAVI"
    "OR_FLEEING\020\005\022\032\n\026NPC_BEHAVIOR_RETURNING\020\006"
    "\022\034\n\030NPC_BEHAVIOR_INTERACTING\020\007*\266\002\n\014Movem"
    "entFlag\022\026\n\022MOVEMENT_FLAG_NONE\020\000\022\031\n\025MOVEM"
    "ENT_FLAG_FORWARD\020\001\022\032\n\026MOVEMENT_FLAG_BACK"
    "WARD\020\002\022\026\n\022MOVEMENT_FLAG_LEFT\020\004\022\027\n\023MOVEME"
    "NT_FLAG_RIGHT\020\010\022\031\n\025MOVEMENT_FLAG_JUMPING"
    "\020\020\022\031\n\025MOVEMENT_FLAG_FALLING\020 \022\032\n\026MOVEMEN"
    "T_FLAG_SWIMMING\020@\022\031\n\024MOVEMENT_FLAG_FLYIN"
    "G\020\200\001\022\034\n\027MOVEMENT_FLAG_SPRINTING\020\200\002\022\033\n\026MO"
    "VEMENT_FLAG_SNEAKING\020\200\004B.Z,github.com/mm"
    "orpg-template/backend/pkg/protob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_world_2eproto_deps[3] =
    {
        &::descriptor_table_base_2eproto,
        &::descriptor_table_character_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_world_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_world_2eproto = {
    false,
    false,
    5479,
    descriptor_table_protodef_world_2eproto,
    "world.proto",
    &descriptor_table_world_2eproto_once,
    descriptor_table_world_2eproto_deps,
    3,
    25,
    schemas,
    file_default_instances,
    TableStruct_world_2eproto::offsets,
    file_level_metadata_world_2eproto,
    file_level_enum_descriptors_world_2eproto,
    file_level_service_descriptors_world_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_world_2eproto_getter() {
  return &descriptor_table_world_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_world_2eproto(&descriptor_table_world_2eproto);
namespace mmorpg {
const ::google::protobuf::EnumDescriptor* EntityType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t EntityType_internal_data_[] = {
    393216u, 0u, };
bool EntityType_IsValid(int value) {
  return 0 <= value && value <= 5;
}
const ::google::protobuf::EnumDescriptor* DamageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t DamageType_internal_data_[] = {
    589824u, 0u, };
bool DamageType_IsValid(int value) {
  return 0 <= value && value <= 8;
}
const ::google::protobuf::EnumDescriptor* CombatState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t CombatState_internal_data_[] = {
    327680u, 0u, };
bool CombatState_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* NPCBehaviorState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t NPCBehaviorState_internal_data_[] = {
    524288u, 0u, };
bool NPCBehaviorState_IsValid(int value) {
  return 0 <= value && value <= 7;
}
const ::google::protobuf::EnumDescriptor* MovementFlag_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_world_2eproto);
  return file_level_enum_descriptors_world_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t MovementFlag_internal_data_[] = {
    196608u, 196672u, 536879138u, 536870912u, 256u, 128u, 512u, };
bool MovementFlag_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, MovementFlag_internal_data_);
}
// ===================================================================

class WorldEnterRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<WorldEnterRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WorldEnterRequest, _impl_._has_bits_);
  static const ::mmorpg::Transform& spawn_transform(const WorldEnterRequest* msg);
  static void set_has_spawn_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mmorpg::Transform& WorldEnterRequest::_Internal::spawn_transform(const WorldEnterRequest* msg) {
  return *msg->_impl_.spawn_transform_;
}
void WorldEnterRequest::clear_spawn_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.spawn_transform_ != nullptr) _impl_.spawn_transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
WorldEnterRequest::WorldEnterRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.WorldEnterRequest)
}
inline PROTOBUF_NDEBUG_INLINE WorldEnterRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        character_id_(arena, from.character_id_),
        world_token_(arena, from.world_token_),
        zone_id_(arena, from.zone_id_) {}

WorldEnterRequest::WorldEnterRequest(
    ::google::protobuf::Arena* arena,
    const WorldEnterRequest& from)
    : ::google::protobuf::Message(arena) {
  WorldEnterRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.spawn_transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.spawn_transform_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mmorpg.WorldEnterRequest)
}
inline PROTOBUF_NDEBUG_INLINE WorldEnterRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        character_id_(arena),
        world_token_(arena),
        zone_id_(arena) {}

inline void WorldEnterRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.spawn_transform_ = {};
}
WorldEnterRequest::~WorldEnterRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.WorldEnterRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WorldEnterRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.character_id_.Destroy();
  _impl_.world_token_.Destroy();
  _impl_.zone_id_.Destroy();
  delete _impl_.spawn_transform_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void WorldEnterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.WorldEnterRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.character_id_.ClearToEmpty();
  _impl_.world_token_.ClearToEmpty();
  _impl_.zone_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.spawn_transform_ != nullptr);
    _impl_.spawn_transform_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WorldEnterRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 63, 2> WorldEnterRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WorldEnterRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WorldEnterRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string zone_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(WorldEnterRequest, _impl_.zone_id_)}},
    // string character_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WorldEnterRequest, _impl_.character_id_)}},
    // string world_token = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WorldEnterRequest, _impl_.world_token_)}},
    // .mmorpg.Transform spawn_transform = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(WorldEnterRequest, _impl_.spawn_transform_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string character_id = 1;
    {PROTOBUF_FIELD_OFFSET(WorldEnterRequest, _impl_.character_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string world_token = 2;
    {PROTOBUF_FIELD_OFFSET(WorldEnterRequest, _impl_.world_token_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.Transform spawn_transform = 3;
    {PROTOBUF_FIELD_OFFSET(WorldEnterRequest, _impl_.spawn_transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string zone_id = 4;
    {PROTOBUF_FIELD_OFFSET(WorldEnterRequest, _impl_.zone_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
  }}, {{
    "\30\14\13\0\7\0\0\0"
    "mmorpg.WorldEnterRequest"
    "character_id"
    "world_token"
    "zone_id"
  }},
};

::uint8_t* WorldEnterRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.WorldEnterRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    const std::string& _s = this->_internal_character_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldEnterRequest.character_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string world_token = 2;
  if (!this->_internal_world_token().empty()) {
    const std::string& _s = this->_internal_world_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldEnterRequest.world_token");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Transform spawn_transform = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::spawn_transform(this),
        _Internal::spawn_transform(this).GetCachedSize(), target, stream);
  }

  // string zone_id = 4;
  if (!this->_internal_zone_id().empty()) {
    const std::string& _s = this->_internal_zone_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldEnterRequest.zone_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.WorldEnterRequest)
  return target;
}

::size_t WorldEnterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.WorldEnterRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string character_id = 1;
  if (!this->_internal_character_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_character_id());
  }

  // string world_token = 2;
  if (!this->_internal_world_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_world_token());
  }

  // string zone_id = 4;
  if (!this->_internal_zone_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_zone_id());
  }

  // .mmorpg.Transform spawn_transform = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.spawn_transform_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WorldEnterRequest::_class_data_ = {
    WorldEnterRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* WorldEnterRequest::GetClassData() const {
  return &_class_data_;
}

void WorldEnterRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WorldEnterRequest*>(&to_msg);
  auto& from = static_cast<const WorldEnterRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.WorldEnterRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_character_id().empty()) {
    _this->_internal_set_character_id(from._internal_character_id());
  }
  if (!from._internal_world_token().empty()) {
    _this->_internal_set_world_token(from._internal_world_token());
  }
  if (!from._internal_zone_id().empty()) {
    _this->_internal_set_zone_id(from._internal_zone_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_spawn_transform()->::mmorpg::Transform::MergeFrom(
        from._internal_spawn_transform());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorldEnterRequest::CopyFrom(const WorldEnterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.WorldEnterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WorldEnterRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* WorldEnterRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void WorldEnterRequest::InternalSwap(WorldEnterRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_id_, &other->_impl_.character_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.world_token_, &other->_impl_.world_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zone_id_, &other->_impl_.zone_id_, arena);
  swap(_impl_.spawn_transform_, other->_impl_.spawn_transform_);
}

::google::protobuf::Metadata WorldEnterRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[0]);
}
// ===================================================================

class WorldEnterResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<WorldEnterResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_._has_bits_);
  static const ::mmorpg::Transform& spawn_transform(const WorldEnterResponse* msg);
  static void set_has_spawn_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::google::protobuf::Timestamp& server_time(const WorldEnterResponse* msg);
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mmorpg::Transform& WorldEnterResponse::_Internal::spawn_transform(const WorldEnterResponse* msg) {
  return *msg->_impl_.spawn_transform_;
}
const ::google::protobuf::Timestamp& WorldEnterResponse::_Internal::server_time(const WorldEnterResponse* msg) {
  return *msg->_impl_.server_time_;
}
void WorldEnterResponse::clear_spawn_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.spawn_transform_ != nullptr) _impl_.spawn_transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void WorldEnterResponse::clear_server_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.server_time_ != nullptr) _impl_.server_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
WorldEnterResponse::WorldEnterResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.WorldEnterResponse)
}
inline PROTOBUF_NDEBUG_INLINE WorldEnterResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        player_id_(arena, from.player_id_),
        zone_id_(arena, from.zone_id_),
        error_message_(arena, from.error_message_) {}

WorldEnterResponse::WorldEnterResponse(
    ::google::protobuf::Arena* arena,
    const WorldEnterResponse& from)
    : ::google::protobuf::Message(arena) {
  WorldEnterResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.spawn_transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.spawn_transform_)
                : nullptr;
  _impl_.server_time_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.server_time_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.WorldEnterResponse)
}
inline PROTOBUF_NDEBUG_INLINE WorldEnterResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        player_id_(arena),
        zone_id_(arena),
        error_message_(arena) {}

inline void WorldEnterResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, spawn_transform_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, spawn_transform_) +
               sizeof(Impl_::error_code_));
}
WorldEnterResponse::~WorldEnterResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.WorldEnterResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WorldEnterResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.zone_id_.Destroy();
  _impl_.error_message_.Destroy();
  delete _impl_.spawn_transform_;
  delete _impl_.server_time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void WorldEnterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.WorldEnterResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.zone_id_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.spawn_transform_ != nullptr);
      _impl_.spawn_transform_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.server_time_ != nullptr);
      _impl_.server_time_->Clear();
    }
  }
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WorldEnterResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 2, 71, 2> WorldEnterResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WorldEnterResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mmorpg.ErrorCode error_code = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorldEnterResponse, _impl_.error_code_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.error_code_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WorldEnterResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.success_)}},
    // string player_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.player_id_)}},
    // string zone_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.zone_id_)}},
    // .mmorpg.Transform spawn_transform = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.spawn_transform_)}},
    // .google.protobuf.Timestamp server_time = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.server_time_)}},
    // int32 tick_rate = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(WorldEnterResponse, _impl_.tick_rate_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.tick_rate_)}},
    // string error_message = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.error_message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.success_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string player_id = 2;
    {PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.player_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string zone_id = 3;
    {PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.zone_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.Transform spawn_transform = 4;
    {PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.spawn_transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp server_time = 5;
    {PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.server_time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 tick_rate = 6;
    {PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.tick_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string error_message = 7;
    {PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.error_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 8;
    {PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.error_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\31\0\11\7\0\0\0\15\0\0\0\0\0\0\0\0"
    "mmorpg.WorldEnterResponse"
    "player_id"
    "zone_id"
    "error_message"
  }},
};

::uint8_t* WorldEnterResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.WorldEnterResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string player_id = 2;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldEnterResponse.player_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string zone_id = 3;
  if (!this->_internal_zone_id().empty()) {
    const std::string& _s = this->_internal_zone_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldEnterResponse.zone_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Transform spawn_transform = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::spawn_transform(this),
        _Internal::spawn_transform(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp server_time = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::server_time(this),
        _Internal::server_time(this).GetCachedSize(), target, stream);
  }

  // int32 tick_rate = 6;
  if (this->_internal_tick_rate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_tick_rate(), target);
  }

  // string error_message = 7;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldEnterResponse.error_message");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 8;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.WorldEnterResponse)
  return target;
}

::size_t WorldEnterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.WorldEnterResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 2;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  // string zone_id = 3;
  if (!this->_internal_zone_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_zone_id());
  }

  // string error_message = 7;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .mmorpg.Transform spawn_transform = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.spawn_transform_);
    }

    // .google.protobuf.Timestamp server_time = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.server_time_);
    }

  }
  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // int32 tick_rate = 6;
  if (this->_internal_tick_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_tick_rate());
  }

  // .mmorpg.ErrorCode error_code = 8;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WorldEnterResponse::_class_data_ = {
    WorldEnterResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* WorldEnterResponse::GetClassData() const {
  return &_class_data_;
}

void WorldEnterResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WorldEnterResponse*>(&to_msg);
  auto& from = static_cast<const WorldEnterResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.WorldEnterResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_zone_id().empty()) {
    _this->_internal_set_zone_id(from._internal_zone_id());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_spawn_transform()->::mmorpg::Transform::MergeFrom(
          from._internal_spawn_transform());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_server_time()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_server_time());
    }
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_tick_rate() != 0) {
    _this->_internal_set_tick_rate(from._internal_tick_rate());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorldEnterResponse::CopyFrom(const WorldEnterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.WorldEnterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WorldEnterResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* WorldEnterResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void WorldEnterResponse::InternalSwap(WorldEnterResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zone_id_, &other->_impl_.zone_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.error_code_)
      + sizeof(WorldEnterResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(WorldEnterResponse, _impl_.spawn_transform_)>(
          reinterpret_cast<char*>(&_impl_.spawn_transform_),
          reinterpret_cast<char*>(&other->_impl_.spawn_transform_));
}

::google::protobuf::Metadata WorldEnterResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[1]);
}
// ===================================================================

class WorldLeaveRequest::_Internal {
 public:
};

WorldLeaveRequest::WorldLeaveRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.WorldLeaveRequest)
}
inline PROTOBUF_NDEBUG_INLINE WorldLeaveRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : player_id_(arena, from.player_id_),
        reason_(arena, from.reason_),
        _cached_size_{0} {}

WorldLeaveRequest::WorldLeaveRequest(
    ::google::protobuf::Arena* arena,
    const WorldLeaveRequest& from)
    : ::google::protobuf::Message(arena) {
  WorldLeaveRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:mmorpg.WorldLeaveRequest)
}
inline PROTOBUF_NDEBUG_INLINE WorldLeaveRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : player_id_(arena),
        reason_(arena),
        _cached_size_{0} {}

inline void WorldLeaveRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
WorldLeaveRequest::~WorldLeaveRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.WorldLeaveRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WorldLeaveRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.reason_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void WorldLeaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.WorldLeaveRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.reason_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WorldLeaveRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 48, 2> WorldLeaveRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_WorldLeaveRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string reason = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WorldLeaveRequest, _impl_.reason_)}},
    // string player_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WorldLeaveRequest, _impl_.player_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string player_id = 1;
    {PROTOBUF_FIELD_OFFSET(WorldLeaveRequest, _impl_.player_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string reason = 2;
    {PROTOBUF_FIELD_OFFSET(WorldLeaveRequest, _impl_.reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\11\6\0\0\0\0\0"
    "mmorpg.WorldLeaveRequest"
    "player_id"
    "reason"
  }},
};

::uint8_t* WorldLeaveRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.WorldLeaveRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldLeaveRequest.player_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    const std::string& _s = this->_internal_reason();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldLeaveRequest.reason");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.WorldLeaveRequest)
  return target;
}

::size_t WorldLeaveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.WorldLeaveRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WorldLeaveRequest::_class_data_ = {
    WorldLeaveRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* WorldLeaveRequest::GetClassData() const {
  return &_class_data_;
}

void WorldLeaveRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WorldLeaveRequest*>(&to_msg);
  auto& from = static_cast<const WorldLeaveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.WorldLeaveRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorldLeaveRequest::CopyFrom(const WorldLeaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.WorldLeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WorldLeaveRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* WorldLeaveRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void WorldLeaveRequest::InternalSwap(WorldLeaveRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
}

::google::protobuf::Metadata WorldLeaveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[2]);
}
// ===================================================================

class WorldLeaveResponse::_Internal {
 public:
};

WorldLeaveResponse::WorldLeaveResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.WorldLeaveResponse)
}
inline PROTOBUF_NDEBUG_INLINE WorldLeaveResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_(arena, from.message_),
        _cached_size_{0} {}

WorldLeaveResponse::WorldLeaveResponse(
    ::google::protobuf::Arena* arena,
    const WorldLeaveResponse& from)
    : ::google::protobuf::Message(arena) {
  WorldLeaveResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.WorldLeaveResponse)
}
inline PROTOBUF_NDEBUG_INLINE WorldLeaveResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void WorldLeaveResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
WorldLeaveResponse::~WorldLeaveResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.WorldLeaveResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WorldLeaveResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void WorldLeaveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.WorldLeaveResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WorldLeaveResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 41, 2> WorldLeaveResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_WorldLeaveResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WorldLeaveResponse, _impl_.message_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WorldLeaveResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(WorldLeaveResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(WorldLeaveResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(WorldLeaveResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\0\7\0\0\0\0\0"
    "mmorpg.WorldLeaveResponse"
    "message"
  }},
};

::uint8_t* WorldLeaveResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.WorldLeaveResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldLeaveResponse.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.WorldLeaveResponse)
  return target;
}

::size_t WorldLeaveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.WorldLeaveResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WorldLeaveResponse::_class_data_ = {
    WorldLeaveResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* WorldLeaveResponse::GetClassData() const {
  return &_class_data_;
}

void WorldLeaveResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WorldLeaveResponse*>(&to_msg);
  auto& from = static_cast<const WorldLeaveResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.WorldLeaveResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorldLeaveResponse::CopyFrom(const WorldLeaveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.WorldLeaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WorldLeaveResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* WorldLeaveResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void WorldLeaveResponse::InternalSwap(WorldLeaveResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata WorldLeaveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[3]);
}
// ===================================================================

class PlayerPositionUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerPositionUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_._has_bits_);
  static const ::mmorpg::Transform& transform(const PlayerPositionUpdate* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mmorpg::Vector3& velocity(const PlayerPositionUpdate* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mmorpg::Vector3& acceleration(const PlayerPositionUpdate* msg);
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::google::protobuf::Timestamp& timestamp(const PlayerPositionUpdate* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::mmorpg::Transform& PlayerPositionUpdate::_Internal::transform(const PlayerPositionUpdate* msg) {
  return *msg->_impl_.transform_;
}
const ::mmorpg::Vector3& PlayerPositionUpdate::_Internal::velocity(const PlayerPositionUpdate* msg) {
  return *msg->_impl_.velocity_;
}
const ::mmorpg::Vector3& PlayerPositionUpdate::_Internal::acceleration(const PlayerPositionUpdate* msg) {
  return *msg->_impl_.acceleration_;
}
const ::google::protobuf::Timestamp& PlayerPositionUpdate::_Internal::timestamp(const PlayerPositionUpdate* msg) {
  return *msg->_impl_.timestamp_;
}
void PlayerPositionUpdate::clear_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PlayerPositionUpdate::clear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void PlayerPositionUpdate::clear_acceleration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.acceleration_ != nullptr) _impl_.acceleration_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void PlayerPositionUpdate::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
PlayerPositionUpdate::PlayerPositionUpdate(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.PlayerPositionUpdate)
}
inline PROTOBUF_NDEBUG_INLINE PlayerPositionUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        player_id_(arena, from.player_id_) {}

PlayerPositionUpdate::PlayerPositionUpdate(
    ::google::protobuf::Arena* arena,
    const PlayerPositionUpdate& from)
    : ::google::protobuf::Message(arena) {
  PlayerPositionUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.transform_)
                : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::mmorpg::Vector3>(arena, *from._impl_.velocity_)
                : nullptr;
  _impl_.acceleration_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::mmorpg::Vector3>(arena, *from._impl_.acceleration_)
                : nullptr;
  _impl_.timestamp_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, movement_flags_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, movement_flags_),
           offsetof(Impl_, sequence_) -
               offsetof(Impl_, movement_flags_) +
               sizeof(Impl_::sequence_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.PlayerPositionUpdate)
}
inline PROTOBUF_NDEBUG_INLINE PlayerPositionUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        player_id_(arena) {}

inline void PlayerPositionUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, transform_),
           0,
           offsetof(Impl_, sequence_) -
               offsetof(Impl_, transform_) +
               sizeof(Impl_::sequence_));
}
PlayerPositionUpdate::~PlayerPositionUpdate() {
  // @@protoc_insertion_point(destructor:mmorpg.PlayerPositionUpdate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerPositionUpdate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  delete _impl_.transform_;
  delete _impl_.velocity_;
  delete _impl_.acceleration_;
  delete _impl_.timestamp_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PlayerPositionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.PlayerPositionUpdate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.transform_ != nullptr);
      _impl_.transform_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.acceleration_ != nullptr);
      _impl_.acceleration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.timestamp_ != nullptr);
      _impl_.timestamp_->Clear();
    }
  }
  ::memset(&_impl_.movement_flags_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sequence_) -
      reinterpret_cast<char*>(&_impl_.movement_flags_)) + sizeof(_impl_.sequence_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PlayerPositionUpdate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 4, 45, 2> PlayerPositionUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PlayerPositionUpdate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string player_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.player_id_)}},
    // .mmorpg.Transform transform = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.transform_)}},
    // .mmorpg.Vector3 velocity = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.velocity_)}},
    // .mmorpg.Vector3 acceleration = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.acceleration_)}},
    // uint32 movement_flags = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerPositionUpdate, _impl_.movement_flags_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.movement_flags_)}},
    // .google.protobuf.Timestamp timestamp = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 3, PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.timestamp_)}},
    // uint32 sequence = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerPositionUpdate, _impl_.sequence_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.sequence_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string player_id = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.player_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.Transform transform = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.Vector3 velocity = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.Vector3 acceleration = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.acceleration_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 movement_flags = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.movement_flags_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .google.protobuf.Timestamp timestamp = 6;
    {PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.timestamp_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 sequence = 7;
    {PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.sequence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
    {::_pbi::TcParser::GetTable<::mmorpg::Vector3>()},
    {::_pbi::TcParser::GetTable<::mmorpg::Vector3>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\33\11\0\0\0\0\0\0"
    "mmorpg.PlayerPositionUpdate"
    "player_id"
  }},
};

::uint8_t* PlayerPositionUpdate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.PlayerPositionUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.PlayerPositionUpdate.player_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Transform transform = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // .mmorpg.Vector3 velocity = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // .mmorpg.Vector3 acceleration = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::acceleration(this),
        _Internal::acceleration(this).GetCachedSize(), target, stream);
  }

  // uint32 movement_flags = 5;
  if (this->_internal_movement_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_movement_flags(), target);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // uint32 sequence = 7;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_sequence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.PlayerPositionUpdate)
  return target;
}

::size_t PlayerPositionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.PlayerPositionUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .mmorpg.Transform transform = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transform_);
    }

    // .mmorpg.Vector3 velocity = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_);
    }

    // .mmorpg.Vector3 acceleration = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.acceleration_);
    }

    // .google.protobuf.Timestamp timestamp = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_);
    }

  }
  // uint32 movement_flags = 5;
  if (this->_internal_movement_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_movement_flags());
  }

  // uint32 sequence = 7;
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_sequence());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PlayerPositionUpdate::_class_data_ = {
    PlayerPositionUpdate::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PlayerPositionUpdate::GetClassData() const {
  return &_class_data_;
}

void PlayerPositionUpdate::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PlayerPositionUpdate*>(&to_msg);
  auto& from = static_cast<const PlayerPositionUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.PlayerPositionUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_transform()->::mmorpg::Transform::MergeFrom(
          from._internal_transform());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_velocity()->::mmorpg::Vector3::MergeFrom(
          from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_acceleration()->::mmorpg::Vector3::MergeFrom(
          from._internal_acceleration());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
          from._internal_timestamp());
    }
  }
  if (from._internal_movement_flags() != 0) {
    _this->_internal_set_movement_flags(from._internal_movement_flags());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerPositionUpdate::CopyFrom(const PlayerPositionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.PlayerPositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PlayerPositionUpdate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PlayerPositionUpdate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PlayerPositionUpdate::InternalSwap(PlayerPositionUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.sequence_)
      + sizeof(PlayerPositionUpdate::_impl_.sequence_)
      - PROTOBUF_FIELD_OFFSET(PlayerPositionUpdate, _impl_.transform_)>(
          reinterpret_cast<char*>(&_impl_.transform_),
          reinterpret_cast<char*>(&other->_impl_.transform_));
}

::google::protobuf::Metadata PlayerPositionUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[4]);
}
// ===================================================================

class AreaUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<AreaUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& server_time(const AreaUpdate* msg);
  static void set_has_server_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& AreaUpdate::_Internal::server_time(const AreaUpdate* msg) {
  return *msg->_impl_.server_time_;
}
void AreaUpdate::clear_server_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.server_time_ != nullptr) _impl_.server_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AreaUpdate::AreaUpdate(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.AreaUpdate)
}
inline PROTOBUF_NDEBUG_INLINE AreaUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        players_{visibility, arena, from.players_},
        npcs_{visibility, arena, from.npcs_},
        objects_{visibility, arena, from.objects_},
        events_{visibility, arena, from.events_} {}

AreaUpdate::AreaUpdate(
    ::google::protobuf::Arena* arena,
    const AreaUpdate& from)
    : ::google::protobuf::Message(arena) {
  AreaUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.server_time_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.server_time_)
                : nullptr;
  _impl_.tick_ = from._impl_.tick_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.AreaUpdate)
}
inline PROTOBUF_NDEBUG_INLINE AreaUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        players_{visibility, arena},
        npcs_{visibility, arena},
        objects_{visibility, arena},
        events_{visibility, arena} {}

inline void AreaUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, server_time_),
           0,
           offsetof(Impl_, tick_) -
               offsetof(Impl_, server_time_) +
               sizeof(Impl_::tick_));
}
AreaUpdate::~AreaUpdate() {
  // @@protoc_insertion_point(destructor:mmorpg.AreaUpdate)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AreaUpdate::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.server_time_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AreaUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.AreaUpdate)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.npcs_.Clear();
  _impl_.objects_.Clear();
  _impl_.events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.server_time_ != nullptr);
    _impl_.server_time_->Clear();
  }
  _impl_.tick_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AreaUpdate::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 5, 0, 2> AreaUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AreaUpdate_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .mmorpg.PlayerState players = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.players_)}},
    // repeated .mmorpg.NPCState npcs = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.npcs_)}},
    // repeated .mmorpg.WorldObject objects = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.objects_)}},
    // repeated .mmorpg.EntityEvent events = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.events_)}},
    // .google.protobuf.Timestamp server_time = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 4, PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.server_time_)}},
    // uint32 tick = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AreaUpdate, _impl_.tick_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.tick_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .mmorpg.PlayerState players = 1;
    {PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.players_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .mmorpg.NPCState npcs = 2;
    {PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.npcs_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .mmorpg.WorldObject objects = 3;
    {PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.objects_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .mmorpg.EntityEvent events = 4;
    {PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.events_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp server_time = 5;
    {PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.server_time_), _Internal::kHasBitsOffset + 0, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 tick = 6;
    {PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.tick_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::PlayerState>()},
    {::_pbi::TcParser::GetTable<::mmorpg::NPCState>()},
    {::_pbi::TcParser::GetTable<::mmorpg::WorldObject>()},
    {::_pbi::TcParser::GetTable<::mmorpg::EntityEvent>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

::uint8_t* AreaUpdate::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.AreaUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .mmorpg.PlayerState players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mmorpg.NPCState npcs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_npcs_size()); i < n; i++) {
    const auto& repfield = this->_internal_npcs().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mmorpg.WorldObject objects = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_objects_size()); i < n; i++) {
    const auto& repfield = this->_internal_objects().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .mmorpg.EntityEvent events = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp server_time = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::server_time(this),
        _Internal::server_time(this).GetCachedSize(), target, stream);
  }

  // uint32 tick = 6;
  if (this->_internal_tick() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_tick(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.AreaUpdate)
  return target;
}

::size_t AreaUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.AreaUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mmorpg.PlayerState players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_internal_players()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .mmorpg.NPCState npcs = 2;
  total_size += 1UL * this->_internal_npcs_size();
  for (const auto& msg : this->_internal_npcs()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .mmorpg.WorldObject objects = 3;
  total_size += 1UL * this->_internal_objects_size();
  for (const auto& msg : this->_internal_objects()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .mmorpg.EntityEvent events = 4;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_internal_events()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // .google.protobuf.Timestamp server_time = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.server_time_);
  }

  // uint32 tick = 6;
  if (this->_internal_tick() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_tick());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AreaUpdate::_class_data_ = {
    AreaUpdate::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AreaUpdate::GetClassData() const {
  return &_class_data_;
}

void AreaUpdate::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AreaUpdate*>(&to_msg);
  auto& from = static_cast<const AreaUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.AreaUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_players()->MergeFrom(
      from._internal_players());
  _this->_internal_mutable_npcs()->MergeFrom(
      from._internal_npcs());
  _this->_internal_mutable_objects()->MergeFrom(
      from._internal_objects());
  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_server_time()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_server_time());
  }
  if (from._internal_tick() != 0) {
    _this->_internal_set_tick(from._internal_tick());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AreaUpdate::CopyFrom(const AreaUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.AreaUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AreaUpdate::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AreaUpdate::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AreaUpdate::InternalSwap(AreaUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  _impl_.npcs_.InternalSwap(&other->_impl_.npcs_);
  _impl_.objects_.InternalSwap(&other->_impl_.objects_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.tick_)
      + sizeof(AreaUpdate::_impl_.tick_)
      - PROTOBUF_FIELD_OFFSET(AreaUpdate, _impl_.server_time_)>(
          reinterpret_cast<char*>(&_impl_.server_time_),
          reinterpret_cast<char*>(&other->_impl_.server_time_));
}

::google::protobuf::Metadata AreaUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[5]);
}
// ===================================================================

PlayerState_VisibleEquipmentEntry_DoNotUse::PlayerState_VisibleEquipmentEntry_DoNotUse() {}
PlayerState_VisibleEquipmentEntry_DoNotUse::PlayerState_VisibleEquipmentEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata PlayerState_VisibleEquipmentEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[6]);
}
// ===================================================================

class PlayerState::_Internal {
 public:
  using HasBits = decltype(std::declval<PlayerState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PlayerState, _impl_._has_bits_);
  static const ::mmorpg::Transform& transform(const PlayerState* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mmorpg::Vector3& velocity(const PlayerState* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mmorpg::Transform& PlayerState::_Internal::transform(const PlayerState* msg) {
  return *msg->_impl_.transform_;
}
const ::mmorpg::Vector3& PlayerState::_Internal::velocity(const PlayerState* msg) {
  return *msg->_impl_.velocity_;
}
void PlayerState::clear_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PlayerState::clear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PlayerState::PlayerState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.PlayerState)
}
inline PROTOBUF_NDEBUG_INLINE PlayerState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        status_effects_{visibility, arena, from.status_effects_},
        visible_equipment_{visibility, arena, from.visible_equipment_},
        player_id_(arena, from.player_id_),
        character_name_(arena, from.character_name_),
        current_animation_(arena, from.current_animation_) {}

PlayerState::PlayerState(
    ::google::protobuf::Arena* arena,
    const PlayerState& from)
    : ::google::protobuf::Message(arena) {
  PlayerState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.transform_)
                : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::mmorpg::Vector3>(arena, *from._impl_.velocity_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, class__),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, class__),
           offsetof(Impl_, animation_time_) -
               offsetof(Impl_, class__) +
               sizeof(Impl_::animation_time_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.PlayerState)
}
inline PROTOBUF_NDEBUG_INLINE PlayerState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        status_effects_{visibility, arena},
        visible_equipment_{visibility, arena},
        player_id_(arena),
        character_name_(arena),
        current_animation_(arena) {}

inline void PlayerState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, transform_),
           0,
           offsetof(Impl_, animation_time_) -
               offsetof(Impl_, transform_) +
               sizeof(Impl_::animation_time_));
}
PlayerState::~PlayerState() {
  // @@protoc_insertion_point(destructor:mmorpg.PlayerState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void PlayerState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.character_name_.Destroy();
  _impl_.current_animation_.Destroy();
  delete _impl_.transform_;
  delete _impl_.velocity_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void PlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.PlayerState)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_effects_.Clear();
  _impl_.visible_equipment_.Clear();
  _impl_.player_id_.ClearToEmpty();
  _impl_.character_name_.ClearToEmpty();
  _impl_.current_animation_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.transform_ != nullptr);
      _impl_.transform_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  ::memset(&_impl_.class__, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.animation_time_) -
      reinterpret_cast<char*>(&_impl_.class__)) + sizeof(_impl_.animation_time_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* PlayerState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 4, 100, 2> PlayerState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlayerState, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_PlayerState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string player_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.player_id_)}},
    // string character_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.character_name_)}},
    // .mmorpg.CharacterClass class = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerState, _impl_.class__), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.class__)}},
    // int32 level = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerState, _impl_.level_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.level_)}},
    // .mmorpg.Transform transform = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.transform_)}},
    // .mmorpg.Vector3 velocity = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.velocity_)}},
    // uint32 movement_flags = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerState, _impl_.movement_flags_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.movement_flags_)}},
    // int32 health = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerState, _impl_.health_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.health_)}},
    // int32 max_health = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerState, _impl_.max_health_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.max_health_)}},
    // int32 mana = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerState, _impl_.mana_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.mana_)}},
    // int32 max_mana = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerState, _impl_.max_mana_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.max_mana_)}},
    // repeated .mmorpg.StatusEffect status_effects = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 2, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.status_effects_)}},
    // .mmorpg.CombatState combat_state = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerState, _impl_.combat_state_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.combat_state_)}},
    // string current_animation = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.current_animation_)}},
    // float animation_time = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.animation_time_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string player_id = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.player_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string character_name = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.character_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.CharacterClass class = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.class__), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 level = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .mmorpg.Transform transform = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.Vector3 velocity = 6;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 movement_flags = 7;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.movement_flags_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int32 health = 8;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.health_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_health = 9;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.max_health_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 mana = 10;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.mana_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_mana = 11;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.max_mana_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .mmorpg.StatusEffect status_effects = 12;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.status_effects_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.CombatState combat_state = 13;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.combat_state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string current_animation = 14;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.current_animation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float animation_time = 15;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.animation_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // map<string, string> visible_equipment = 16;
    {PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.visible_equipment_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
    {::_pbi::TcParser::GetTable<::mmorpg::Vector3>()},
    {::_pbi::TcParser::GetTable<::mmorpg::StatusEffect>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(PlayerState()._impl_.visible_equipment_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\22\11\16\0\0\0\0\0\0\0\0\0\0\0\21\0\21\0\0\0\0\0\0\0"
    "mmorpg.PlayerState"
    "player_id"
    "character_name"
    "current_animation"
    "visible_equipment"
  }},
};

::uint8_t* PlayerState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.PlayerState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.PlayerState.player_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string character_name = 2;
  if (!this->_internal_character_name().empty()) {
    const std::string& _s = this->_internal_character_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.PlayerState.character_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .mmorpg.CharacterClass class = 3;
  if (this->_internal_class_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_class_(), target);
  }

  // int32 level = 4;
  if (this->_internal_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_level(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Transform transform = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // .mmorpg.Vector3 velocity = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // uint32 movement_flags = 7;
  if (this->_internal_movement_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_movement_flags(), target);
  }

  // int32 health = 8;
  if (this->_internal_health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_health(), target);
  }

  // int32 max_health = 9;
  if (this->_internal_max_health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_max_health(), target);
  }

  // int32 mana = 10;
  if (this->_internal_mana() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_mana(), target);
  }

  // int32 max_mana = 11;
  if (this->_internal_max_mana() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_max_mana(), target);
  }

  // repeated .mmorpg.StatusEffect status_effects = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_status_effects_size()); i < n; i++) {
    const auto& repfield = this->_internal_status_effects().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .mmorpg.CombatState combat_state = 13;
  if (this->_internal_combat_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        13, this->_internal_combat_state(), target);
  }

  // string current_animation = 14;
  if (!this->_internal_current_animation().empty()) {
    const std::string& _s = this->_internal_current_animation();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.PlayerState.current_animation");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // float animation_time = 15;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_animation_time = this->_internal_animation_time();
  ::uint32_t raw_animation_time;
  memcpy(&raw_animation_time, &tmp_animation_time, sizeof(tmp_animation_time));
  if (raw_animation_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        15, this->_internal_animation_time(), target);
  }

  // map<string, string> visible_equipment = 16;
  if (!_internal_visible_equipment().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_visible_equipment();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            16, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.PlayerState.visible_equipment");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.PlayerState.visible_equipment");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            16, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.PlayerState.visible_equipment");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.PlayerState.visible_equipment");
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.PlayerState)
  return target;
}

::size_t PlayerState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.PlayerState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mmorpg.StatusEffect status_effects = 12;
  total_size += 1UL * this->_internal_status_effects_size();
  for (const auto& msg : this->_internal_status_effects()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // map<string, string> visible_equipment = 16;
  total_size += 2 * ::google::protobuf::internal::FromIntSize(_internal_visible_equipment_size());
  for (const auto& entry : _internal_visible_equipment()) {
    total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  // string character_name = 2;
  if (!this->_internal_character_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_character_name());
  }

  // string current_animation = 14;
  if (!this->_internal_current_animation().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_current_animation());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .mmorpg.Transform transform = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transform_);
    }

    // .mmorpg.Vector3 velocity = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_);
    }

  }
  // .mmorpg.CharacterClass class = 3;
  if (this->_internal_class_() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_class_());
  }

  // int32 level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  // uint32 movement_flags = 7;
  if (this->_internal_movement_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_movement_flags());
  }

  // int32 health = 8;
  if (this->_internal_health() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_health());
  }

  // int32 max_health = 9;
  if (this->_internal_max_health() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_health());
  }

  // int32 mana = 10;
  if (this->_internal_mana() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_mana());
  }

  // int32 max_mana = 11;
  if (this->_internal_max_mana() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_mana());
  }

  // .mmorpg.CombatState combat_state = 13;
  if (this->_internal_combat_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_combat_state());
  }

  // float animation_time = 15;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_animation_time = this->_internal_animation_time();
  ::uint32_t raw_animation_time;
  memcpy(&raw_animation_time, &tmp_animation_time, sizeof(tmp_animation_time));
  if (raw_animation_time != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData PlayerState::_class_data_ = {
    PlayerState::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* PlayerState::GetClassData() const {
  return &_class_data_;
}

void PlayerState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<PlayerState*>(&to_msg);
  auto& from = static_cast<const PlayerState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.PlayerState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_status_effects()->MergeFrom(
      from._internal_status_effects());
  _this->_impl_.visible_equipment_.MergeFrom(from._impl_.visible_equipment_);
  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_character_name().empty()) {
    _this->_internal_set_character_name(from._internal_character_name());
  }
  if (!from._internal_current_animation().empty()) {
    _this->_internal_set_current_animation(from._internal_current_animation());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_transform()->::mmorpg::Transform::MergeFrom(
          from._internal_transform());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_velocity()->::mmorpg::Vector3::MergeFrom(
          from._internal_velocity());
    }
  }
  if (from._internal_class_() != 0) {
    _this->_internal_set_class_(from._internal_class_());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_movement_flags() != 0) {
    _this->_internal_set_movement_flags(from._internal_movement_flags());
  }
  if (from._internal_health() != 0) {
    _this->_internal_set_health(from._internal_health());
  }
  if (from._internal_max_health() != 0) {
    _this->_internal_set_max_health(from._internal_max_health());
  }
  if (from._internal_mana() != 0) {
    _this->_internal_set_mana(from._internal_mana());
  }
  if (from._internal_max_mana() != 0) {
    _this->_internal_set_max_mana(from._internal_max_mana());
  }
  if (from._internal_combat_state() != 0) {
    _this->_internal_set_combat_state(from._internal_combat_state());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_animation_time = from._internal_animation_time();
  ::uint32_t raw_animation_time;
  memcpy(&raw_animation_time, &tmp_animation_time, sizeof(tmp_animation_time));
  if (raw_animation_time != 0) {
    _this->_internal_set_animation_time(from._internal_animation_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerState::CopyFrom(const PlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.PlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool PlayerState::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* PlayerState::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void PlayerState::InternalSwap(PlayerState* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.status_effects_.InternalSwap(&other->_impl_.status_effects_);
  _impl_.visible_equipment_.InternalSwap(&other->_impl_.visible_equipment_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.character_name_, &other->_impl_.character_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_animation_, &other->_impl_.current_animation_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.animation_time_)
      + sizeof(PlayerState::_impl_.animation_time_)
      - PROTOBUF_FIELD_OFFSET(PlayerState, _impl_.transform_)>(
          reinterpret_cast<char*>(&_impl_.transform_),
          reinterpret_cast<char*>(&other->_impl_.transform_));
}

::google::protobuf::Metadata PlayerState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[7]);
}
// ===================================================================

class NPCState::_Internal {
 public:
  using HasBits = decltype(std::declval<NPCState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NPCState, _impl_._has_bits_);
  static const ::mmorpg::Transform& transform(const NPCState* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mmorpg::Vector3& velocity(const NPCState* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mmorpg::Transform& NPCState::_Internal::transform(const NPCState* msg) {
  return *msg->_impl_.transform_;
}
const ::mmorpg::Vector3& NPCState::_Internal::velocity(const NPCState* msg) {
  return *msg->_impl_.velocity_;
}
void NPCState::clear_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void NPCState::clear_velocity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.velocity_ != nullptr) _impl_.velocity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
NPCState::NPCState(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.NPCState)
}
inline PROTOBUF_NDEBUG_INLINE NPCState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        status_effects_{visibility, arena, from.status_effects_},
        npc_id_(arena, from.npc_id_),
        npc_type_(arena, from.npc_type_),
        display_name_(arena, from.display_name_),
        target_id_(arena, from.target_id_),
        current_animation_(arena, from.current_animation_) {}

NPCState::NPCState(
    ::google::protobuf::Arena* arena,
    const NPCState& from)
    : ::google::protobuf::Message(arena) {
  NPCState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.transform_)
                : nullptr;
  _impl_.velocity_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::mmorpg::Vector3>(arena, *from._impl_.velocity_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, health_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, health_),
           offsetof(Impl_, animation_time_) -
               offsetof(Impl_, health_) +
               sizeof(Impl_::animation_time_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.NPCState)
}
inline PROTOBUF_NDEBUG_INLINE NPCState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        status_effects_{visibility, arena},
        npc_id_(arena),
        npc_type_(arena),
        display_name_(arena),
        target_id_(arena),
        current_animation_(arena) {}

inline void NPCState::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, transform_),
           0,
           offsetof(Impl_, animation_time_) -
               offsetof(Impl_, transform_) +
               sizeof(Impl_::animation_time_));
}
NPCState::~NPCState() {
  // @@protoc_insertion_point(destructor:mmorpg.NPCState)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NPCState::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.npc_id_.Destroy();
  _impl_.npc_type_.Destroy();
  _impl_.display_name_.Destroy();
  _impl_.target_id_.Destroy();
  _impl_.current_animation_.Destroy();
  delete _impl_.transform_;
  delete _impl_.velocity_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void NPCState::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.NPCState)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_effects_.Clear();
  _impl_.npc_id_.ClearToEmpty();
  _impl_.npc_type_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.target_id_.ClearToEmpty();
  _impl_.current_animation_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.transform_ != nullptr);
      _impl_.transform_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.velocity_ != nullptr);
      _impl_.velocity_->Clear();
    }
  }
  ::memset(&_impl_.health_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.animation_time_) -
      reinterpret_cast<char*>(&_impl_.health_)) + sizeof(_impl_.animation_time_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NPCState::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 3, 92, 2> NPCState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NPCState, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NPCState_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float animation_time = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.animation_time_)}},
    // string npc_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.npc_id_)}},
    // string npc_type = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.npc_type_)}},
    // string display_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.display_name_)}},
    // .mmorpg.Transform transform = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.transform_)}},
    // .mmorpg.Vector3 velocity = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.velocity_)}},
    // int32 health = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NPCState, _impl_.health_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.health_)}},
    // int32 max_health = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NPCState, _impl_.max_health_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.max_health_)}},
    // int32 level = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NPCState, _impl_.level_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.level_)}},
    // .mmorpg.NPCBehaviorState behavior_state = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NPCState, _impl_.behavior_state_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.behavior_state_)}},
    // string target_id = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.target_id_)}},
    // repeated .mmorpg.StatusEffect status_effects = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 2, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.status_effects_)}},
    // bool is_hostile = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NPCState, _impl_.is_hostile_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.is_hostile_)}},
    // bool is_quest_giver = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NPCState, _impl_.is_quest_giver_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.is_quest_giver_)}},
    // bool is_vendor = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(NPCState, _impl_.is_vendor_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.is_vendor_)}},
    // string current_animation = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(NPCState, _impl_.current_animation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string npc_id = 1;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.npc_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string npc_type = 2;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.npc_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string display_name = 3;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.display_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.Transform transform = 4;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.Vector3 velocity = 5;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.velocity_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 health = 6;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.health_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_health = 7;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.max_health_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 level = 8;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .mmorpg.NPCBehaviorState behavior_state = 9;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.behavior_state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string target_id = 10;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.target_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .mmorpg.StatusEffect status_effects = 11;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.status_effects_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_hostile = 12;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.is_hostile_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_quest_giver = 13;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.is_quest_giver_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_vendor = 14;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.is_vendor_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string current_animation = 15;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.current_animation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float animation_time = 16;
    {PROTOBUF_FIELD_OFFSET(NPCState, _impl_.animation_time_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
    {::_pbi::TcParser::GetTable<::mmorpg::Vector3>()},
    {::_pbi::TcParser::GetTable<::mmorpg::StatusEffect>()},
  }}, {{
    "\17\6\10\14\0\0\0\0\0\0\11\0\0\0\0\21\0\0\0\0\0\0\0\0"
    "mmorpg.NPCState"
    "npc_id"
    "npc_type"
    "display_name"
    "target_id"
    "current_animation"
  }},
};

::uint8_t* NPCState::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.NPCState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string npc_id = 1;
  if (!this->_internal_npc_id().empty()) {
    const std::string& _s = this->_internal_npc_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.NPCState.npc_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string npc_type = 2;
  if (!this->_internal_npc_type().empty()) {
    const std::string& _s = this->_internal_npc_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.NPCState.npc_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string display_name = 3;
  if (!this->_internal_display_name().empty()) {
    const std::string& _s = this->_internal_display_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.NPCState.display_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Transform transform = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // .mmorpg.Vector3 velocity = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // int32 health = 6;
  if (this->_internal_health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_health(), target);
  }

  // int32 max_health = 7;
  if (this->_internal_max_health() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<7>(
            stream, this->_internal_max_health(), target);
  }

  // int32 level = 8;
  if (this->_internal_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_level(), target);
  }

  // .mmorpg.NPCBehaviorState behavior_state = 9;
  if (this->_internal_behavior_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_behavior_state(), target);
  }

  // string target_id = 10;
  if (!this->_internal_target_id().empty()) {
    const std::string& _s = this->_internal_target_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.NPCState.target_id");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // repeated .mmorpg.StatusEffect status_effects = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_status_effects_size()); i < n; i++) {
    const auto& repfield = this->_internal_status_effects().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool is_hostile = 12;
  if (this->_internal_is_hostile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_is_hostile(), target);
  }

  // bool is_quest_giver = 13;
  if (this->_internal_is_quest_giver() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        13, this->_internal_is_quest_giver(), target);
  }

  // bool is_vendor = 14;
  if (this->_internal_is_vendor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_is_vendor(), target);
  }

  // string current_animation = 15;
  if (!this->_internal_current_animation().empty()) {
    const std::string& _s = this->_internal_current_animation();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.NPCState.current_animation");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // float animation_time = 16;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_animation_time = this->_internal_animation_time();
  ::uint32_t raw_animation_time;
  memcpy(&raw_animation_time, &tmp_animation_time, sizeof(tmp_animation_time));
  if (raw_animation_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        16, this->_internal_animation_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.NPCState)
  return target;
}

::size_t NPCState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.NPCState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mmorpg.StatusEffect status_effects = 11;
  total_size += 1UL * this->_internal_status_effects_size();
  for (const auto& msg : this->_internal_status_effects()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string npc_id = 1;
  if (!this->_internal_npc_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_npc_id());
  }

  // string npc_type = 2;
  if (!this->_internal_npc_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_npc_type());
  }

  // string display_name = 3;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_display_name());
  }

  // string target_id = 10;
  if (!this->_internal_target_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_target_id());
  }

  // string current_animation = 15;
  if (!this->_internal_current_animation().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_current_animation());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .mmorpg.Transform transform = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transform_);
    }

    // .mmorpg.Vector3 velocity = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.velocity_);
    }

  }
  // int32 health = 6;
  if (this->_internal_health() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_health());
  }

  // int32 max_health = 7;
  if (this->_internal_max_health() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_max_health());
  }

  // int32 level = 8;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  // .mmorpg.NPCBehaviorState behavior_state = 9;
  if (this->_internal_behavior_state() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_behavior_state());
  }

  // bool is_hostile = 12;
  if (this->_internal_is_hostile() != 0) {
    total_size += 2;
  }

  // bool is_quest_giver = 13;
  if (this->_internal_is_quest_giver() != 0) {
    total_size += 2;
  }

  // bool is_vendor = 14;
  if (this->_internal_is_vendor() != 0) {
    total_size += 2;
  }

  // float animation_time = 16;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_animation_time = this->_internal_animation_time();
  ::uint32_t raw_animation_time;
  memcpy(&raw_animation_time, &tmp_animation_time, sizeof(tmp_animation_time));
  if (raw_animation_time != 0) {
    total_size += 6;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NPCState::_class_data_ = {
    NPCState::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* NPCState::GetClassData() const {
  return &_class_data_;
}

void NPCState::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NPCState*>(&to_msg);
  auto& from = static_cast<const NPCState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.NPCState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_status_effects()->MergeFrom(
      from._internal_status_effects());
  if (!from._internal_npc_id().empty()) {
    _this->_internal_set_npc_id(from._internal_npc_id());
  }
  if (!from._internal_npc_type().empty()) {
    _this->_internal_set_npc_type(from._internal_npc_type());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_target_id().empty()) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (!from._internal_current_animation().empty()) {
    _this->_internal_set_current_animation(from._internal_current_animation());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_transform()->::mmorpg::Transform::MergeFrom(
          from._internal_transform());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_velocity()->::mmorpg::Vector3::MergeFrom(
          from._internal_velocity());
    }
  }
  if (from._internal_health() != 0) {
    _this->_internal_set_health(from._internal_health());
  }
  if (from._internal_max_health() != 0) {
    _this->_internal_set_max_health(from._internal_max_health());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_behavior_state() != 0) {
    _this->_internal_set_behavior_state(from._internal_behavior_state());
  }
  if (from._internal_is_hostile() != 0) {
    _this->_internal_set_is_hostile(from._internal_is_hostile());
  }
  if (from._internal_is_quest_giver() != 0) {
    _this->_internal_set_is_quest_giver(from._internal_is_quest_giver());
  }
  if (from._internal_is_vendor() != 0) {
    _this->_internal_set_is_vendor(from._internal_is_vendor());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_animation_time = from._internal_animation_time();
  ::uint32_t raw_animation_time;
  memcpy(&raw_animation_time, &tmp_animation_time, sizeof(tmp_animation_time));
  if (raw_animation_time != 0) {
    _this->_internal_set_animation_time(from._internal_animation_time());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NPCState::CopyFrom(const NPCState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.NPCState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NPCState::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* NPCState::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void NPCState::InternalSwap(NPCState* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.status_effects_.InternalSwap(&other->_impl_.status_effects_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.npc_id_, &other->_impl_.npc_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.npc_type_, &other->_impl_.npc_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_name_, &other->_impl_.display_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_id_, &other->_impl_.target_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.current_animation_, &other->_impl_.current_animation_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NPCState, _impl_.animation_time_)
      + sizeof(NPCState::_impl_.animation_time_)
      - PROTOBUF_FIELD_OFFSET(NPCState, _impl_.transform_)>(
          reinterpret_cast<char*>(&_impl_.transform_),
          reinterpret_cast<char*>(&other->_impl_.transform_));
}

::google::protobuf::Metadata NPCState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[8]);
}
// ===================================================================

WorldObject_PropertiesEntry_DoNotUse::WorldObject_PropertiesEntry_DoNotUse() {}
WorldObject_PropertiesEntry_DoNotUse::WorldObject_PropertiesEntry_DoNotUse(::google::protobuf::Arena* arena)
    : SuperType(arena) {}
::google::protobuf::Metadata WorldObject_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[9]);
}
// ===================================================================

class WorldObject::_Internal {
 public:
  using HasBits = decltype(std::declval<WorldObject>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WorldObject, _impl_._has_bits_);
  static const ::mmorpg::Transform& transform(const WorldObject* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mmorpg::Transform& WorldObject::_Internal::transform(const WorldObject* msg) {
  return *msg->_impl_.transform_;
}
void WorldObject::clear_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
WorldObject::WorldObject(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.WorldObject)
}
inline PROTOBUF_NDEBUG_INLINE WorldObject::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        properties_{visibility, arena, from.properties_},
        allowed_looters_{visibility, arena, from.allowed_looters_},
        object_id_(arena, from.object_id_),
        object_type_(arena, from.object_type_),
        interaction_type_(arena, from.interaction_type_) {}

WorldObject::WorldObject(
    ::google::protobuf::Arena* arena,
    const WorldObject& from)
    : ::google::protobuf::Message(arena) {
  WorldObject* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.transform_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, interaction_range_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, interaction_range_),
           offsetof(Impl_, is_lootable_) -
               offsetof(Impl_, interaction_range_) +
               sizeof(Impl_::is_lootable_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.WorldObject)
}
inline PROTOBUF_NDEBUG_INLINE WorldObject::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        properties_{visibility, arena},
        allowed_looters_{visibility, arena},
        object_id_(arena),
        object_type_(arena),
        interaction_type_(arena) {}

inline void WorldObject::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, transform_),
           0,
           offsetof(Impl_, is_lootable_) -
               offsetof(Impl_, transform_) +
               sizeof(Impl_::is_lootable_));
}
WorldObject::~WorldObject() {
  // @@protoc_insertion_point(destructor:mmorpg.WorldObject)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WorldObject::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.object_id_.Destroy();
  _impl_.object_type_.Destroy();
  _impl_.interaction_type_.Destroy();
  delete _impl_.transform_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void WorldObject::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.WorldObject)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.properties_.Clear();
  _impl_.allowed_looters_.Clear();
  _impl_.object_id_.ClearToEmpty();
  _impl_.object_type_.ClearToEmpty();
  _impl_.interaction_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.transform_ != nullptr);
    _impl_.transform_->Clear();
  }
  ::memset(&_impl_.interaction_range_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_lootable_) -
      reinterpret_cast<char*>(&_impl_.interaction_range_)) + sizeof(_impl_.is_lootable_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WorldObject::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 2, 96, 2> WorldObject::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WorldObject, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WorldObject_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string object_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.object_id_)}},
    // string object_type = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.object_type_)}},
    // .mmorpg.Transform transform = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.transform_)}},
    // bool is_interactable = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WorldObject, _impl_.is_interactable_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.is_interactable_)}},
    // string interaction_type = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.interaction_type_)}},
    // float interaction_range = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.interaction_range_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // bool is_lootable = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(WorldObject, _impl_.is_lootable_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.is_lootable_)}},
    // repeated string allowed_looters = 9;
    {::_pbi::TcParser::FastUR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.allowed_looters_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string object_id = 1;
    {PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.object_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string object_type = 2;
    {PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.object_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.Transform transform = 3;
    {PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_interactable = 4;
    {PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.is_interactable_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string interaction_type = 5;
    {PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.interaction_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float interaction_range = 6;
    {PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.interaction_range_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // map<string, string> properties = 7;
    {PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.properties_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // bool is_lootable = 8;
    {PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.is_lootable_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string allowed_looters = 9;
    {PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.allowed_looters_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(WorldObject()._impl_.properties_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\22\11\13\0\0\20\0\12\0\17\0\0\0\0\0\0"
    "mmorpg.WorldObject"
    "object_id"
    "object_type"
    "interaction_type"
    "properties"
    "allowed_looters"
  }},
};

::uint8_t* WorldObject::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.WorldObject)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string object_id = 1;
  if (!this->_internal_object_id().empty()) {
    const std::string& _s = this->_internal_object_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldObject.object_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string object_type = 2;
  if (!this->_internal_object_type().empty()) {
    const std::string& _s = this->_internal_object_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldObject.object_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Transform transform = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // bool is_interactable = 4;
  if (this->_internal_is_interactable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_is_interactable(), target);
  }

  // string interaction_type = 5;
  if (!this->_internal_interaction_type().empty()) {
    const std::string& _s = this->_internal_interaction_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldObject.interaction_type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // float interaction_range = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_interaction_range = this->_internal_interaction_range();
  ::uint32_t raw_interaction_range;
  memcpy(&raw_interaction_range, &tmp_interaction_range, sizeof(tmp_interaction_range));
  if (raw_interaction_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_interaction_range(), target);
  }

  // map<string, string> properties = 7;
  if (!_internal_properties().empty()) {
    using MapType = ::google::protobuf::Map<std::string, std::string>;
    using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>;
    const auto& field = _internal_properties();

    if (stream->IsSerializationDeterministic() && field.size() > 1) {
      for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldObject.properties");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldObject.properties");
      }
    } else {
      for (const auto& entry : field) {
        target = WireHelper::InternalSerialize(
            7, entry.first, entry.second, target, stream);
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldObject.properties");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldObject.properties");
      }
    }
  }

  // bool is_lootable = 8;
  if (this->_internal_is_lootable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_is_lootable(), target);
  }

  // repeated string allowed_looters = 9;
  for (int i = 0, n = this->_internal_allowed_looters_size(); i < n; ++i) {
    const auto& s = this->_internal_allowed_looters().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WorldObject.allowed_looters");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.WorldObject)
  return target;
}

::size_t WorldObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.WorldObject)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 7;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_properties_size());
  for (const auto& entry : _internal_properties()) {
    total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                   _pbi::WireFormatLite::TYPE_STRING,
                                   _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
  }
  // repeated string allowed_looters = 9;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_allowed_looters().size());
  for (int i = 0, n = _internal_allowed_looters().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_allowed_looters().Get(i));
  }
  // string object_id = 1;
  if (!this->_internal_object_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_object_id());
  }

  // string object_type = 2;
  if (!this->_internal_object_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_object_type());
  }

  // string interaction_type = 5;
  if (!this->_internal_interaction_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_interaction_type());
  }

  // .mmorpg.Transform transform = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.transform_);
  }

  // float interaction_range = 6;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_interaction_range = this->_internal_interaction_range();
  ::uint32_t raw_interaction_range;
  memcpy(&raw_interaction_range, &tmp_interaction_range, sizeof(tmp_interaction_range));
  if (raw_interaction_range != 0) {
    total_size += 5;
  }

  // bool is_interactable = 4;
  if (this->_internal_is_interactable() != 0) {
    total_size += 2;
  }

  // bool is_lootable = 8;
  if (this->_internal_is_lootable() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WorldObject::_class_data_ = {
    WorldObject::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* WorldObject::GetClassData() const {
  return &_class_data_;
}

void WorldObject::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WorldObject*>(&to_msg);
  auto& from = static_cast<const WorldObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.WorldObject)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.properties_.MergeFrom(from._impl_.properties_);
  _this->_internal_mutable_allowed_looters()->MergeFrom(from._internal_allowed_looters());
  if (!from._internal_object_id().empty()) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (!from._internal_object_type().empty()) {
    _this->_internal_set_object_type(from._internal_object_type());
  }
  if (!from._internal_interaction_type().empty()) {
    _this->_internal_set_interaction_type(from._internal_interaction_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_transform()->::mmorpg::Transform::MergeFrom(
        from._internal_transform());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_interaction_range = from._internal_interaction_range();
  ::uint32_t raw_interaction_range;
  memcpy(&raw_interaction_range, &tmp_interaction_range, sizeof(tmp_interaction_range));
  if (raw_interaction_range != 0) {
    _this->_internal_set_interaction_range(from._internal_interaction_range());
  }
  if (from._internal_is_interactable() != 0) {
    _this->_internal_set_is_interactable(from._internal_is_interactable());
  }
  if (from._internal_is_lootable() != 0) {
    _this->_internal_set_is_lootable(from._internal_is_lootable());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WorldObject::CopyFrom(const WorldObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.WorldObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WorldObject::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* WorldObject::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void WorldObject::InternalSwap(WorldObject* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.properties_.InternalSwap(&other->_impl_.properties_);
  _impl_.allowed_looters_.InternalSwap(&other->_impl_.allowed_looters_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_id_, &other->_impl_.object_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.object_type_, &other->_impl_.object_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.interaction_type_, &other->_impl_.interaction_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.is_lootable_)
      + sizeof(WorldObject::_impl_.is_lootable_)
      - PROTOBUF_FIELD_OFFSET(WorldObject, _impl_.transform_)>(
          reinterpret_cast<char*>(&_impl_.transform_),
          reinterpret_cast<char*>(&other->_impl_.transform_));
}

::google::protobuf::Metadata WorldObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[10]);
}
// ===================================================================

class EntitySpawn::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntitySpawn, _impl_._oneof_case_);
  static const ::mmorpg::PlayerState& player(const EntitySpawn* msg);
  static const ::mmorpg::NPCState& npc(const EntitySpawn* msg);
  static const ::mmorpg::WorldObject& object(const EntitySpawn* msg);
};

const ::mmorpg::PlayerState& EntitySpawn::_Internal::player(const EntitySpawn* msg) {
  return *msg->_impl_.entity_.player_;
}
const ::mmorpg::NPCState& EntitySpawn::_Internal::npc(const EntitySpawn* msg) {
  return *msg->_impl_.entity_.npc_;
}
const ::mmorpg::WorldObject& EntitySpawn::_Internal::object(const EntitySpawn* msg) {
  return *msg->_impl_.entity_.object_;
}
void EntitySpawn::set_allocated_player(::mmorpg::PlayerState* player) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_entity();
  if (player) {
    ::google::protobuf::Arena* submessage_arena = player->GetArena();
    if (message_arena != submessage_arena) {
      player = ::google::protobuf::internal::GetOwnedMessage(message_arena, player, submessage_arena);
    }
    set_has_player();
    _impl_.entity_.player_ = player;
  }
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EntitySpawn.player)
}
void EntitySpawn::set_allocated_npc(::mmorpg::NPCState* npc) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_entity();
  if (npc) {
    ::google::protobuf::Arena* submessage_arena = npc->GetArena();
    if (message_arena != submessage_arena) {
      npc = ::google::protobuf::internal::GetOwnedMessage(message_arena, npc, submessage_arena);
    }
    set_has_npc();
    _impl_.entity_.npc_ = npc;
  }
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EntitySpawn.npc)
}
void EntitySpawn::set_allocated_object(::mmorpg::WorldObject* object) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_entity();
  if (object) {
    ::google::protobuf::Arena* submessage_arena = object->GetArena();
    if (message_arena != submessage_arena) {
      object = ::google::protobuf::internal::GetOwnedMessage(message_arena, object, submessage_arena);
    }
    set_has_object();
    _impl_.entity_.object_ = object;
  }
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EntitySpawn.object)
}
EntitySpawn::EntitySpawn(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.EntitySpawn)
}
inline PROTOBUF_NDEBUG_INLINE EntitySpawn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : entity_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

EntitySpawn::EntitySpawn(
    ::google::protobuf::Arena* arena,
    const EntitySpawn& from)
    : ::google::protobuf::Message(arena) {
  EntitySpawn* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (entity_case()) {
    case ENTITY_NOT_SET:
      break;
      case kPlayer:
        _impl_.entity_.player_ = CreateMaybeMessage<::mmorpg::PlayerState>(arena, *from._impl_.entity_.player_);
        break;
      case kNpc:
        _impl_.entity_.npc_ = CreateMaybeMessage<::mmorpg::NPCState>(arena, *from._impl_.entity_.npc_);
        break;
      case kObject:
        _impl_.entity_.object_ = CreateMaybeMessage<::mmorpg::WorldObject>(arena, *from._impl_.entity_.object_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:mmorpg.EntitySpawn)
}
inline PROTOBUF_NDEBUG_INLINE EntitySpawn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : entity_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void EntitySpawn::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EntitySpawn::~EntitySpawn() {
  // @@protoc_insertion_point(destructor:mmorpg.EntitySpawn)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EntitySpawn::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_entity()) {
    clear_entity();
  }
  _impl_.~Impl_();
}

void EntitySpawn::clear_entity() {
// @@protoc_insertion_point(one_of_clear_start:mmorpg.EntitySpawn)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (entity_case()) {
    case kPlayer: {
      if (GetArena() == nullptr) {
        delete _impl_.entity_.player_;
      }
      break;
    }
    case kNpc: {
      if (GetArena() == nullptr) {
        delete _impl_.entity_.npc_;
      }
      break;
    }
    case kObject: {
      if (GetArena() == nullptr) {
        delete _impl_.entity_.object_;
      }
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ENTITY_NOT_SET;
}


PROTOBUF_NOINLINE void EntitySpawn::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.EntitySpawn)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entity();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EntitySpawn::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 3, 0, 2> EntitySpawn::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EntitySpawn_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .mmorpg.PlayerState player = 1;
    {PROTOBUF_FIELD_OFFSET(EntitySpawn, _impl_.entity_.player_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.NPCState npc = 2;
    {PROTOBUF_FIELD_OFFSET(EntitySpawn, _impl_.entity_.npc_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.WorldObject object = 3;
    {PROTOBUF_FIELD_OFFSET(EntitySpawn, _impl_.entity_.object_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::PlayerState>()},
    {::_pbi::TcParser::GetTable<::mmorpg::NPCState>()},
    {::_pbi::TcParser::GetTable<::mmorpg::WorldObject>()},
  }}, {{
  }},
};

::uint8_t* EntitySpawn::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.EntitySpawn)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (entity_case()) {
    case kPlayer: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::player(this),
          _Internal::player(this).GetCachedSize(), target, stream);
      break;
    }
    case kNpc: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::npc(this),
          _Internal::npc(this).GetCachedSize(), target, stream);
      break;
    }
    case kObject: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::object(this),
          _Internal::object(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.EntitySpawn)
  return target;
}

::size_t EntitySpawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.EntitySpawn)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entity_case()) {
    // .mmorpg.PlayerState player = 1;
    case kPlayer: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.entity_.player_);
      break;
    }
    // .mmorpg.NPCState npc = 2;
    case kNpc: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.entity_.npc_);
      break;
    }
    // .mmorpg.WorldObject object = 3;
    case kObject: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.entity_.object_);
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EntitySpawn::_class_data_ = {
    EntitySpawn::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EntitySpawn::GetClassData() const {
  return &_class_data_;
}

void EntitySpawn::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EntitySpawn*>(&to_msg);
  auto& from = static_cast<const EntitySpawn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.EntitySpawn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entity_case()) {
    case kPlayer: {
      _this->_internal_mutable_player()->::mmorpg::PlayerState::MergeFrom(
          from._internal_player());
      break;
    }
    case kNpc: {
      _this->_internal_mutable_npc()->::mmorpg::NPCState::MergeFrom(
          from._internal_npc());
      break;
    }
    case kObject: {
      _this->_internal_mutable_object()->::mmorpg::WorldObject::MergeFrom(
          from._internal_object());
      break;
    }
    case ENTITY_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EntitySpawn::CopyFrom(const EntitySpawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.EntitySpawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EntitySpawn::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EntitySpawn::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EntitySpawn::InternalSwap(EntitySpawn* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.entity_, other->_impl_.entity_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata EntitySpawn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[11]);
}
// ===================================================================

class EntityDespawn::_Internal {
 public:
};

EntityDespawn::EntityDespawn(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.EntityDespawn)
}
inline PROTOBUF_NDEBUG_INLINE EntityDespawn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : entity_id_(arena, from.entity_id_),
        reason_(arena, from.reason_),
        _cached_size_{0} {}

EntityDespawn::EntityDespawn(
    ::google::protobuf::Arena* arena,
    const EntityDespawn& from)
    : ::google::protobuf::Message(arena) {
  EntityDespawn* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.entity_type_ = from._impl_.entity_type_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.EntityDespawn)
}
inline PROTOBUF_NDEBUG_INLINE EntityDespawn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : entity_id_(arena),
        reason_(arena),
        _cached_size_{0} {}

inline void EntityDespawn::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.entity_type_ = {};
}
EntityDespawn::~EntityDespawn() {
  // @@protoc_insertion_point(destructor:mmorpg.EntityDespawn)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EntityDespawn::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.entity_id_.Destroy();
  _impl_.reason_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EntityDespawn::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.EntityDespawn)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  _impl_.reason_.ClearToEmpty();
  _impl_.entity_type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EntityDespawn::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 44, 2> EntityDespawn::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EntityDespawn_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string entity_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EntityDespawn, _impl_.entity_id_)}},
    // .mmorpg.EntityType entity_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EntityDespawn, _impl_.entity_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(EntityDespawn, _impl_.entity_type_)}},
    // string reason = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(EntityDespawn, _impl_.reason_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1;
    {PROTOBUF_FIELD_OFFSET(EntityDespawn, _impl_.entity_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.EntityType entity_type = 2;
    {PROTOBUF_FIELD_OFFSET(EntityDespawn, _impl_.entity_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string reason = 3;
    {PROTOBUF_FIELD_OFFSET(EntityDespawn, _impl_.reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\11\0\6\0\0\0\0"
    "mmorpg.EntityDespawn"
    "entity_id"
    "reason"
  }},
};

::uint8_t* EntityDespawn::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.EntityDespawn)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    const std::string& _s = this->_internal_entity_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.EntityDespawn.entity_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .mmorpg.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_entity_type(), target);
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    const std::string& _s = this->_internal_reason();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.EntityDespawn.reason");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.EntityDespawn)
  return target;
}

::size_t EntityDespawn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.EntityDespawn)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_entity_id());
  }

  // string reason = 3;
  if (!this->_internal_reason().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_reason());
  }

  // .mmorpg.EntityType entity_type = 2;
  if (this->_internal_entity_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_entity_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EntityDespawn::_class_data_ = {
    EntityDespawn::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EntityDespawn::GetClassData() const {
  return &_class_data_;
}

void EntityDespawn::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EntityDespawn*>(&to_msg);
  auto& from = static_cast<const EntityDespawn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.EntityDespawn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_entity_type() != 0) {
    _this->_internal_set_entity_type(from._internal_entity_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EntityDespawn::CopyFrom(const EntityDespawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.EntityDespawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EntityDespawn::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EntityDespawn::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EntityDespawn::InternalSwap(EntityDespawn* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  swap(_impl_.entity_type_, other->_impl_.entity_type_);
}

::google::protobuf::Metadata EntityDespawn::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[12]);
}
// ===================================================================

class EntityEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<EntityEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::mmorpg::EntityEvent, _impl_._oneof_case_);
  static const ::google::protobuf::Timestamp& timestamp(const EntityEvent* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mmorpg::DamageEvent& damage(const EntityEvent* msg);
  static const ::mmorpg::HealEvent& heal(const EntityEvent* msg);
  static const ::mmorpg::DeathEvent& death(const EntityEvent* msg);
  static const ::mmorpg::LevelUpEvent& level_up(const EntityEvent* msg);
  static const ::mmorpg::EmoteEvent& emote(const EntityEvent* msg);
  static const ::mmorpg::SoundEvent& sound(const EntityEvent* msg);
  static const ::mmorpg::VisualEffectEvent& visual_effect(const EntityEvent* msg);
};

const ::google::protobuf::Timestamp& EntityEvent::_Internal::timestamp(const EntityEvent* msg) {
  return *msg->_impl_.timestamp_;
}
const ::mmorpg::DamageEvent& EntityEvent::_Internal::damage(const EntityEvent* msg) {
  return *msg->_impl_.event_data_.damage_;
}
const ::mmorpg::HealEvent& EntityEvent::_Internal::heal(const EntityEvent* msg) {
  return *msg->_impl_.event_data_.heal_;
}
const ::mmorpg::DeathEvent& EntityEvent::_Internal::death(const EntityEvent* msg) {
  return *msg->_impl_.event_data_.death_;
}
const ::mmorpg::LevelUpEvent& EntityEvent::_Internal::level_up(const EntityEvent* msg) {
  return *msg->_impl_.event_data_.level_up_;
}
const ::mmorpg::EmoteEvent& EntityEvent::_Internal::emote(const EntityEvent* msg) {
  return *msg->_impl_.event_data_.emote_;
}
const ::mmorpg::SoundEvent& EntityEvent::_Internal::sound(const EntityEvent* msg) {
  return *msg->_impl_.event_data_.sound_;
}
const ::mmorpg::VisualEffectEvent& EntityEvent::_Internal::visual_effect(const EntityEvent* msg) {
  return *msg->_impl_.event_data_.visual_effect_;
}
void EntityEvent::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void EntityEvent::set_allocated_damage(::mmorpg::DamageEvent* damage) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event_data();
  if (damage) {
    ::google::protobuf::Arena* submessage_arena = damage->GetArena();
    if (message_arena != submessage_arena) {
      damage = ::google::protobuf::internal::GetOwnedMessage(message_arena, damage, submessage_arena);
    }
    set_has_damage();
    _impl_.event_data_.damage_ = damage;
  }
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EntityEvent.damage)
}
void EntityEvent::set_allocated_heal(::mmorpg::HealEvent* heal) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event_data();
  if (heal) {
    ::google::protobuf::Arena* submessage_arena = heal->GetArena();
    if (message_arena != submessage_arena) {
      heal = ::google::protobuf::internal::GetOwnedMessage(message_arena, heal, submessage_arena);
    }
    set_has_heal();
    _impl_.event_data_.heal_ = heal;
  }
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EntityEvent.heal)
}
void EntityEvent::set_allocated_death(::mmorpg::DeathEvent* death) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event_data();
  if (death) {
    ::google::protobuf::Arena* submessage_arena = death->GetArena();
    if (message_arena != submessage_arena) {
      death = ::google::protobuf::internal::GetOwnedMessage(message_arena, death, submessage_arena);
    }
    set_has_death();
    _impl_.event_data_.death_ = death;
  }
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EntityEvent.death)
}
void EntityEvent::set_allocated_level_up(::mmorpg::LevelUpEvent* level_up) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event_data();
  if (level_up) {
    ::google::protobuf::Arena* submessage_arena = level_up->GetArena();
    if (message_arena != submessage_arena) {
      level_up = ::google::protobuf::internal::GetOwnedMessage(message_arena, level_up, submessage_arena);
    }
    set_has_level_up();
    _impl_.event_data_.level_up_ = level_up;
  }
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EntityEvent.level_up)
}
void EntityEvent::set_allocated_emote(::mmorpg::EmoteEvent* emote) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event_data();
  if (emote) {
    ::google::protobuf::Arena* submessage_arena = emote->GetArena();
    if (message_arena != submessage_arena) {
      emote = ::google::protobuf::internal::GetOwnedMessage(message_arena, emote, submessage_arena);
    }
    set_has_emote();
    _impl_.event_data_.emote_ = emote;
  }
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EntityEvent.emote)
}
void EntityEvent::set_allocated_sound(::mmorpg::SoundEvent* sound) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event_data();
  if (sound) {
    ::google::protobuf::Arena* submessage_arena = sound->GetArena();
    if (message_arena != submessage_arena) {
      sound = ::google::protobuf::internal::GetOwnedMessage(message_arena, sound, submessage_arena);
    }
    set_has_sound();
    _impl_.event_data_.sound_ = sound;
  }
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EntityEvent.sound)
}
void EntityEvent::set_allocated_visual_effect(::mmorpg::VisualEffectEvent* visual_effect) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_event_data();
  if (visual_effect) {
    ::google::protobuf::Arena* submessage_arena = visual_effect->GetArena();
    if (message_arena != submessage_arena) {
      visual_effect = ::google::protobuf::internal::GetOwnedMessage(message_arena, visual_effect, submessage_arena);
    }
    set_has_visual_effect();
    _impl_.event_data_.visual_effect_ = visual_effect;
  }
  // @@protoc_insertion_point(field_set_allocated:mmorpg.EntityEvent.visual_effect)
}
EntityEvent::EntityEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.EntityEvent)
}
inline PROTOBUF_NDEBUG_INLINE EntityEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        entity_id_(arena, from.entity_id_),
        event_type_(arena, from.event_type_),
        event_data_{},
        _oneof_case_{from._oneof_case_[0]} {}

EntityEvent::EntityEvent(
    ::google::protobuf::Arena* arena,
    const EntityEvent& from)
    : ::google::protobuf::Message(arena) {
  EntityEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_)
                : nullptr;
  switch (event_data_case()) {
    case EVENT_DATA_NOT_SET:
      break;
      case kDamage:
        _impl_.event_data_.damage_ = CreateMaybeMessage<::mmorpg::DamageEvent>(arena, *from._impl_.event_data_.damage_);
        break;
      case kHeal:
        _impl_.event_data_.heal_ = CreateMaybeMessage<::mmorpg::HealEvent>(arena, *from._impl_.event_data_.heal_);
        break;
      case kDeath:
        _impl_.event_data_.death_ = CreateMaybeMessage<::mmorpg::DeathEvent>(arena, *from._impl_.event_data_.death_);
        break;
      case kLevelUp:
        _impl_.event_data_.level_up_ = CreateMaybeMessage<::mmorpg::LevelUpEvent>(arena, *from._impl_.event_data_.level_up_);
        break;
      case kEmote:
        _impl_.event_data_.emote_ = CreateMaybeMessage<::mmorpg::EmoteEvent>(arena, *from._impl_.event_data_.emote_);
        break;
      case kSound:
        _impl_.event_data_.sound_ = CreateMaybeMessage<::mmorpg::SoundEvent>(arena, *from._impl_.event_data_.sound_);
        break;
      case kVisualEffect:
        _impl_.event_data_.visual_effect_ = CreateMaybeMessage<::mmorpg::VisualEffectEvent>(arena, *from._impl_.event_data_.visual_effect_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:mmorpg.EntityEvent)
}
inline PROTOBUF_NDEBUG_INLINE EntityEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        entity_id_(arena),
        event_type_(arena),
        event_data_{},
        _oneof_case_{} {}

inline void EntityEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.timestamp_ = {};
}
EntityEvent::~EntityEvent() {
  // @@protoc_insertion_point(destructor:mmorpg.EntityEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EntityEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.entity_id_.Destroy();
  _impl_.event_type_.Destroy();
  delete _impl_.timestamp_;
  if (has_event_data()) {
    clear_event_data();
  }
  _impl_.~Impl_();
}

void EntityEvent::clear_event_data() {
// @@protoc_insertion_point(one_of_clear_start:mmorpg.EntityEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (event_data_case()) {
    case kDamage: {
      if (GetArena() == nullptr) {
        delete _impl_.event_data_.damage_;
      }
      break;
    }
    case kHeal: {
      if (GetArena() == nullptr) {
        delete _impl_.event_data_.heal_;
      }
      break;
    }
    case kDeath: {
      if (GetArena() == nullptr) {
        delete _impl_.event_data_.death_;
      }
      break;
    }
    case kLevelUp: {
      if (GetArena() == nullptr) {
        delete _impl_.event_data_.level_up_;
      }
      break;
    }
    case kEmote: {
      if (GetArena() == nullptr) {
        delete _impl_.event_data_.emote_;
      }
      break;
    }
    case kSound: {
      if (GetArena() == nullptr) {
        delete _impl_.event_data_.sound_;
      }
      break;
    }
    case kVisualEffect: {
      if (GetArena() == nullptr) {
        delete _impl_.event_data_.visual_effect_;
      }
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EVENT_DATA_NOT_SET;
}


PROTOBUF_NOINLINE void EntityEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.EntityEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  _impl_.event_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  clear_event_data();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EntityEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 10, 8, 54, 2> EntityEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_._has_bits_),
    0, // no _extensions_
    10, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_EntityEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string entity_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.entity_id_)}},
    // string event_type = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.event_type_)}},
    // .google.protobuf.Timestamp timestamp = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1;
    {PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.entity_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string event_type = 2;
    {PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.event_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.DamageEvent damage = 4;
    {PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.event_data_.damage_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.HealEvent heal = 5;
    {PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.event_data_.heal_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.DeathEvent death = 6;
    {PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.event_data_.death_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.LevelUpEvent level_up = 7;
    {PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.event_data_.level_up_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.EmoteEvent emote = 8;
    {PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.event_data_.emote_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.SoundEvent sound = 9;
    {PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.event_data_.sound_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .mmorpg.VisualEffectEvent visual_effect = 10;
    {PROTOBUF_FIELD_OFFSET(EntityEvent, _impl_.event_data_.visual_effect_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::mmorpg::DamageEvent>()},
    {::_pbi::TcParser::GetTable<::mmorpg::HealEvent>()},
    {::_pbi::TcParser::GetTable<::mmorpg::DeathEvent>()},
    {::_pbi::TcParser::GetTable<::mmorpg::LevelUpEvent>()},
    {::_pbi::TcParser::GetTable<::mmorpg::EmoteEvent>()},
    {::_pbi::TcParser::GetTable<::mmorpg::SoundEvent>()},
    {::_pbi::TcParser::GetTable<::mmorpg::VisualEffectEvent>()},
  }}, {{
    "\22\11\12\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "mmorpg.EntityEvent"
    "entity_id"
    "event_type"
  }},
};

::uint8_t* EntityEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.EntityEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    const std::string& _s = this->_internal_entity_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.EntityEvent.entity_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    const std::string& _s = this->_internal_event_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.EntityEvent.event_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  switch (event_data_case()) {
    case kDamage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::damage(this),
          _Internal::damage(this).GetCachedSize(), target, stream);
      break;
    }
    case kHeal: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::heal(this),
          _Internal::heal(this).GetCachedSize(), target, stream);
      break;
    }
    case kDeath: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::death(this),
          _Internal::death(this).GetCachedSize(), target, stream);
      break;
    }
    case kLevelUp: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, _Internal::level_up(this),
          _Internal::level_up(this).GetCachedSize(), target, stream);
      break;
    }
    case kEmote: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::emote(this),
          _Internal::emote(this).GetCachedSize(), target, stream);
      break;
    }
    case kSound: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, _Internal::sound(this),
          _Internal::sound(this).GetCachedSize(), target, stream);
      break;
    }
    case kVisualEffect: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, _Internal::visual_effect(this),
          _Internal::visual_effect(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.EntityEvent)
  return target;
}

::size_t EntityEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.EntityEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_entity_id());
  }

  // string event_type = 2;
  if (!this->_internal_event_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_event_type());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_);
  }

  switch (event_data_case()) {
    // .mmorpg.DamageEvent damage = 4;
    case kDamage: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_data_.damage_);
      break;
    }
    // .mmorpg.HealEvent heal = 5;
    case kHeal: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_data_.heal_);
      break;
    }
    // .mmorpg.DeathEvent death = 6;
    case kDeath: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_data_.death_);
      break;
    }
    // .mmorpg.LevelUpEvent level_up = 7;
    case kLevelUp: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_data_.level_up_);
      break;
    }
    // .mmorpg.EmoteEvent emote = 8;
    case kEmote: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_data_.emote_);
      break;
    }
    // .mmorpg.SoundEvent sound = 9;
    case kSound: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_data_.sound_);
      break;
    }
    // .mmorpg.VisualEffectEvent visual_effect = 10;
    case kVisualEffect: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.event_data_.visual_effect_);
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EntityEvent::_class_data_ = {
    EntityEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EntityEvent::GetClassData() const {
  return &_class_data_;
}

void EntityEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EntityEvent*>(&to_msg);
  auto& from = static_cast<const EntityEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.EntityEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (!from._internal_event_type().empty()) {
    _this->_internal_set_event_type(from._internal_event_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  switch (from.event_data_case()) {
    case kDamage: {
      _this->_internal_mutable_damage()->::mmorpg::DamageEvent::MergeFrom(
          from._internal_damage());
      break;
    }
    case kHeal: {
      _this->_internal_mutable_heal()->::mmorpg::HealEvent::MergeFrom(
          from._internal_heal());
      break;
    }
    case kDeath: {
      _this->_internal_mutable_death()->::mmorpg::DeathEvent::MergeFrom(
          from._internal_death());
      break;
    }
    case kLevelUp: {
      _this->_internal_mutable_level_up()->::mmorpg::LevelUpEvent::MergeFrom(
          from._internal_level_up());
      break;
    }
    case kEmote: {
      _this->_internal_mutable_emote()->::mmorpg::EmoteEvent::MergeFrom(
          from._internal_emote());
      break;
    }
    case kSound: {
      _this->_internal_mutable_sound()->::mmorpg::SoundEvent::MergeFrom(
          from._internal_sound());
      break;
    }
    case kVisualEffect: {
      _this->_internal_mutable_visual_effect()->::mmorpg::VisualEffectEvent::MergeFrom(
          from._internal_visual_effect());
      break;
    }
    case EVENT_DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EntityEvent::CopyFrom(const EntityEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.EntityEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EntityEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EntityEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EntityEvent::InternalSwap(EntityEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.event_type_, &other->_impl_.event_type_, arena);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
  swap(_impl_.event_data_, other->_impl_.event_data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata EntityEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[13]);
}
// ===================================================================

class DamageEvent::_Internal {
 public:
};

DamageEvent::DamageEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.DamageEvent)
}
inline PROTOBUF_NDEBUG_INLINE DamageEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : source_id_(arena, from.source_id_),
        target_id_(arena, from.target_id_),
        _cached_size_{0} {}

DamageEvent::DamageEvent(
    ::google::protobuf::Arena* arena,
    const DamageEvent& from)
    : ::google::protobuf::Message(arena) {
  DamageEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, damage_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, damage_),
           offsetof(Impl_, is_dodged_) -
               offsetof(Impl_, damage_) +
               sizeof(Impl_::is_dodged_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.DamageEvent)
}
inline PROTOBUF_NDEBUG_INLINE DamageEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : source_id_(arena),
        target_id_(arena),
        _cached_size_{0} {}

inline void DamageEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, damage_),
           0,
           offsetof(Impl_, is_dodged_) -
               offsetof(Impl_, damage_) +
               sizeof(Impl_::is_dodged_));
}
DamageEvent::~DamageEvent() {
  // @@protoc_insertion_point(destructor:mmorpg.DamageEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DamageEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.source_id_.Destroy();
  _impl_.target_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DamageEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.DamageEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_id_.ClearToEmpty();
  _impl_.target_id_.ClearToEmpty();
  ::memset(&_impl_.damage_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_dodged_) -
      reinterpret_cast<char*>(&_impl_.damage_)) + sizeof(_impl_.is_dodged_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DamageEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 45, 2> DamageEvent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DamageEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string source_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.source_id_)}},
    // string target_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.target_id_)}},
    // int32 damage = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DamageEvent, _impl_.damage_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.damage_)}},
    // .mmorpg.DamageType damage_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DamageEvent, _impl_.damage_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.damage_type_)}},
    // bool is_critical = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DamageEvent, _impl_.is_critical_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.is_critical_)}},
    // bool is_blocked = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DamageEvent, _impl_.is_blocked_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.is_blocked_)}},
    // bool is_dodged = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DamageEvent, _impl_.is_dodged_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.is_dodged_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string source_id = 1;
    {PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.source_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target_id = 2;
    {PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.target_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 damage = 3;
    {PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.damage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .mmorpg.DamageType damage_type = 4;
    {PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.damage_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool is_critical = 5;
    {PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.is_critical_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_blocked = 6;
    {PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.is_blocked_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_dodged = 7;
    {PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.is_dodged_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\22\11\11\0\0\0\0\0"
    "mmorpg.DamageEvent"
    "source_id"
    "target_id"
  }},
};

::uint8_t* DamageEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.DamageEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string source_id = 1;
  if (!this->_internal_source_id().empty()) {
    const std::string& _s = this->_internal_source_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.DamageEvent.source_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string target_id = 2;
  if (!this->_internal_target_id().empty()) {
    const std::string& _s = this->_internal_target_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.DamageEvent.target_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 damage = 3;
  if (this->_internal_damage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_damage(), target);
  }

  // .mmorpg.DamageType damage_type = 4;
  if (this->_internal_damage_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_damage_type(), target);
  }

  // bool is_critical = 5;
  if (this->_internal_is_critical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_critical(), target);
  }

  // bool is_blocked = 6;
  if (this->_internal_is_blocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_is_blocked(), target);
  }

  // bool is_dodged = 7;
  if (this->_internal_is_dodged() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_is_dodged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.DamageEvent)
  return target;
}

::size_t DamageEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.DamageEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_id = 1;
  if (!this->_internal_source_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_source_id());
  }

  // string target_id = 2;
  if (!this->_internal_target_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_target_id());
  }

  // int32 damage = 3;
  if (this->_internal_damage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_damage());
  }

  // .mmorpg.DamageType damage_type = 4;
  if (this->_internal_damage_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_damage_type());
  }

  // bool is_critical = 5;
  if (this->_internal_is_critical() != 0) {
    total_size += 2;
  }

  // bool is_blocked = 6;
  if (this->_internal_is_blocked() != 0) {
    total_size += 2;
  }

  // bool is_dodged = 7;
  if (this->_internal_is_dodged() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DamageEvent::_class_data_ = {
    DamageEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DamageEvent::GetClassData() const {
  return &_class_data_;
}

void DamageEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DamageEvent*>(&to_msg);
  auto& from = static_cast<const DamageEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.DamageEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_id().empty()) {
    _this->_internal_set_source_id(from._internal_source_id());
  }
  if (!from._internal_target_id().empty()) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_damage() != 0) {
    _this->_internal_set_damage(from._internal_damage());
  }
  if (from._internal_damage_type() != 0) {
    _this->_internal_set_damage_type(from._internal_damage_type());
  }
  if (from._internal_is_critical() != 0) {
    _this->_internal_set_is_critical(from._internal_is_critical());
  }
  if (from._internal_is_blocked() != 0) {
    _this->_internal_set_is_blocked(from._internal_is_blocked());
  }
  if (from._internal_is_dodged() != 0) {
    _this->_internal_set_is_dodged(from._internal_is_dodged());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DamageEvent::CopyFrom(const DamageEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.DamageEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DamageEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DamageEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DamageEvent::InternalSwap(DamageEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_id_, &other->_impl_.source_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_id_, &other->_impl_.target_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.is_dodged_)
      + sizeof(DamageEvent::_impl_.is_dodged_)
      - PROTOBUF_FIELD_OFFSET(DamageEvent, _impl_.damage_)>(
          reinterpret_cast<char*>(&_impl_.damage_),
          reinterpret_cast<char*>(&other->_impl_.damage_));
}

::google::protobuf::Metadata DamageEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[14]);
}
// ===================================================================

class HealEvent::_Internal {
 public:
};

HealEvent::HealEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.HealEvent)
}
inline PROTOBUF_NDEBUG_INLINE HealEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : source_id_(arena, from.source_id_),
        target_id_(arena, from.target_id_),
        heal_type_(arena, from.heal_type_),
        _cached_size_{0} {}

HealEvent::HealEvent(
    ::google::protobuf::Arena* arena,
    const HealEvent& from)
    : ::google::protobuf::Message(arena) {
  HealEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, heal_amount_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, heal_amount_),
           offsetof(Impl_, is_critical_) -
               offsetof(Impl_, heal_amount_) +
               sizeof(Impl_::is_critical_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.HealEvent)
}
inline PROTOBUF_NDEBUG_INLINE HealEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : source_id_(arena),
        target_id_(arena),
        heal_type_(arena),
        _cached_size_{0} {}

inline void HealEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, heal_amount_),
           0,
           offsetof(Impl_, is_critical_) -
               offsetof(Impl_, heal_amount_) +
               sizeof(Impl_::is_critical_));
}
HealEvent::~HealEvent() {
  // @@protoc_insertion_point(destructor:mmorpg.HealEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HealEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.source_id_.Destroy();
  _impl_.target_id_.Destroy();
  _impl_.heal_type_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void HealEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.HealEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_id_.ClearToEmpty();
  _impl_.target_id_.ClearToEmpty();
  _impl_.heal_type_.ClearToEmpty();
  ::memset(&_impl_.heal_amount_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_critical_) -
      reinterpret_cast<char*>(&_impl_.heal_amount_)) + sizeof(_impl_.is_critical_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HealEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 52, 2> HealEvent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_HealEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string source_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.source_id_)}},
    // string target_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.target_id_)}},
    // int32 heal_amount = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealEvent, _impl_.heal_amount_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.heal_amount_)}},
    // string heal_type = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.heal_type_)}},
    // bool is_critical = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HealEvent, _impl_.is_critical_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.is_critical_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string source_id = 1;
    {PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.source_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target_id = 2;
    {PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.target_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 heal_amount = 3;
    {PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.heal_amount_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string heal_type = 4;
    {PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.heal_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool is_critical = 5;
    {PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.is_critical_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\20\11\11\0\11\0\0\0"
    "mmorpg.HealEvent"
    "source_id"
    "target_id"
    "heal_type"
  }},
};

::uint8_t* HealEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.HealEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string source_id = 1;
  if (!this->_internal_source_id().empty()) {
    const std::string& _s = this->_internal_source_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.HealEvent.source_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string target_id = 2;
  if (!this->_internal_target_id().empty()) {
    const std::string& _s = this->_internal_target_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.HealEvent.target_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // int32 heal_amount = 3;
  if (this->_internal_heal_amount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_heal_amount(), target);
  }

  // string heal_type = 4;
  if (!this->_internal_heal_type().empty()) {
    const std::string& _s = this->_internal_heal_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.HealEvent.heal_type");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // bool is_critical = 5;
  if (this->_internal_is_critical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_critical(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.HealEvent)
  return target;
}

::size_t HealEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.HealEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_id = 1;
  if (!this->_internal_source_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_source_id());
  }

  // string target_id = 2;
  if (!this->_internal_target_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_target_id());
  }

  // string heal_type = 4;
  if (!this->_internal_heal_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_heal_type());
  }

  // int32 heal_amount = 3;
  if (this->_internal_heal_amount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_heal_amount());
  }

  // bool is_critical = 5;
  if (this->_internal_is_critical() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HealEvent::_class_data_ = {
    HealEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HealEvent::GetClassData() const {
  return &_class_data_;
}

void HealEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HealEvent*>(&to_msg);
  auto& from = static_cast<const HealEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.HealEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_source_id().empty()) {
    _this->_internal_set_source_id(from._internal_source_id());
  }
  if (!from._internal_target_id().empty()) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (!from._internal_heal_type().empty()) {
    _this->_internal_set_heal_type(from._internal_heal_type());
  }
  if (from._internal_heal_amount() != 0) {
    _this->_internal_set_heal_amount(from._internal_heal_amount());
  }
  if (from._internal_is_critical() != 0) {
    _this->_internal_set_is_critical(from._internal_is_critical());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealEvent::CopyFrom(const HealEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.HealEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HealEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HealEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HealEvent::InternalSwap(HealEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_id_, &other->_impl_.source_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_id_, &other->_impl_.target_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.heal_type_, &other->_impl_.heal_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.is_critical_)
      + sizeof(HealEvent::_impl_.is_critical_)
      - PROTOBUF_FIELD_OFFSET(HealEvent, _impl_.heal_amount_)>(
          reinterpret_cast<char*>(&_impl_.heal_amount_),
          reinterpret_cast<char*>(&other->_impl_.heal_amount_));
}

::google::protobuf::Metadata HealEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[15]);
}
// ===================================================================

class DeathEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<DeathEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeathEvent, _impl_._has_bits_);
  static const ::mmorpg::Transform& death_location(const DeathEvent* msg);
  static void set_has_death_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mmorpg::Transform& DeathEvent::_Internal::death_location(const DeathEvent* msg) {
  return *msg->_impl_.death_location_;
}
void DeathEvent::clear_death_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.death_location_ != nullptr) _impl_.death_location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DeathEvent::DeathEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.DeathEvent)
}
inline PROTOBUF_NDEBUG_INLINE DeathEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        entity_id_(arena, from.entity_id_),
        killer_id_(arena, from.killer_id_),
        death_type_(arena, from.death_type_) {}

DeathEvent::DeathEvent(
    ::google::protobuf::Arena* arena,
    const DeathEvent& from)
    : ::google::protobuf::Message(arena) {
  DeathEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.death_location_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.death_location_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mmorpg.DeathEvent)
}
inline PROTOBUF_NDEBUG_INLINE DeathEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        entity_id_(arena),
        killer_id_(arena),
        death_type_(arena) {}

inline void DeathEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.death_location_ = {};
}
DeathEvent::~DeathEvent() {
  // @@protoc_insertion_point(destructor:mmorpg.DeathEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DeathEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.entity_id_.Destroy();
  _impl_.killer_id_.Destroy();
  _impl_.death_type_.Destroy();
  delete _impl_.death_location_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DeathEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.DeathEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  _impl_.killer_id_.ClearToEmpty();
  _impl_.death_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.death_location_ != nullptr);
    _impl_.death_location_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DeathEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 54, 2> DeathEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DeathEvent, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DeathEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mmorpg.Transform death_location = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(DeathEvent, _impl_.death_location_)}},
    // string entity_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DeathEvent, _impl_.entity_id_)}},
    // string killer_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DeathEvent, _impl_.killer_id_)}},
    // string death_type = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DeathEvent, _impl_.death_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1;
    {PROTOBUF_FIELD_OFFSET(DeathEvent, _impl_.entity_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string killer_id = 2;
    {PROTOBUF_FIELD_OFFSET(DeathEvent, _impl_.killer_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string death_type = 3;
    {PROTOBUF_FIELD_OFFSET(DeathEvent, _impl_.death_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.Transform death_location = 4;
    {PROTOBUF_FIELD_OFFSET(DeathEvent, _impl_.death_location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
  }}, {{
    "\21\11\11\12\0\0\0\0"
    "mmorpg.DeathEvent"
    "entity_id"
    "killer_id"
    "death_type"
  }},
};

::uint8_t* DeathEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.DeathEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    const std::string& _s = this->_internal_entity_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.DeathEvent.entity_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string killer_id = 2;
  if (!this->_internal_killer_id().empty()) {
    const std::string& _s = this->_internal_killer_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.DeathEvent.killer_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string death_type = 3;
  if (!this->_internal_death_type().empty()) {
    const std::string& _s = this->_internal_death_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.DeathEvent.death_type");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Transform death_location = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, _Internal::death_location(this),
        _Internal::death_location(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.DeathEvent)
  return target;
}

::size_t DeathEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.DeathEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_entity_id());
  }

  // string killer_id = 2;
  if (!this->_internal_killer_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_killer_id());
  }

  // string death_type = 3;
  if (!this->_internal_death_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_death_type());
  }

  // .mmorpg.Transform death_location = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.death_location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DeathEvent::_class_data_ = {
    DeathEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DeathEvent::GetClassData() const {
  return &_class_data_;
}

void DeathEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DeathEvent*>(&to_msg);
  auto& from = static_cast<const DeathEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.DeathEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (!from._internal_killer_id().empty()) {
    _this->_internal_set_killer_id(from._internal_killer_id());
  }
  if (!from._internal_death_type().empty()) {
    _this->_internal_set_death_type(from._internal_death_type());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_death_location()->::mmorpg::Transform::MergeFrom(
        from._internal_death_location());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeathEvent::CopyFrom(const DeathEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.DeathEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DeathEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DeathEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DeathEvent::InternalSwap(DeathEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.killer_id_, &other->_impl_.killer_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.death_type_, &other->_impl_.death_type_, arena);
  swap(_impl_.death_location_, other->_impl_.death_location_);
}

::google::protobuf::Metadata DeathEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[16]);
}
// ===================================================================

class LevelUpEvent::_Internal {
 public:
};

LevelUpEvent::LevelUpEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.LevelUpEvent)
}
inline PROTOBUF_NDEBUG_INLINE LevelUpEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : player_id_(arena, from.player_id_),
        _cached_size_{0} {}

LevelUpEvent::LevelUpEvent(
    ::google::protobuf::Arena* arena,
    const LevelUpEvent& from)
    : ::google::protobuf::Message(arena) {
  LevelUpEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, new_level_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, new_level_),
           offsetof(Impl_, skill_points_gained_) -
               offsetof(Impl_, new_level_) +
               sizeof(Impl_::skill_points_gained_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.LevelUpEvent)
}
inline PROTOBUF_NDEBUG_INLINE LevelUpEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : player_id_(arena),
        _cached_size_{0} {}

inline void LevelUpEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, new_level_),
           0,
           offsetof(Impl_, skill_points_gained_) -
               offsetof(Impl_, new_level_) +
               sizeof(Impl_::skill_points_gained_));
}
LevelUpEvent::~LevelUpEvent() {
  // @@protoc_insertion_point(destructor:mmorpg.LevelUpEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void LevelUpEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void LevelUpEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.LevelUpEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  ::memset(&_impl_.new_level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.skill_points_gained_) -
      reinterpret_cast<char*>(&_impl_.new_level_)) + sizeof(_impl_.skill_points_gained_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* LevelUpEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 37, 2> LevelUpEvent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_LevelUpEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // int32 skill_points_gained = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LevelUpEvent, _impl_.skill_points_gained_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(LevelUpEvent, _impl_.skill_points_gained_)}},
    // string player_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(LevelUpEvent, _impl_.player_id_)}},
    // int32 new_level = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LevelUpEvent, _impl_.new_level_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(LevelUpEvent, _impl_.new_level_)}},
    // int32 stat_points_gained = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LevelUpEvent, _impl_.stat_points_gained_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(LevelUpEvent, _impl_.stat_points_gained_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string player_id = 1;
    {PROTOBUF_FIELD_OFFSET(LevelUpEvent, _impl_.player_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 new_level = 2;
    {PROTOBUF_FIELD_OFFSET(LevelUpEvent, _impl_.new_level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 stat_points_gained = 3;
    {PROTOBUF_FIELD_OFFSET(LevelUpEvent, _impl_.stat_points_gained_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 skill_points_gained = 4;
    {PROTOBUF_FIELD_OFFSET(LevelUpEvent, _impl_.skill_points_gained_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\23\11\0\0\0\0\0\0"
    "mmorpg.LevelUpEvent"
    "player_id"
  }},
};

::uint8_t* LevelUpEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.LevelUpEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.LevelUpEvent.player_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 new_level = 2;
  if (this->_internal_new_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_new_level(), target);
  }

  // int32 stat_points_gained = 3;
  if (this->_internal_stat_points_gained() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_stat_points_gained(), target);
  }

  // int32 skill_points_gained = 4;
  if (this->_internal_skill_points_gained() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_skill_points_gained(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.LevelUpEvent)
  return target;
}

::size_t LevelUpEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.LevelUpEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  // int32 new_level = 2;
  if (this->_internal_new_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_new_level());
  }

  // int32 stat_points_gained = 3;
  if (this->_internal_stat_points_gained() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_stat_points_gained());
  }

  // int32 skill_points_gained = 4;
  if (this->_internal_skill_points_gained() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_skill_points_gained());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData LevelUpEvent::_class_data_ = {
    LevelUpEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* LevelUpEvent::GetClassData() const {
  return &_class_data_;
}

void LevelUpEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<LevelUpEvent*>(&to_msg);
  auto& from = static_cast<const LevelUpEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.LevelUpEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_new_level() != 0) {
    _this->_internal_set_new_level(from._internal_new_level());
  }
  if (from._internal_stat_points_gained() != 0) {
    _this->_internal_set_stat_points_gained(from._internal_stat_points_gained());
  }
  if (from._internal_skill_points_gained() != 0) {
    _this->_internal_set_skill_points_gained(from._internal_skill_points_gained());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LevelUpEvent::CopyFrom(const LevelUpEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.LevelUpEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool LevelUpEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* LevelUpEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void LevelUpEvent::InternalSwap(LevelUpEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LevelUpEvent, _impl_.skill_points_gained_)
      + sizeof(LevelUpEvent::_impl_.skill_points_gained_)
      - PROTOBUF_FIELD_OFFSET(LevelUpEvent, _impl_.new_level_)>(
          reinterpret_cast<char*>(&_impl_.new_level_),
          reinterpret_cast<char*>(&other->_impl_.new_level_));
}

::google::protobuf::Metadata LevelUpEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[17]);
}
// ===================================================================

class EmoteEvent::_Internal {
 public:
};

EmoteEvent::EmoteEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.EmoteEvent)
}
inline PROTOBUF_NDEBUG_INLINE EmoteEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : entity_id_(arena, from.entity_id_),
        emote_id_(arena, from.emote_id_),
        target_id_(arena, from.target_id_),
        _cached_size_{0} {}

EmoteEvent::EmoteEvent(
    ::google::protobuf::Arena* arena,
    const EmoteEvent& from)
    : ::google::protobuf::Message(arena) {
  EmoteEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:mmorpg.EmoteEvent)
}
inline PROTOBUF_NDEBUG_INLINE EmoteEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : entity_id_(arena),
        emote_id_(arena),
        target_id_(arena),
        _cached_size_{0} {}

inline void EmoteEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EmoteEvent::~EmoteEvent() {
  // @@protoc_insertion_point(destructor:mmorpg.EmoteEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EmoteEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.entity_id_.Destroy();
  _impl_.emote_id_.Destroy();
  _impl_.target_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void EmoteEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.EmoteEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_id_.ClearToEmpty();
  _impl_.emote_id_.ClearToEmpty();
  _impl_.target_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EmoteEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 52, 2> EmoteEvent::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EmoteEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string entity_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EmoteEvent, _impl_.entity_id_)}},
    // string emote_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EmoteEvent, _impl_.emote_id_)}},
    // string target_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(EmoteEvent, _impl_.target_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string entity_id = 1;
    {PROTOBUF_FIELD_OFFSET(EmoteEvent, _impl_.entity_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string emote_id = 2;
    {PROTOBUF_FIELD_OFFSET(EmoteEvent, _impl_.emote_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target_id = 3;
    {PROTOBUF_FIELD_OFFSET(EmoteEvent, _impl_.target_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\21\11\10\11\0\0\0\0"
    "mmorpg.EmoteEvent"
    "entity_id"
    "emote_id"
    "target_id"
  }},
};

::uint8_t* EmoteEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.EmoteEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    const std::string& _s = this->_internal_entity_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.EmoteEvent.entity_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string emote_id = 2;
  if (!this->_internal_emote_id().empty()) {
    const std::string& _s = this->_internal_emote_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.EmoteEvent.emote_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string target_id = 3;
  if (!this->_internal_target_id().empty()) {
    const std::string& _s = this->_internal_target_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.EmoteEvent.target_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.EmoteEvent)
  return target;
}

::size_t EmoteEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.EmoteEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_id = 1;
  if (!this->_internal_entity_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_entity_id());
  }

  // string emote_id = 2;
  if (!this->_internal_emote_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_emote_id());
  }

  // string target_id = 3;
  if (!this->_internal_target_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_target_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EmoteEvent::_class_data_ = {
    EmoteEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* EmoteEvent::GetClassData() const {
  return &_class_data_;
}

void EmoteEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EmoteEvent*>(&to_msg);
  auto& from = static_cast<const EmoteEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.EmoteEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_entity_id().empty()) {
    _this->_internal_set_entity_id(from._internal_entity_id());
  }
  if (!from._internal_emote_id().empty()) {
    _this->_internal_set_emote_id(from._internal_emote_id());
  }
  if (!from._internal_target_id().empty()) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EmoteEvent::CopyFrom(const EmoteEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.EmoteEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EmoteEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* EmoteEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void EmoteEvent::InternalSwap(EmoteEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.entity_id_, &other->_impl_.entity_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.emote_id_, &other->_impl_.emote_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_id_, &other->_impl_.target_id_, arena);
}

::google::protobuf::Metadata EmoteEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[18]);
}
// ===================================================================

class SoundEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SoundEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_._has_bits_);
  static const ::mmorpg::Transform& location(const SoundEvent* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mmorpg::Transform& SoundEvent::_Internal::location(const SoundEvent* msg) {
  return *msg->_impl_.location_;
}
void SoundEvent::clear_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SoundEvent::SoundEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.SoundEvent)
}
inline PROTOBUF_NDEBUG_INLINE SoundEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        sound_id_(arena, from.sound_id_) {}

SoundEvent::SoundEvent(
    ::google::protobuf::Arena* arena,
    const SoundEvent& from)
    : ::google::protobuf::Message(arena) {
  SoundEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.location_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, volume_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, volume_),
           offsetof(Impl_, range_) -
               offsetof(Impl_, volume_) +
               sizeof(Impl_::range_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.SoundEvent)
}
inline PROTOBUF_NDEBUG_INLINE SoundEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        sound_id_(arena) {}

inline void SoundEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, range_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::range_));
}
SoundEvent::~SoundEvent() {
  // @@protoc_insertion_point(destructor:mmorpg.SoundEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SoundEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.sound_id_.Destroy();
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SoundEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.SoundEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sound_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  ::memset(&_impl_.volume_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.range_) -
      reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.range_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SoundEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 34, 2> SoundEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SoundEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // float range = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_.range_)}},
    // string sound_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_.sound_id_)}},
    // .mmorpg.Transform location = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_.location_)}},
    // float volume = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_.volume_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string sound_id = 1;
    {PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_.sound_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.Transform location = 2;
    {PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float volume = 3;
    {PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_.volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float range = 4;
    {PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_.range_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
  }}, {{
    "\21\10\0\0\0\0\0\0"
    "mmorpg.SoundEvent"
    "sound_id"
  }},
};

::uint8_t* SoundEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.SoundEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string sound_id = 1;
  if (!this->_internal_sound_id().empty()) {
    const std::string& _s = this->_internal_sound_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.SoundEvent.sound_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Transform location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // float volume = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_volume = this->_internal_volume();
  ::uint32_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_volume(), target);
  }

  // float range = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_range = this->_internal_range();
  ::uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.SoundEvent)
  return target;
}

::size_t SoundEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.SoundEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sound_id = 1;
  if (!this->_internal_sound_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sound_id());
  }

  // .mmorpg.Transform location = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.location_);
  }

  // float volume = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_volume = this->_internal_volume();
  ::uint32_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    total_size += 5;
  }

  // float range = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_range = this->_internal_range();
  ::uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SoundEvent::_class_data_ = {
    SoundEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SoundEvent::GetClassData() const {
  return &_class_data_;
}

void SoundEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SoundEvent*>(&to_msg);
  auto& from = static_cast<const SoundEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.SoundEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sound_id().empty()) {
    _this->_internal_set_sound_id(from._internal_sound_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_location()->::mmorpg::Transform::MergeFrom(
        from._internal_location());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_volume = from._internal_volume();
  ::uint32_t raw_volume;
  memcpy(&raw_volume, &tmp_volume, sizeof(tmp_volume));
  if (raw_volume != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_range = from._internal_range();
  ::uint32_t raw_range;
  memcpy(&raw_range, &tmp_range, sizeof(tmp_range));
  if (raw_range != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SoundEvent::CopyFrom(const SoundEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.SoundEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SoundEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SoundEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SoundEvent::InternalSwap(SoundEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sound_id_, &other->_impl_.sound_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_.range_)
      + sizeof(SoundEvent::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(SoundEvent, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata SoundEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[19]);
}
// ===================================================================

class VisualEffectEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<VisualEffectEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_._has_bits_);
  static const ::mmorpg::Transform& location(const VisualEffectEvent* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mmorpg::Transform& VisualEffectEvent::_Internal::location(const VisualEffectEvent* msg) {
  return *msg->_impl_.location_;
}
void VisualEffectEvent::clear_location() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.location_ != nullptr) _impl_.location_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
VisualEffectEvent::VisualEffectEvent(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.VisualEffectEvent)
}
inline PROTOBUF_NDEBUG_INLINE VisualEffectEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        effect_id_(arena, from.effect_id_),
        attach_to_entity_(arena, from.attach_to_entity_) {}

VisualEffectEvent::VisualEffectEvent(
    ::google::protobuf::Arena* arena,
    const VisualEffectEvent& from)
    : ::google::protobuf::Message(arena) {
  VisualEffectEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.location_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.location_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, duration_),
           offsetof(Impl_, scale_) -
               offsetof(Impl_, duration_) +
               sizeof(Impl_::scale_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.VisualEffectEvent)
}
inline PROTOBUF_NDEBUG_INLINE VisualEffectEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        effect_id_(arena),
        attach_to_entity_(arena) {}

inline void VisualEffectEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, location_),
           0,
           offsetof(Impl_, scale_) -
               offsetof(Impl_, location_) +
               sizeof(Impl_::scale_));
}
VisualEffectEvent::~VisualEffectEvent() {
  // @@protoc_insertion_point(destructor:mmorpg.VisualEffectEvent)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void VisualEffectEvent::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.effect_id_.Destroy();
  _impl_.attach_to_entity_.Destroy();
  delete _impl_.location_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void VisualEffectEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.VisualEffectEvent)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effect_id_.ClearToEmpty();
  _impl_.attach_to_entity_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.location_ != nullptr);
    _impl_.location_->Clear();
  }
  ::memset(&_impl_.duration_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.scale_) -
      reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.scale_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* VisualEffectEvent::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 58, 2> VisualEffectEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_VisualEffectEvent_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string effect_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.effect_id_)}},
    // .mmorpg.Transform location = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.location_)}},
    // float duration = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.duration_)}},
    // float scale = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.scale_)}},
    // string attach_to_entity = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.attach_to_entity_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string effect_id = 1;
    {PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.effect_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.Transform location = 2;
    {PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.location_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // float duration = 3;
    {PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.duration_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float scale = 4;
    {PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.scale_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string attach_to_entity = 5;
    {PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.attach_to_entity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
  }}, {{
    "\30\11\0\0\0\20\0\0"
    "mmorpg.VisualEffectEvent"
    "effect_id"
    "attach_to_entity"
  }},
};

::uint8_t* VisualEffectEvent::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.VisualEffectEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string effect_id = 1;
  if (!this->_internal_effect_id().empty()) {
    const std::string& _s = this->_internal_effect_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.VisualEffectEvent.effect_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Transform location = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::location(this),
        _Internal::location(this).GetCachedSize(), target, stream);
  }

  // float duration = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  ::uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this->_internal_duration(), target);
  }

  // float scale = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_scale = this->_internal_scale();
  ::uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_scale(), target);
  }

  // string attach_to_entity = 5;
  if (!this->_internal_attach_to_entity().empty()) {
    const std::string& _s = this->_internal_attach_to_entity();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.VisualEffectEvent.attach_to_entity");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.VisualEffectEvent)
  return target;
}

::size_t VisualEffectEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.VisualEffectEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string effect_id = 1;
  if (!this->_internal_effect_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_effect_id());
  }

  // string attach_to_entity = 5;
  if (!this->_internal_attach_to_entity().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_attach_to_entity());
  }

  // .mmorpg.Transform location = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.location_);
  }

  // float duration = 3;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  ::uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 5;
  }

  // float scale = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_scale = this->_internal_scale();
  ::uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData VisualEffectEvent::_class_data_ = {
    VisualEffectEvent::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* VisualEffectEvent::GetClassData() const {
  return &_class_data_;
}

void VisualEffectEvent::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<VisualEffectEvent*>(&to_msg);
  auto& from = static_cast<const VisualEffectEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.VisualEffectEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_effect_id().empty()) {
    _this->_internal_set_effect_id(from._internal_effect_id());
  }
  if (!from._internal_attach_to_entity().empty()) {
    _this->_internal_set_attach_to_entity(from._internal_attach_to_entity());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_location()->::mmorpg::Transform::MergeFrom(
        from._internal_location());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_duration = from._internal_duration();
  ::uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_scale = from._internal_scale();
  ::uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    _this->_internal_set_scale(from._internal_scale());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VisualEffectEvent::CopyFrom(const VisualEffectEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.VisualEffectEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool VisualEffectEvent::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* VisualEffectEvent::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void VisualEffectEvent::InternalSwap(VisualEffectEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.effect_id_, &other->_impl_.effect_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.attach_to_entity_, &other->_impl_.attach_to_entity_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.scale_)
      + sizeof(VisualEffectEvent::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(VisualEffectEvent, _impl_.location_)>(
          reinterpret_cast<char*>(&_impl_.location_),
          reinterpret_cast<char*>(&other->_impl_.location_));
}

::google::protobuf::Metadata VisualEffectEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[20]);
}
// ===================================================================

class StatusEffect::_Internal {
 public:
};

StatusEffect::StatusEffect(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.StatusEffect)
}
inline PROTOBUF_NDEBUG_INLINE StatusEffect::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : effect_id_(arena, from.effect_id_),
        effect_type_(arena, from.effect_type_),
        icon_id_(arena, from.icon_id_),
        source_id_(arena, from.source_id_),
        _cached_size_{0} {}

StatusEffect::StatusEffect(
    ::google::protobuf::Arena* arena,
    const StatusEffect& from)
    : ::google::protobuf::Message(arena) {
  StatusEffect* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, duration_),
           offsetof(Impl_, stacks_) -
               offsetof(Impl_, duration_) +
               sizeof(Impl_::stacks_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.StatusEffect)
}
inline PROTOBUF_NDEBUG_INLINE StatusEffect::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : effect_id_(arena),
        effect_type_(arena),
        icon_id_(arena),
        source_id_(arena),
        _cached_size_{0} {}

inline void StatusEffect::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, duration_),
           0,
           offsetof(Impl_, stacks_) -
               offsetof(Impl_, duration_) +
               sizeof(Impl_::stacks_));
}
StatusEffect::~StatusEffect() {
  // @@protoc_insertion_point(destructor:mmorpg.StatusEffect)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StatusEffect::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.effect_id_.Destroy();
  _impl_.effect_type_.Destroy();
  _impl_.icon_id_.Destroy();
  _impl_.source_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StatusEffect::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.StatusEffect)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.effect_id_.ClearToEmpty();
  _impl_.effect_type_.ClearToEmpty();
  _impl_.icon_id_.ClearToEmpty();
  _impl_.source_id_.ClearToEmpty();
  ::memset(&_impl_.duration_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.stacks_) -
      reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.stacks_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StatusEffect::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 64, 2> StatusEffect::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_StatusEffect_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string effect_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.effect_id_)}},
    // string effect_type = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.effect_type_)}},
    // string icon_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.icon_id_)}},
    // float duration = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.duration_)}},
    // int32 stacks = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StatusEffect, _impl_.stacks_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.stacks_)}},
    // string source_id = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.source_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string effect_id = 1;
    {PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.effect_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string effect_type = 2;
    {PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.effect_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string icon_id = 3;
    {PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.icon_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float duration = 4;
    {PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.duration_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int32 stacks = 5;
    {PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.stacks_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string source_id = 6;
    {PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.source_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\11\13\7\0\0\11\0"
    "mmorpg.StatusEffect"
    "effect_id"
    "effect_type"
    "icon_id"
    "source_id"
  }},
};

::uint8_t* StatusEffect::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.StatusEffect)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string effect_id = 1;
  if (!this->_internal_effect_id().empty()) {
    const std::string& _s = this->_internal_effect_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.StatusEffect.effect_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string effect_type = 2;
  if (!this->_internal_effect_type().empty()) {
    const std::string& _s = this->_internal_effect_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.StatusEffect.effect_type");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string icon_id = 3;
  if (!this->_internal_icon_id().empty()) {
    const std::string& _s = this->_internal_icon_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.StatusEffect.icon_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // float duration = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  ::uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_duration(), target);
  }

  // int32 stacks = 5;
  if (this->_internal_stacks() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_stacks(), target);
  }

  // string source_id = 6;
  if (!this->_internal_source_id().empty()) {
    const std::string& _s = this->_internal_source_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.StatusEffect.source_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.StatusEffect)
  return target;
}

::size_t StatusEffect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.StatusEffect)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string effect_id = 1;
  if (!this->_internal_effect_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_effect_id());
  }

  // string effect_type = 2;
  if (!this->_internal_effect_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_effect_type());
  }

  // string icon_id = 3;
  if (!this->_internal_icon_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_icon_id());
  }

  // string source_id = 6;
  if (!this->_internal_source_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_source_id());
  }

  // float duration = 4;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_duration = this->_internal_duration();
  ::uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    total_size += 5;
  }

  // int32 stacks = 5;
  if (this->_internal_stacks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_stacks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StatusEffect::_class_data_ = {
    StatusEffect::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StatusEffect::GetClassData() const {
  return &_class_data_;
}

void StatusEffect::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StatusEffect*>(&to_msg);
  auto& from = static_cast<const StatusEffect&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.StatusEffect)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_effect_id().empty()) {
    _this->_internal_set_effect_id(from._internal_effect_id());
  }
  if (!from._internal_effect_type().empty()) {
    _this->_internal_set_effect_type(from._internal_effect_type());
  }
  if (!from._internal_icon_id().empty()) {
    _this->_internal_set_icon_id(from._internal_icon_id());
  }
  if (!from._internal_source_id().empty()) {
    _this->_internal_set_source_id(from._internal_source_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_duration = from._internal_duration();
  ::uint32_t raw_duration;
  memcpy(&raw_duration, &tmp_duration, sizeof(tmp_duration));
  if (raw_duration != 0) {
    _this->_internal_set_duration(from._internal_duration());
  }
  if (from._internal_stacks() != 0) {
    _this->_internal_set_stacks(from._internal_stacks());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StatusEffect::CopyFrom(const StatusEffect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.StatusEffect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StatusEffect::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StatusEffect::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StatusEffect::InternalSwap(StatusEffect* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.effect_id_, &other->_impl_.effect_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.effect_type_, &other->_impl_.effect_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.icon_id_, &other->_impl_.icon_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.source_id_, &other->_impl_.source_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.stacks_)
      + sizeof(StatusEffect::_impl_.stacks_)
      - PROTOBUF_FIELD_OFFSET(StatusEffect, _impl_.duration_)>(
          reinterpret_cast<char*>(&_impl_.duration_),
          reinterpret_cast<char*>(&other->_impl_.duration_));
}

::google::protobuf::Metadata StatusEffect::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[21]);
}
// ===================================================================

class ZoneChangeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ZoneChangeRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ZoneChangeRequest, _impl_._has_bits_);
  static const ::mmorpg::Transform& target_transform(const ZoneChangeRequest* msg);
  static void set_has_target_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mmorpg::Transform& ZoneChangeRequest::_Internal::target_transform(const ZoneChangeRequest* msg) {
  return *msg->_impl_.target_transform_;
}
void ZoneChangeRequest::clear_target_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.target_transform_ != nullptr) _impl_.target_transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ZoneChangeRequest::ZoneChangeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ZoneChangeRequest)
}
inline PROTOBUF_NDEBUG_INLINE ZoneChangeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        player_id_(arena, from.player_id_),
        target_zone_id_(arena, from.target_zone_id_) {}

ZoneChangeRequest::ZoneChangeRequest(
    ::google::protobuf::Arena* arena,
    const ZoneChangeRequest& from)
    : ::google::protobuf::Message(arena) {
  ZoneChangeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.target_transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.target_transform_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mmorpg.ZoneChangeRequest)
}
inline PROTOBUF_NDEBUG_INLINE ZoneChangeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        player_id_(arena),
        target_zone_id_(arena) {}

inline void ZoneChangeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.target_transform_ = {};
}
ZoneChangeRequest::~ZoneChangeRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.ZoneChangeRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ZoneChangeRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.target_zone_id_.Destroy();
  delete _impl_.target_transform_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ZoneChangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ZoneChangeRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.target_zone_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.target_transform_ != nullptr);
    _impl_.target_transform_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ZoneChangeRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 56, 2> ZoneChangeRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ZoneChangeRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ZoneChangeRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string player_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ZoneChangeRequest, _impl_.player_id_)}},
    // string target_zone_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ZoneChangeRequest, _impl_.target_zone_id_)}},
    // .mmorpg.Transform target_transform = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ZoneChangeRequest, _impl_.target_transform_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string player_id = 1;
    {PROTOBUF_FIELD_OFFSET(ZoneChangeRequest, _impl_.player_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target_zone_id = 2;
    {PROTOBUF_FIELD_OFFSET(ZoneChangeRequest, _impl_.target_zone_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.Transform target_transform = 3;
    {PROTOBUF_FIELD_OFFSET(ZoneChangeRequest, _impl_.target_transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
  }}, {{
    "\30\11\16\0\0\0\0\0"
    "mmorpg.ZoneChangeRequest"
    "player_id"
    "target_zone_id"
  }},
};

::uint8_t* ZoneChangeRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ZoneChangeRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ZoneChangeRequest.player_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string target_zone_id = 2;
  if (!this->_internal_target_zone_id().empty()) {
    const std::string& _s = this->_internal_target_zone_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ZoneChangeRequest.target_zone_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Transform target_transform = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::target_transform(this),
        _Internal::target_transform(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ZoneChangeRequest)
  return target;
}

::size_t ZoneChangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ZoneChangeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  // string target_zone_id = 2;
  if (!this->_internal_target_zone_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_target_zone_id());
  }

  // .mmorpg.Transform target_transform = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.target_transform_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ZoneChangeRequest::_class_data_ = {
    ZoneChangeRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ZoneChangeRequest::GetClassData() const {
  return &_class_data_;
}

void ZoneChangeRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ZoneChangeRequest*>(&to_msg);
  auto& from = static_cast<const ZoneChangeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ZoneChangeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_target_zone_id().empty()) {
    _this->_internal_set_target_zone_id(from._internal_target_zone_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_target_transform()->::mmorpg::Transform::MergeFrom(
        from._internal_target_transform());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ZoneChangeRequest::CopyFrom(const ZoneChangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ZoneChangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ZoneChangeRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ZoneChangeRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ZoneChangeRequest::InternalSwap(ZoneChangeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_zone_id_, &other->_impl_.target_zone_id_, arena);
  swap(_impl_.target_transform_, other->_impl_.target_transform_);
}

::google::protobuf::Metadata ZoneChangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[22]);
}
// ===================================================================

class ZoneChangeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ZoneChangeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_._has_bits_);
  static const ::mmorpg::Transform& spawn_transform(const ZoneChangeResponse* msg);
  static void set_has_spawn_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mmorpg::Transform& ZoneChangeResponse::_Internal::spawn_transform(const ZoneChangeResponse* msg) {
  return *msg->_impl_.spawn_transform_;
}
void ZoneChangeResponse::clear_spawn_transform() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.spawn_transform_ != nullptr) _impl_.spawn_transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ZoneChangeResponse::ZoneChangeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ZoneChangeResponse)
}
inline PROTOBUF_NDEBUG_INLINE ZoneChangeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        new_zone_id_(arena, from.new_zone_id_),
        world_server_url_(arena, from.world_server_url_),
        world_token_(arena, from.world_token_),
        error_message_(arena, from.error_message_) {}

ZoneChangeResponse::ZoneChangeResponse(
    ::google::protobuf::Arena* arena,
    const ZoneChangeResponse& from)
    : ::google::protobuf::Message(arena) {
  ZoneChangeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.spawn_transform_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::mmorpg::Transform>(arena, *from._impl_.spawn_transform_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.ZoneChangeResponse)
}
inline PROTOBUF_NDEBUG_INLINE ZoneChangeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        new_zone_id_(arena),
        world_server_url_(arena),
        world_token_(arena),
        error_message_(arena) {}

inline void ZoneChangeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, spawn_transform_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, spawn_transform_) +
               sizeof(Impl_::error_code_));
}
ZoneChangeResponse::~ZoneChangeResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.ZoneChangeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ZoneChangeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.new_zone_id_.Destroy();
  _impl_.world_server_url_.Destroy();
  _impl_.world_token_.Destroy();
  _impl_.error_message_.Destroy();
  delete _impl_.spawn_transform_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ZoneChangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ZoneChangeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_zone_id_.ClearToEmpty();
  _impl_.world_server_url_.ClearToEmpty();
  _impl_.world_token_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.spawn_transform_ != nullptr);
    _impl_.spawn_transform_->Clear();
  }
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ZoneChangeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 85, 2> ZoneChangeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ZoneChangeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ZoneChangeResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.success_)}},
    // string new_zone_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.new_zone_id_)}},
    // string world_server_url = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.world_server_url_)}},
    // string world_token = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.world_token_)}},
    // .mmorpg.Transform spawn_transform = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.spawn_transform_)}},
    // string error_message = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.error_message_)}},
    // .mmorpg.ErrorCode error_code = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ZoneChangeResponse, _impl_.error_code_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.error_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.success_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string new_zone_id = 2;
    {PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.new_zone_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string world_server_url = 3;
    {PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.world_server_url_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string world_token = 4;
    {PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.world_token_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.Transform spawn_transform = 5;
    {PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.spawn_transform_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string error_message = 6;
    {PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.error_message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 7;
    {PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.error_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::Transform>()},
  }}, {{
    "\31\0\13\20\13\0\15\0"
    "mmorpg.ZoneChangeResponse"
    "new_zone_id"
    "world_server_url"
    "world_token"
    "error_message"
  }},
};

::uint8_t* ZoneChangeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ZoneChangeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string new_zone_id = 2;
  if (!this->_internal_new_zone_id().empty()) {
    const std::string& _s = this->_internal_new_zone_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ZoneChangeResponse.new_zone_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string world_server_url = 3;
  if (!this->_internal_world_server_url().empty()) {
    const std::string& _s = this->_internal_world_server_url();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ZoneChangeResponse.world_server_url");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string world_token = 4;
  if (!this->_internal_world_token().empty()) {
    const std::string& _s = this->_internal_world_token();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ZoneChangeResponse.world_token");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .mmorpg.Transform spawn_transform = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::spawn_transform(this),
        _Internal::spawn_transform(this).GetCachedSize(), target, stream);
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ZoneChangeResponse.error_message");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 7;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ZoneChangeResponse)
  return target;
}

::size_t ZoneChangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ZoneChangeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string new_zone_id = 2;
  if (!this->_internal_new_zone_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_new_zone_id());
  }

  // string world_server_url = 3;
  if (!this->_internal_world_server_url().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_world_server_url());
  }

  // string world_token = 4;
  if (!this->_internal_world_token().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_world_token());
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // .mmorpg.Transform spawn_transform = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.spawn_transform_);
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // .mmorpg.ErrorCode error_code = 7;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ZoneChangeResponse::_class_data_ = {
    ZoneChangeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ZoneChangeResponse::GetClassData() const {
  return &_class_data_;
}

void ZoneChangeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ZoneChangeResponse*>(&to_msg);
  auto& from = static_cast<const ZoneChangeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ZoneChangeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_new_zone_id().empty()) {
    _this->_internal_set_new_zone_id(from._internal_new_zone_id());
  }
  if (!from._internal_world_server_url().empty()) {
    _this->_internal_set_world_server_url(from._internal_world_server_url());
  }
  if (!from._internal_world_token().empty()) {
    _this->_internal_set_world_token(from._internal_world_token());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_spawn_transform()->::mmorpg::Transform::MergeFrom(
        from._internal_spawn_transform());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ZoneChangeResponse::CopyFrom(const ZoneChangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ZoneChangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ZoneChangeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ZoneChangeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ZoneChangeResponse::InternalSwap(ZoneChangeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.new_zone_id_, &other->_impl_.new_zone_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.world_server_url_, &other->_impl_.world_server_url_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.world_token_, &other->_impl_.world_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.error_code_)
      + sizeof(ZoneChangeResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(ZoneChangeResponse, _impl_.spawn_transform_)>(
          reinterpret_cast<char*>(&_impl_.spawn_transform_),
          reinterpret_cast<char*>(&other->_impl_.spawn_transform_));
}

::google::protobuf::Metadata ZoneChangeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[23]);
}
// ===================================================================

class InterestUpdateRequest::_Internal {
 public:
};

InterestUpdateRequest::InterestUpdateRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.InterestUpdateRequest)
}
inline PROTOBUF_NDEBUG_INLINE InterestUpdateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : interest_filters_{visibility, arena, from.interest_filters_},
        player_id_(arena, from.player_id_),
        _cached_size_{0} {}

InterestUpdateRequest::InterestUpdateRequest(
    ::google::protobuf::Arena* arena,
    const InterestUpdateRequest& from)
    : ::google::protobuf::Message(arena) {
  InterestUpdateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.view_distance_ = from._impl_.view_distance_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.InterestUpdateRequest)
}
inline PROTOBUF_NDEBUG_INLINE InterestUpdateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : interest_filters_{visibility, arena},
        player_id_(arena),
        _cached_size_{0} {}

inline void InterestUpdateRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.view_distance_ = {};
}
InterestUpdateRequest::~InterestUpdateRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.InterestUpdateRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void InterestUpdateRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void InterestUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.InterestUpdateRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.interest_filters_.Clear();
  _impl_.player_id_.ClearToEmpty();
  _impl_.view_distance_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* InterestUpdateRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 62, 2> InterestUpdateRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_InterestUpdateRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string player_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InterestUpdateRequest, _impl_.player_id_)}},
    // float view_distance = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(InterestUpdateRequest, _impl_.view_distance_)}},
    // repeated string interest_filters = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(InterestUpdateRequest, _impl_.interest_filters_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string player_id = 1;
    {PROTOBUF_FIELD_OFFSET(InterestUpdateRequest, _impl_.player_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float view_distance = 2;
    {PROTOBUF_FIELD_OFFSET(InterestUpdateRequest, _impl_.view_distance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated string interest_filters = 3;
    {PROTOBUF_FIELD_OFFSET(InterestUpdateRequest, _impl_.interest_filters_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\34\11\0\20\0\0\0\0"
    "mmorpg.InterestUpdateRequest"
    "player_id"
    "interest_filters"
  }},
};

::uint8_t* InterestUpdateRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.InterestUpdateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.InterestUpdateRequest.player_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // float view_distance = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_view_distance = this->_internal_view_distance();
  ::uint32_t raw_view_distance;
  memcpy(&raw_view_distance, &tmp_view_distance, sizeof(tmp_view_distance));
  if (raw_view_distance != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_view_distance(), target);
  }

  // repeated string interest_filters = 3;
  for (int i = 0, n = this->_internal_interest_filters_size(); i < n; ++i) {
    const auto& s = this->_internal_interest_filters().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.InterestUpdateRequest.interest_filters");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.InterestUpdateRequest)
  return target;
}

::size_t InterestUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.InterestUpdateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string interest_filters = 3;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_interest_filters().size());
  for (int i = 0, n = _internal_interest_filters().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_interest_filters().Get(i));
  }
  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  // float view_distance = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_view_distance = this->_internal_view_distance();
  ::uint32_t raw_view_distance;
  memcpy(&raw_view_distance, &tmp_view_distance, sizeof(tmp_view_distance));
  if (raw_view_distance != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData InterestUpdateRequest::_class_data_ = {
    InterestUpdateRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* InterestUpdateRequest::GetClassData() const {
  return &_class_data_;
}

void InterestUpdateRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<InterestUpdateRequest*>(&to_msg);
  auto& from = static_cast<const InterestUpdateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.InterestUpdateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_interest_filters()->MergeFrom(from._internal_interest_filters());
  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_view_distance = from._internal_view_distance();
  ::uint32_t raw_view_distance;
  memcpy(&raw_view_distance, &tmp_view_distance, sizeof(tmp_view_distance));
  if (raw_view_distance != 0) {
    _this->_internal_set_view_distance(from._internal_view_distance());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InterestUpdateRequest::CopyFrom(const InterestUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.InterestUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool InterestUpdateRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* InterestUpdateRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void InterestUpdateRequest::InternalSwap(InterestUpdateRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.interest_filters_.InternalSwap(&other->_impl_.interest_filters_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
        swap(_impl_.view_distance_, other->_impl_.view_distance_);
}

::google::protobuf::Metadata InterestUpdateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_world_2eproto_getter, &descriptor_table_world_2eproto_once,
      file_level_metadata_world_2eproto[24]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace mmorpg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
