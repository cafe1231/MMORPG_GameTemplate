// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#include "chat.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace mmorpg {

inline constexpr ReportChatResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : report_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReportChatResponse::ReportChatResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ReportChatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportChatResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportChatResponseDefaultTypeInternal() {}
  union {
    ReportChatResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportChatResponseDefaultTypeInternal _ReportChatResponse_default_instance_;

inline constexpr ReportChatMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : reporter_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        additional_info_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reason_{static_cast< ::mmorpg::ReportReason >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ReportChatMessage::ReportChatMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ReportChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportChatMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportChatMessageDefaultTypeInternal() {}
  union {
    ReportChatMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportChatMessageDefaultTypeInternal _ReportChatMessage_default_instance_;

inline constexpr ChatHistoryRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channel_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        before_message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channel_{static_cast< ::mmorpg::ChatChannel >(0)},
        message_count_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChatHistoryRequest::ChatHistoryRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChatHistoryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatHistoryRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatHistoryRequestDefaultTypeInternal() {}
  union {
    ChatHistoryRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatHistoryRequestDefaultTypeInternal _ChatHistoryRequest_default_instance_;

inline constexpr ChatCommandResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChatCommandResponse::ChatCommandResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChatCommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatCommandResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatCommandResponseDefaultTypeInternal() {}
  union {
    ChatCommandResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatCommandResponseDefaultTypeInternal _ChatCommandResponse_default_instance_;

inline constexpr ChatCommand::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : issuer_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channel_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        command_type_{static_cast< ::mmorpg::ChatCommandType >(0)},
        channel_{static_cast< ::mmorpg::ChatChannel >(0)},
        duration_minutes_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChatCommand::ChatCommand(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChatCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatCommandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatCommandDefaultTypeInternal() {}
  union {
    ChatCommand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatCommandDefaultTypeInternal _ChatCommand_default_instance_;

inline constexpr ChannelListRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        list_type_{static_cast< ::mmorpg::ChannelListType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChannelListRequest::ChannelListRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChannelListRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelListRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelListRequestDefaultTypeInternal() {}
  union {
    ChannelListRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelListRequestDefaultTypeInternal _ChannelListRequest_default_instance_;

inline constexpr ChannelLeaveResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChannelLeaveResponse::ChannelLeaveResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChannelLeaveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelLeaveResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelLeaveResponseDefaultTypeInternal() {}
  union {
    ChannelLeaveResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelLeaveResponseDefaultTypeInternal _ChannelLeaveResponse_default_instance_;

inline constexpr ChannelLeaveRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channel_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channel_{static_cast< ::mmorpg::ChatChannel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChannelLeaveRequest::ChannelLeaveRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChannelLeaveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelLeaveRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelLeaveRequestDefaultTypeInternal() {}
  union {
    ChannelLeaveRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelLeaveRequestDefaultTypeInternal _ChannelLeaveRequest_default_instance_;

inline constexpr ChannelJoinRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channel_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        password_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channel_{static_cast< ::mmorpg::ChatChannel >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChannelJoinRequest::ChannelJoinRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChannelJoinRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelJoinRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelJoinRequestDefaultTypeInternal() {}
  union {
    ChannelJoinRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelJoinRequestDefaultTypeInternal _ChannelJoinRequest_default_instance_;

inline constexpr ChannelInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : channel_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channel_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        owner_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channel_type_{static_cast< ::mmorpg::ChatChannel >(0)},
        member_count_{0},
        is_joined_{false},
        is_password_protected_{false},
        is_moderated_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChannelInfo::ChannelInfo(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChannelInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelInfoDefaultTypeInternal() {}
  union {
    ChannelInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelInfoDefaultTypeInternal _ChannelInfo_default_instance_;

inline constexpr WhisperMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sender_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        recipient_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        recipient_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR WhisperMessage::WhisperMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct WhisperMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WhisperMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~WhisperMessageDefaultTypeInternal() {}
  union {
    WhisperMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WhisperMessageDefaultTypeInternal _WhisperMessage_default_instance_;

inline constexpr ChatMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        mentioned_players_{},
        message_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channel_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        recipient_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        recipient_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sender_guild_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_{nullptr},
        channel_{static_cast< ::mmorpg::ChatChannel >(0)},
        sender_level_{0},
        message_type_{static_cast< ::mmorpg::ChatMessageType >(0)},
        is_filtered_{false},
        is_reported_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ChatMessage::ChatMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChatMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatMessageDefaultTypeInternal() {}
  union {
    ChatMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatMessageDefaultTypeInternal _ChatMessage_default_instance_;

inline constexpr ChannelMember::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        player_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        player_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        joined_at_{nullptr},
        role_{static_cast< ::mmorpg::ChannelRole >(0)},
        is_muted_{false} {}

template <typename>
PROTOBUF_CONSTEXPR ChannelMember::ChannelMember(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChannelMemberDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelMemberDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelMemberDefaultTypeInternal() {}
  union {
    ChannelMember _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelMemberDefaultTypeInternal _ChannelMember_default_instance_;

inline constexpr ChannelListResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : channels_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChannelListResponse::ChannelListResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChannelListResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelListResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelListResponseDefaultTypeInternal() {}
  union {
    ChannelListResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelListResponseDefaultTypeInternal _ChannelListResponse_default_instance_;

inline constexpr ChatHistoryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : messages_{},
        has_more_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChatHistoryResponse::ChatHistoryResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChatHistoryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChatHistoryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChatHistoryResponseDefaultTypeInternal() {}
  union {
    ChatHistoryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChatHistoryResponseDefaultTypeInternal _ChatHistoryResponse_default_instance_;

inline constexpr ChannelJoinResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : members_{},
        channel_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        channel_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        channel_{static_cast< ::mmorpg::ChatChannel >(0)},
        error_code_{static_cast< ::mmorpg::ErrorCode >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ChannelJoinResponse::ChannelJoinResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ChannelJoinResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChannelJoinResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChannelJoinResponseDefaultTypeInternal() {}
  union {
    ChannelJoinResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChannelJoinResponseDefaultTypeInternal _ChannelJoinResponse_default_instance_;
}  // namespace mmorpg
static ::_pb::Metadata file_level_metadata_chat_2eproto[16];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_chat_2eproto[6];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_chat_2eproto = nullptr;
const ::uint32_t TableStruct_chat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.message_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.sender_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.sender_name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.timestamp_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.recipient_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.recipient_name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.mentioned_players_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.sender_guild_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.sender_level_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.message_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.is_filtered_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatMessage, _impl_.is_reported_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::mmorpg::WhisperMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WhisperMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::WhisperMessage, _impl_.sender_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WhisperMessage, _impl_.sender_name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WhisperMessage, _impl_.recipient_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WhisperMessage, _impl_.recipient_name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WhisperMessage, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::WhisperMessage, _impl_.timestamp_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinRequest, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinRequest, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinRequest, _impl_.password_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinResponse, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinResponse, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinResponse, _impl_.channel_name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinResponse, _impl_.members_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelJoinResponse, _impl_.error_code_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelLeaveRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelLeaveRequest, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelLeaveRequest, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelLeaveRequest, _impl_.channel_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelLeaveResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelLeaveResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelLeaveResponse, _impl_.message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelListRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelListRequest, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelListRequest, _impl_.list_type_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelListResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelListResponse, _impl_.channels_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelInfo, _impl_.channel_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelInfo, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelInfo, _impl_.channel_name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelInfo, _impl_.member_count_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelInfo, _impl_.is_joined_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelInfo, _impl_.is_password_protected_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelInfo, _impl_.is_moderated_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelInfo, _impl_.owner_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelInfo, _impl_.description_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelMember, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelMember, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelMember, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelMember, _impl_.player_name_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelMember, _impl_.role_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelMember, _impl_.is_muted_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChannelMember, _impl_.joined_at_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommand, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommand, _impl_.issuer_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommand, _impl_.command_type_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommand, _impl_.target_player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommand, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommand, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommand, _impl_.duration_minutes_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommand, _impl_.reason_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommandResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommandResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommandResponse, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatCommandResponse, _impl_.error_code_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatHistoryRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatHistoryRequest, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatHistoryRequest, _impl_.channel_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatHistoryRequest, _impl_.channel_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatHistoryRequest, _impl_.message_count_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatHistoryRequest, _impl_.before_message_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatHistoryResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatHistoryResponse, _impl_.messages_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ChatHistoryResponse, _impl_.has_more_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ReportChatMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ReportChatMessage, _impl_.reporter_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ReportChatMessage, _impl_.message_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ReportChatMessage, _impl_.reason_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ReportChatMessage, _impl_.additional_info_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::mmorpg::ReportChatResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::mmorpg::ReportChatResponse, _impl_.success_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ReportChatResponse, _impl_.report_id_),
    PROTOBUF_FIELD_OFFSET(::mmorpg::ReportChatResponse, _impl_.message_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 23, -1, sizeof(::mmorpg::ChatMessage)},
        {38, 52, -1, sizeof(::mmorpg::WhisperMessage)},
        {58, -1, -1, sizeof(::mmorpg::ChannelJoinRequest)},
        {70, -1, -1, sizeof(::mmorpg::ChannelJoinResponse)},
        {85, -1, -1, sizeof(::mmorpg::ChannelLeaveRequest)},
        {96, -1, -1, sizeof(::mmorpg::ChannelLeaveResponse)},
        {106, -1, -1, sizeof(::mmorpg::ChannelListRequest)},
        {116, -1, -1, sizeof(::mmorpg::ChannelListResponse)},
        {125, -1, -1, sizeof(::mmorpg::ChannelInfo)},
        {142, 155, -1, sizeof(::mmorpg::ChannelMember)},
        {160, -1, -1, sizeof(::mmorpg::ChatCommand)},
        {175, -1, -1, sizeof(::mmorpg::ChatCommandResponse)},
        {186, -1, -1, sizeof(::mmorpg::ChatHistoryRequest)},
        {199, -1, -1, sizeof(::mmorpg::ChatHistoryResponse)},
        {209, -1, -1, sizeof(::mmorpg::ReportChatMessage)},
        {221, -1, -1, sizeof(::mmorpg::ReportChatResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::mmorpg::_ChatMessage_default_instance_._instance,
    &::mmorpg::_WhisperMessage_default_instance_._instance,
    &::mmorpg::_ChannelJoinRequest_default_instance_._instance,
    &::mmorpg::_ChannelJoinResponse_default_instance_._instance,
    &::mmorpg::_ChannelLeaveRequest_default_instance_._instance,
    &::mmorpg::_ChannelLeaveResponse_default_instance_._instance,
    &::mmorpg::_ChannelListRequest_default_instance_._instance,
    &::mmorpg::_ChannelListResponse_default_instance_._instance,
    &::mmorpg::_ChannelInfo_default_instance_._instance,
    &::mmorpg::_ChannelMember_default_instance_._instance,
    &::mmorpg::_ChatCommand_default_instance_._instance,
    &::mmorpg::_ChatCommandResponse_default_instance_._instance,
    &::mmorpg::_ChatHistoryRequest_default_instance_._instance,
    &::mmorpg::_ChatHistoryResponse_default_instance_._instance,
    &::mmorpg::_ReportChatMessage_default_instance_._instance,
    &::mmorpg::_ReportChatResponse_default_instance_._instance,
};
const char descriptor_table_protodef_chat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\nchat.proto\022\006mmorpg\032\037google/protobuf/ti"
    "mestamp.proto\032\nbase.proto\"\221\003\n\013ChatMessag"
    "e\022\022\n\nmessage_id\030\001 \001(\t\022\021\n\tsender_id\030\002 \001(\t"
    "\022\023\n\013sender_name\030\003 \001(\t\022$\n\007channel\030\004 \001(\0162\023"
    ".mmorpg.ChatChannel\022\022\n\nchannel_id\030\005 \001(\t\022"
    "\017\n\007message\030\006 \001(\t\022-\n\ttimestamp\030\007 \001(\0132\032.go"
    "ogle.protobuf.Timestamp\022\024\n\014recipient_id\030"
    "\010 \001(\t\022\026\n\016recipient_name\030\t \001(\t\022\031\n\021mention"
    "ed_players\030\n \003(\t\022\024\n\014sender_guild\030\013 \001(\t\022\024"
    "\n\014sender_level\030\014 \001(\005\022-\n\014message_type\030\r \001"
    "(\0162\027.mmorpg.ChatMessageType\022\023\n\013is_filter"
    "ed\030\016 \001(\010\022\023\n\013is_reported\030\017 \001(\010\"\246\001\n\016Whispe"
    "rMessage\022\021\n\tsender_id\030\001 \001(\t\022\023\n\013sender_na"
    "me\030\002 \001(\t\022\024\n\014recipient_id\030\003 \001(\t\022\026\n\016recipi"
    "ent_name\030\004 \001(\t\022\017\n\007message\030\005 \001(\t\022-\n\ttimes"
    "tamp\030\006 \001(\0132\032.google.protobuf.Timestamp\"s"
    "\n\022ChannelJoinRequest\022\021\n\tplayer_id\030\001 \001(\t\022"
    "$\n\007channel\030\002 \001(\0162\023.mmorpg.ChatChannel\022\022\n"
    "\nchannel_id\030\003 \001(\t\022\020\n\010password\030\004 \001(\t\"\334\001\n\023"
    "ChannelJoinResponse\022\017\n\007success\030\001 \001(\010\022$\n\007"
    "channel\030\002 \001(\0162\023.mmorpg.ChatChannel\022\022\n\nch"
    "annel_id\030\003 \001(\t\022\024\n\014channel_name\030\004 \001(\t\022&\n\007"
    "members\030\005 \003(\0132\025.mmorpg.ChannelMember\022\025\n\r"
    "error_message\030\006 \001(\t\022%\n\nerror_code\030\007 \001(\0162"
    "\021.mmorpg.ErrorCode\"b\n\023ChannelLeaveReques"
    "t\022\021\n\tplayer_id\030\001 \001(\t\022$\n\007channel\030\002 \001(\0162\023."
    "mmorpg.ChatChannel\022\022\n\nchannel_id\030\003 \001(\t\"8"
    "\n\024ChannelLeaveResponse\022\017\n\007success\030\001 \001(\010\022"
    "\017\n\007message\030\002 \001(\t\"S\n\022ChannelListRequest\022\021"
    "\n\tplayer_id\030\001 \001(\t\022*\n\tlist_type\030\002 \001(\0162\027.m"
    "morpg.ChannelListType\"<\n\023ChannelListResp"
    "onse\022%\n\010channels\030\001 \003(\0132\023.mmorpg.ChannelI"
    "nfo\"\347\001\n\013ChannelInfo\022)\n\014channel_type\030\001 \001("
    "\0162\023.mmorpg.ChatChannel\022\022\n\nchannel_id\030\002 \001"
    "(\t\022\024\n\014channel_name\030\003 \001(\t\022\024\n\014member_count"
    "\030\004 \001(\005\022\021\n\tis_joined\030\005 \001(\010\022\035\n\025is_password"
    "_protected\030\006 \001(\010\022\024\n\014is_moderated\030\007 \001(\010\022\020"
    "\n\010owner_id\030\010 \001(\t\022\023\n\013description\030\t \001(\t\"\233\001"
    "\n\rChannelMember\022\021\n\tplayer_id\030\001 \001(\t\022\023\n\013pl"
    "ayer_name\030\002 \001(\t\022!\n\004role\030\003 \001(\0162\023.mmorpg.C"
    "hannelRole\022\020\n\010is_muted\030\004 \001(\010\022-\n\tjoined_a"
    "t\030\005 \001(\0132\032.google.protobuf.Timestamp\"\315\001\n\013"
    "ChatCommand\022\021\n\tissuer_id\030\001 \001(\t\022-\n\014comman"
    "d_type\030\002 \001(\0162\027.mmorpg.ChatCommandType\022\030\n"
    "\020target_player_id\030\003 \001(\t\022$\n\007channel\030\004 \001(\016"
    "2\023.mmorpg.ChatChannel\022\022\n\nchannel_id\030\005 \001("
    "\t\022\030\n\020duration_minutes\030\006 \001(\005\022\016\n\006reason\030\007 "
    "\001(\t\"^\n\023ChatCommandResponse\022\017\n\007success\030\001 "
    "\001(\010\022\017\n\007message\030\002 \001(\t\022%\n\nerror_code\030\003 \001(\016"
    "2\021.mmorpg.ErrorCode\"\223\001\n\022ChatHistoryReque"
    "st\022\021\n\tplayer_id\030\001 \001(\t\022$\n\007channel\030\002 \001(\0162\023"
    ".mmorpg.ChatChannel\022\022\n\nchannel_id\030\003 \001(\t\022"
    "\025\n\rmessage_count\030\004 \001(\005\022\031\n\021before_message"
    "_id\030\005 \001(\t\"N\n\023ChatHistoryResponse\022%\n\010mess"
    "ages\030\001 \003(\0132\023.mmorpg.ChatMessage\022\020\n\010has_m"
    "ore\030\002 \001(\010\"{\n\021ReportChatMessage\022\023\n\013report"
    "er_id\030\001 \001(\t\022\022\n\nmessage_id\030\002 \001(\t\022$\n\006reaso"
    "n\030\003 \001(\0162\024.mmorpg.ReportReason\022\027\n\017additio"
    "nal_info\030\004 \001(\t\"I\n\022ReportChatResponse\022\017\n\007"
    "success\030\001 \001(\010\022\021\n\treport_id\030\002 \001(\t\022\017\n\007mess"
    "age\030\003 \001(\t*\236\002\n\013ChatChannel\022\034\n\030CHAT_CHANNE"
    "L_UNSPECIFIED\020\000\022\027\n\023CHAT_CHANNEL_GLOBAL\020\001"
    "\022\025\n\021CHAT_CHANNEL_ZONE\020\002\022\026\n\022CHAT_CHANNEL_"
    "LOCAL\020\003\022\026\n\022CHAT_CHANNEL_PARTY\020\004\022\026\n\022CHAT_"
    "CHANNEL_GUILD\020\005\022\025\n\021CHAT_CHANNEL_RAID\020\006\022\026"
    "\n\022CHAT_CHANNEL_TRADE\020\007\022\027\n\023CHAT_CHANNEL_S"
    "YSTEM\020\010\022\030\n\024CHAT_CHANNEL_WHISPER\020\t\022\027\n\023CHA"
    "T_CHANNEL_CUSTOM\020\n*\254\002\n\017ChatMessageType\022!"
    "\n\035CHAT_MESSAGE_TYPE_UNSPECIFIED\020\000\022\034\n\030CHA"
    "T_MESSAGE_TYPE_PLAYER\020\001\022\034\n\030CHAT_MESSAGE_"
    "TYPE_SYSTEM\020\002\022\"\n\036CHAT_MESSAGE_TYPE_ANNOU"
    "NCEMENT\020\003\022\035\n\031CHAT_MESSAGE_TYPE_WARNING\020\004"
    "\022\033\n\027CHAT_MESSAGE_TYPE_ERROR\020\005\022\033\n\027CHAT_ME"
    "SSAGE_TYPE_EMOTE\020\006\022!\n\035CHAT_MESSAGE_TYPE_"
    "ACHIEVEMENT\020\007\022\032\n\026CHAT_MESSAGE_TYPE_LOOT\020"
    "\010*x\n\013ChannelRole\022\034\n\030CHANNEL_ROLE_UNSPECI"
    "FIED\020\000\022\027\n\023CHANNEL_ROLE_MEMBER\020\001\022\032\n\026CHANN"
    "EL_ROLE_MODERATOR\020\002\022\026\n\022CHANNEL_ROLE_OWNE"
    "R\020\003*\216\001\n\017ChannelListType\022!\n\035CHANNEL_LIST_"
    "TYPE_UNSPECIFIED\020\000\022\034\n\030CHANNEL_LIST_TYPE_"
    "JOINED\020\001\022\037\n\033CHANNEL_LIST_TYPE_AVAILABLE\020"
    "\002\022\031\n\025CHANNEL_LIST_TYPE_ALL\020\003*\234\002\n\017ChatCom"
    "mandType\022!\n\035CHAT_COMMAND_TYPE_UNSPECIFIE"
    "D\020\000\022\032\n\026CHAT_COMMAND_TYPE_MUTE\020\001\022\034\n\030CHAT_"
    "COMMAND_TYPE_UNMUTE\020\002\022\032\n\026CHAT_COMMAND_TY"
    "PE_KICK\020\003\022\031\n\025CHAT_COMMAND_TYPE_BAN\020\004\022\033\n\027"
    "CHAT_COMMAND_TYPE_UNBAN\020\005\022\035\n\031CHAT_COMMAN"
    "D_TYPE_PROMOTE\020\006\022\034\n\030CHAT_COMMAND_TYPE_DE"
    "MOTE\020\007\022\033\n\027CHAT_COMMAND_TYPE_CLEAR\020\010*\363\001\n\014"
    "ReportReason\022\035\n\031REPORT_REASON_UNSPECIFIE"
    "D\020\000\022\026\n\022REPORT_REASON_SPAM\020\001\022\034\n\030REPORT_RE"
    "ASON_HARASSMENT\020\002\022\035\n\031REPORT_REASON_HATE_"
    "SPEECH\020\003\022\037\n\033REPORT_REASON_INAPPROPRIATE\020"
    "\004\022\026\n\022REPORT_REASON_SCAM\020\005\022\035\n\031REPORT_REAS"
    "ON_ADVERTISING\020\006\022\027\n\023REPORT_REASON_OTHER\020"
    "\007B.Z,github.com/mmorpg-template/backend/"
    "pkg/protob\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_chat_2eproto_deps[2] =
    {
        &::descriptor_table_base_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_chat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_chat_2eproto = {
    false,
    false,
    3857,
    descriptor_table_protodef_chat_2eproto,
    "chat.proto",
    &descriptor_table_chat_2eproto_once,
    descriptor_table_chat_2eproto_deps,
    2,
    16,
    schemas,
    file_default_instances,
    TableStruct_chat_2eproto::offsets,
    file_level_metadata_chat_2eproto,
    file_level_enum_descriptors_chat_2eproto,
    file_level_service_descriptors_chat_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_chat_2eproto_getter() {
  return &descriptor_table_chat_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_chat_2eproto(&descriptor_table_chat_2eproto);
namespace mmorpg {
const ::google::protobuf::EnumDescriptor* ChatChannel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ChatChannel_internal_data_[] = {
    720896u, 0u, };
bool ChatChannel_IsValid(int value) {
  return 0 <= value && value <= 10;
}
const ::google::protobuf::EnumDescriptor* ChatMessageType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ChatMessageType_internal_data_[] = {
    589824u, 0u, };
bool ChatMessageType_IsValid(int value) {
  return 0 <= value && value <= 8;
}
const ::google::protobuf::EnumDescriptor* ChannelRole_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t ChannelRole_internal_data_[] = {
    262144u, 0u, };
bool ChannelRole_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* ChannelListType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t ChannelListType_internal_data_[] = {
    262144u, 0u, };
bool ChannelListType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* ChatCommandType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t ChatCommandType_internal_data_[] = {
    589824u, 0u, };
bool ChatCommandType_IsValid(int value) {
  return 0 <= value && value <= 8;
}
const ::google::protobuf::EnumDescriptor* ReportReason_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_chat_2eproto);
  return file_level_enum_descriptors_chat_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t ReportReason_internal_data_[] = {
    524288u, 0u, };
bool ReportReason_IsValid(int value) {
  return 0 <= value && value <= 7;
}
// ===================================================================

class ChatMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const ChatMessage* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& ChatMessage::_Internal::timestamp(const ChatMessage* msg) {
  return *msg->_impl_.timestamp_;
}
void ChatMessage::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChatMessage::ChatMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChatMessage)
}
inline PROTOBUF_NDEBUG_INLINE ChatMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        mentioned_players_{visibility, arena, from.mentioned_players_},
        message_id_(arena, from.message_id_),
        sender_id_(arena, from.sender_id_),
        sender_name_(arena, from.sender_name_),
        channel_id_(arena, from.channel_id_),
        message_(arena, from.message_),
        recipient_id_(arena, from.recipient_id_),
        recipient_name_(arena, from.recipient_name_),
        sender_guild_(arena, from.sender_guild_) {}

ChatMessage::ChatMessage(
    ::google::protobuf::Arena* arena,
    const ChatMessage& from)
    : ::google::protobuf::Message(arena) {
  ChatMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, channel_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, channel_),
           offsetof(Impl_, is_reported_) -
               offsetof(Impl_, channel_) +
               sizeof(Impl_::is_reported_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChatMessage)
}
inline PROTOBUF_NDEBUG_INLINE ChatMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        mentioned_players_{visibility, arena},
        message_id_(arena),
        sender_id_(arena),
        sender_name_(arena),
        channel_id_(arena),
        message_(arena),
        recipient_id_(arena),
        recipient_name_(arena),
        sender_guild_(arena) {}

inline void ChatMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, is_reported_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::is_reported_));
}
ChatMessage::~ChatMessage() {
  // @@protoc_insertion_point(destructor:mmorpg.ChatMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChatMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_id_.Destroy();
  _impl_.sender_id_.Destroy();
  _impl_.sender_name_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.message_.Destroy();
  _impl_.recipient_id_.Destroy();
  _impl_.recipient_name_.Destroy();
  _impl_.sender_guild_.Destroy();
  delete _impl_.timestamp_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChatMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.mentioned_players_.Clear();
  _impl_.message_id_.ClearToEmpty();
  _impl_.sender_id_.ClearToEmpty();
  _impl_.sender_name_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.recipient_id_.ClearToEmpty();
  _impl_.recipient_name_.ClearToEmpty();
  _impl_.sender_guild_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  ::memset(&_impl_.channel_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_reported_) -
      reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.is_reported_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChatMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 1, 137, 2> ChatMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ChatMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string message_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.message_id_)}},
    // string sender_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_id_)}},
    // string sender_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_name_)}},
    // .mmorpg.ChatChannel channel = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatMessage, _impl_.channel_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.channel_)}},
    // string channel_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.channel_id_)}},
    // string message = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.message_)}},
    // .google.protobuf.Timestamp timestamp = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.timestamp_)}},
    // string recipient_id = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.recipient_id_)}},
    // string recipient_name = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.recipient_name_)}},
    // repeated string mentioned_players = 10;
    {::_pbi::TcParser::FastUR1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.mentioned_players_)}},
    // string sender_guild = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_guild_)}},
    // int32 sender_level = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatMessage, _impl_.sender_level_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_level_)}},
    // .mmorpg.ChatMessageType message_type = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatMessage, _impl_.message_type_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.message_type_)}},
    // bool is_filtered = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatMessage, _impl_.is_filtered_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.is_filtered_)}},
    // bool is_reported = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatMessage, _impl_.is_reported_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.is_reported_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string message_id = 1;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.message_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sender_id = 2;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sender_name = 3;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ChatChannel channel = 4;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.channel_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string channel_id = 5;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.channel_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message = 6;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp timestamp = 7;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string recipient_id = 8;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.recipient_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string recipient_name = 9;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.recipient_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string mentioned_players = 10;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.mentioned_players_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string sender_guild = 11;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_guild_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 sender_level = 12;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.sender_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .mmorpg.ChatMessageType message_type = 13;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.message_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool is_filtered = 14;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.is_filtered_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_reported = 15;
    {PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.is_reported_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\22\12\11\13\0\12\7\0\14\16\21\14\0\0\0\0"
    "mmorpg.ChatMessage"
    "message_id"
    "sender_id"
    "sender_name"
    "channel_id"
    "message"
    "recipient_id"
    "recipient_name"
    "mentioned_players"
    "sender_guild"
  }},
};

::uint8_t* ChatMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChatMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    const std::string& _s = this->_internal_message_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatMessage.message_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string sender_id = 2;
  if (!this->_internal_sender_id().empty()) {
    const std::string& _s = this->_internal_sender_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatMessage.sender_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string sender_name = 3;
  if (!this->_internal_sender_name().empty()) {
    const std::string& _s = this->_internal_sender_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatMessage.sender_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .mmorpg.ChatChannel channel = 4;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_channel(), target);
  }

  // string channel_id = 5;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatMessage.channel_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string message = 6;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatMessage.message");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // string recipient_id = 8;
  if (!this->_internal_recipient_id().empty()) {
    const std::string& _s = this->_internal_recipient_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatMessage.recipient_id");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string recipient_name = 9;
  if (!this->_internal_recipient_name().empty()) {
    const std::string& _s = this->_internal_recipient_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatMessage.recipient_name");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // repeated string mentioned_players = 10;
  for (int i = 0, n = this->_internal_mentioned_players_size(); i < n; ++i) {
    const auto& s = this->_internal_mentioned_players().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatMessage.mentioned_players");
    target = stream->WriteString(10, s, target);
  }

  // string sender_guild = 11;
  if (!this->_internal_sender_guild().empty()) {
    const std::string& _s = this->_internal_sender_guild();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatMessage.sender_guild");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // int32 sender_level = 12;
  if (this->_internal_sender_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_sender_level(), target);
  }

  // .mmorpg.ChatMessageType message_type = 13;
  if (this->_internal_message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        13, this->_internal_message_type(), target);
  }

  // bool is_filtered = 14;
  if (this->_internal_is_filtered() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this->_internal_is_filtered(), target);
  }

  // bool is_reported = 15;
  if (this->_internal_is_reported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this->_internal_is_reported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChatMessage)
  return target;
}

::size_t ChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChatMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string mentioned_players = 10;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_mentioned_players().size());
  for (int i = 0, n = _internal_mentioned_players().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_mentioned_players().Get(i));
  }
  // string message_id = 1;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message_id());
  }

  // string sender_id = 2;
  if (!this->_internal_sender_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sender_id());
  }

  // string sender_name = 3;
  if (!this->_internal_sender_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sender_name());
  }

  // string channel_id = 5;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string message = 6;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // string recipient_id = 8;
  if (!this->_internal_recipient_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_recipient_id());
  }

  // string recipient_name = 9;
  if (!this->_internal_recipient_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_recipient_name());
  }

  // string sender_guild = 11;
  if (!this->_internal_sender_guild().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sender_guild());
  }

  // .google.protobuf.Timestamp timestamp = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_);
  }

  // .mmorpg.ChatChannel channel = 4;
  if (this->_internal_channel() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_channel());
  }

  // int32 sender_level = 12;
  if (this->_internal_sender_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sender_level());
  }

  // .mmorpg.ChatMessageType message_type = 13;
  if (this->_internal_message_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  // bool is_filtered = 14;
  if (this->_internal_is_filtered() != 0) {
    total_size += 2;
  }

  // bool is_reported = 15;
  if (this->_internal_is_reported() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChatMessage::_class_data_ = {
    ChatMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChatMessage::GetClassData() const {
  return &_class_data_;
}

void ChatMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChatMessage*>(&to_msg);
  auto& from = static_cast<const ChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChatMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_mentioned_players()->MergeFrom(from._internal_mentioned_players());
  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_sender_id().empty()) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (!from._internal_sender_name().empty()) {
    _this->_internal_set_sender_name(from._internal_sender_name());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_recipient_id().empty()) {
    _this->_internal_set_recipient_id(from._internal_recipient_id());
  }
  if (!from._internal_recipient_name().empty()) {
    _this->_internal_set_recipient_name(from._internal_recipient_name());
  }
  if (!from._internal_sender_guild().empty()) {
    _this->_internal_set_sender_guild(from._internal_sender_guild());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_sender_level() != 0) {
    _this->_internal_set_sender_level(from._internal_sender_level());
  }
  if (from._internal_message_type() != 0) {
    _this->_internal_set_message_type(from._internal_message_type());
  }
  if (from._internal_is_filtered() != 0) {
    _this->_internal_set_is_filtered(from._internal_is_filtered());
  }
  if (from._internal_is_reported() != 0) {
    _this->_internal_set_is_reported(from._internal_is_reported());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatMessage::CopyFrom(const ChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChatMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChatMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChatMessage::InternalSwap(ChatMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.mentioned_players_.InternalSwap(&other->_impl_.mentioned_players_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_id_, &other->_impl_.message_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_id_, &other->_impl_.sender_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_name_, &other->_impl_.sender_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, &other->_impl_.channel_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recipient_id_, &other->_impl_.recipient_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recipient_name_, &other->_impl_.recipient_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_guild_, &other->_impl_.sender_guild_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.is_reported_)
      + sizeof(ChatMessage::_impl_.is_reported_)
      - PROTOBUF_FIELD_OFFSET(ChatMessage, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata ChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[0]);
}
// ===================================================================

class WhisperMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<WhisperMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& timestamp(const WhisperMessage* msg);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& WhisperMessage::_Internal::timestamp(const WhisperMessage* msg) {
  return *msg->_impl_.timestamp_;
}
void WhisperMessage::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.timestamp_ != nullptr) _impl_.timestamp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
WhisperMessage::WhisperMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.WhisperMessage)
}
inline PROTOBUF_NDEBUG_INLINE WhisperMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        sender_id_(arena, from.sender_id_),
        sender_name_(arena, from.sender_name_),
        recipient_id_(arena, from.recipient_id_),
        recipient_name_(arena, from.recipient_name_),
        message_(arena, from.message_) {}

WhisperMessage::WhisperMessage(
    ::google::protobuf::Arena* arena,
    const WhisperMessage& from)
    : ::google::protobuf::Message(arena) {
  WhisperMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.timestamp_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.timestamp_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:mmorpg.WhisperMessage)
}
inline PROTOBUF_NDEBUG_INLINE WhisperMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        sender_id_(arena),
        sender_name_(arena),
        recipient_id_(arena),
        recipient_name_(arena),
        message_(arena) {}

inline void WhisperMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.timestamp_ = {};
}
WhisperMessage::~WhisperMessage() {
  // @@protoc_insertion_point(destructor:mmorpg.WhisperMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void WhisperMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.sender_id_.Destroy();
  _impl_.sender_name_.Destroy();
  _impl_.recipient_id_.Destroy();
  _impl_.recipient_name_.Destroy();
  _impl_.message_.Destroy();
  delete _impl_.timestamp_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void WhisperMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.WhisperMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sender_id_.ClearToEmpty();
  _impl_.sender_name_.ClearToEmpty();
  _impl_.recipient_id_.ClearToEmpty();
  _impl_.recipient_name_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.timestamp_ != nullptr);
    _impl_.timestamp_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* WhisperMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 83, 2> WhisperMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_WhisperMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string sender_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.sender_id_)}},
    // string sender_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.sender_name_)}},
    // string recipient_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.recipient_id_)}},
    // string recipient_name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.recipient_name_)}},
    // string message = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.message_)}},
    // .google.protobuf.Timestamp timestamp = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string sender_id = 1;
    {PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.sender_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sender_name = 2;
    {PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.sender_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string recipient_id = 3;
    {PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.recipient_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string recipient_name = 4;
    {PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.recipient_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message = 5;
    {PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.message_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp timestamp = 6;
    {PROTOBUF_FIELD_OFFSET(WhisperMessage, _impl_.timestamp_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\25\11\13\14\16\7\0\0"
    "mmorpg.WhisperMessage"
    "sender_id"
    "sender_name"
    "recipient_id"
    "recipient_name"
    "message"
  }},
};

::uint8_t* WhisperMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.WhisperMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string sender_id = 1;
  if (!this->_internal_sender_id().empty()) {
    const std::string& _s = this->_internal_sender_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WhisperMessage.sender_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string sender_name = 2;
  if (!this->_internal_sender_name().empty()) {
    const std::string& _s = this->_internal_sender_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WhisperMessage.sender_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string recipient_id = 3;
  if (!this->_internal_recipient_id().empty()) {
    const std::string& _s = this->_internal_recipient_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WhisperMessage.recipient_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string recipient_name = 4;
  if (!this->_internal_recipient_name().empty()) {
    const std::string& _s = this->_internal_recipient_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WhisperMessage.recipient_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.WhisperMessage.message");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp timestamp = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.WhisperMessage)
  return target;
}

::size_t WhisperMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.WhisperMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender_id = 1;
  if (!this->_internal_sender_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sender_id());
  }

  // string sender_name = 2;
  if (!this->_internal_sender_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sender_name());
  }

  // string recipient_id = 3;
  if (!this->_internal_recipient_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_recipient_id());
  }

  // string recipient_name = 4;
  if (!this->_internal_recipient_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_recipient_name());
  }

  // string message = 5;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // .google.protobuf.Timestamp timestamp = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData WhisperMessage::_class_data_ = {
    WhisperMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* WhisperMessage::GetClassData() const {
  return &_class_data_;
}

void WhisperMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<WhisperMessage*>(&to_msg);
  auto& from = static_cast<const WhisperMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.WhisperMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender_id().empty()) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (!from._internal_sender_name().empty()) {
    _this->_internal_set_sender_name(from._internal_sender_name());
  }
  if (!from._internal_recipient_id().empty()) {
    _this->_internal_set_recipient_id(from._internal_recipient_id());
  }
  if (!from._internal_recipient_name().empty()) {
    _this->_internal_set_recipient_name(from._internal_recipient_name());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_timestamp()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void WhisperMessage::CopyFrom(const WhisperMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.WhisperMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool WhisperMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* WhisperMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void WhisperMessage::InternalSwap(WhisperMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_id_, &other->_impl_.sender_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sender_name_, &other->_impl_.sender_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recipient_id_, &other->_impl_.recipient_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.recipient_name_, &other->_impl_.recipient_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::google::protobuf::Metadata WhisperMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[1]);
}
// ===================================================================

class ChannelJoinRequest::_Internal {
 public:
};

ChannelJoinRequest::ChannelJoinRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChannelJoinRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChannelJoinRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : player_id_(arena, from.player_id_),
        channel_id_(arena, from.channel_id_),
        password_(arena, from.password_),
        _cached_size_{0} {}

ChannelJoinRequest::ChannelJoinRequest(
    ::google::protobuf::Arena* arena,
    const ChannelJoinRequest& from)
    : ::google::protobuf::Message(arena) {
  ChannelJoinRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.channel_ = from._impl_.channel_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChannelJoinRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChannelJoinRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : player_id_(arena),
        channel_id_(arena),
        password_(arena),
        _cached_size_{0} {}

inline void ChannelJoinRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.channel_ = {};
}
ChannelJoinRequest::~ChannelJoinRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.ChannelJoinRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChannelJoinRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.password_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChannelJoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChannelJoinRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.channel_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChannelJoinRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 61, 2> ChannelJoinRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChannelJoinRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string password = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelJoinRequest, _impl_.password_)}},
    // string player_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelJoinRequest, _impl_.player_id_)}},
    // .mmorpg.ChatChannel channel = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChannelJoinRequest, _impl_.channel_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelJoinRequest, _impl_.channel_)}},
    // string channel_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelJoinRequest, _impl_.channel_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string player_id = 1;
    {PROTOBUF_FIELD_OFFSET(ChannelJoinRequest, _impl_.player_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ChatChannel channel = 2;
    {PROTOBUF_FIELD_OFFSET(ChannelJoinRequest, _impl_.channel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string channel_id = 3;
    {PROTOBUF_FIELD_OFFSET(ChannelJoinRequest, _impl_.channel_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string password = 4;
    {PROTOBUF_FIELD_OFFSET(ChannelJoinRequest, _impl_.password_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\11\0\12\10\0\0\0"
    "mmorpg.ChannelJoinRequest"
    "player_id"
    "channel_id"
    "password"
  }},
};

::uint8_t* ChannelJoinRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChannelJoinRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelJoinRequest.player_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .mmorpg.ChatChannel channel = 2;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_channel(), target);
  }

  // string channel_id = 3;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelJoinRequest.channel_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelJoinRequest.password");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChannelJoinRequest)
  return target;
}

::size_t ChannelJoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChannelJoinRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  // string channel_id = 3;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  // .mmorpg.ChatChannel channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChannelJoinRequest::_class_data_ = {
    ChannelJoinRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChannelJoinRequest::GetClassData() const {
  return &_class_data_;
}

void ChannelJoinRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChannelJoinRequest*>(&to_msg);
  auto& from = static_cast<const ChannelJoinRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChannelJoinRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelJoinRequest::CopyFrom(const ChannelJoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChannelJoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChannelJoinRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChannelJoinRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChannelJoinRequest::InternalSwap(ChannelJoinRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, &other->_impl_.channel_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, &other->_impl_.password_, arena);
  swap(_impl_.channel_, other->_impl_.channel_);
}

::google::protobuf::Metadata ChannelJoinRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[2]);
}
// ===================================================================

class ChannelJoinResponse::_Internal {
 public:
};

ChannelJoinResponse::ChannelJoinResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChannelJoinResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChannelJoinResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : members_{visibility, arena, from.members_},
        channel_id_(arena, from.channel_id_),
        channel_name_(arena, from.channel_name_),
        error_message_(arena, from.error_message_),
        _cached_size_{0} {}

ChannelJoinResponse::ChannelJoinResponse(
    ::google::protobuf::Arena* arena,
    const ChannelJoinResponse& from)
    : ::google::protobuf::Message(arena) {
  ChannelJoinResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChannelJoinResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChannelJoinResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : members_{visibility, arena},
        channel_id_(arena),
        channel_name_(arena),
        error_message_(arena),
        _cached_size_{0} {}

inline void ChannelJoinResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));
}
ChannelJoinResponse::~ChannelJoinResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.ChannelJoinResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChannelJoinResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.channel_id_.Destroy();
  _impl_.channel_name_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChannelJoinResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChannelJoinResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.members_.Clear();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.channel_name_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChannelJoinResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 1, 70, 2> ChannelJoinResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ChannelJoinResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChannelJoinResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.success_)}},
    // .mmorpg.ChatChannel channel = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChannelJoinResponse, _impl_.channel_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.channel_)}},
    // string channel_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.channel_id_)}},
    // string channel_name = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.channel_name_)}},
    // repeated .mmorpg.ChannelMember members = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.members_)}},
    // string error_message = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.error_message_)}},
    // .mmorpg.ErrorCode error_code = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChannelJoinResponse, _impl_.error_code_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.error_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .mmorpg.ChatChannel channel = 2;
    {PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.channel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string channel_id = 3;
    {PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.channel_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string channel_name = 4;
    {PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.channel_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .mmorpg.ChannelMember members = 5;
    {PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.members_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string error_message = 6;
    {PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.error_message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 7;
    {PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.error_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::ChannelMember>()},
  }}, {{
    "\32\0\0\12\14\0\15\0"
    "mmorpg.ChannelJoinResponse"
    "channel_id"
    "channel_name"
    "error_message"
  }},
};

::uint8_t* ChannelJoinResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChannelJoinResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // .mmorpg.ChatChannel channel = 2;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_channel(), target);
  }

  // string channel_id = 3;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelJoinResponse.channel_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string channel_name = 4;
  if (!this->_internal_channel_name().empty()) {
    const std::string& _s = this->_internal_channel_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelJoinResponse.channel_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated .mmorpg.ChannelMember members = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelJoinResponse.error_message");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 7;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChannelJoinResponse)
  return target;
}

::size_t ChannelJoinResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChannelJoinResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mmorpg.ChannelMember members = 5;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->_internal_members()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string channel_id = 3;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string channel_name = 4;
  if (!this->_internal_channel_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_name());
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // .mmorpg.ChatChannel channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_channel());
  }

  // .mmorpg.ErrorCode error_code = 7;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChannelJoinResponse::_class_data_ = {
    ChannelJoinResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChannelJoinResponse::GetClassData() const {
  return &_class_data_;
}

void ChannelJoinResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChannelJoinResponse*>(&to_msg);
  auto& from = static_cast<const ChannelJoinResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChannelJoinResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_members()->MergeFrom(
      from._internal_members());
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_channel_name().empty()) {
    _this->_internal_set_channel_name(from._internal_channel_name());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelJoinResponse::CopyFrom(const ChannelJoinResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChannelJoinResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChannelJoinResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChannelJoinResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChannelJoinResponse::InternalSwap(ChannelJoinResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.members_.InternalSwap(&other->_impl_.members_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, &other->_impl_.channel_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_name_, &other->_impl_.channel_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.error_code_)
      + sizeof(ChannelJoinResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(ChannelJoinResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::google::protobuf::Metadata ChannelJoinResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[3]);
}
// ===================================================================

class ChannelLeaveRequest::_Internal {
 public:
};

ChannelLeaveRequest::ChannelLeaveRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChannelLeaveRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChannelLeaveRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : player_id_(arena, from.player_id_),
        channel_id_(arena, from.channel_id_),
        _cached_size_{0} {}

ChannelLeaveRequest::ChannelLeaveRequest(
    ::google::protobuf::Arena* arena,
    const ChannelLeaveRequest& from)
    : ::google::protobuf::Message(arena) {
  ChannelLeaveRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.channel_ = from._impl_.channel_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChannelLeaveRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChannelLeaveRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : player_id_(arena),
        channel_id_(arena),
        _cached_size_{0} {}

inline void ChannelLeaveRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.channel_ = {};
}
ChannelLeaveRequest::~ChannelLeaveRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.ChannelLeaveRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChannelLeaveRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChannelLeaveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChannelLeaveRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.channel_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChannelLeaveRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 54, 2> ChannelLeaveRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChannelLeaveRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string player_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelLeaveRequest, _impl_.player_id_)}},
    // .mmorpg.ChatChannel channel = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChannelLeaveRequest, _impl_.channel_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelLeaveRequest, _impl_.channel_)}},
    // string channel_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelLeaveRequest, _impl_.channel_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string player_id = 1;
    {PROTOBUF_FIELD_OFFSET(ChannelLeaveRequest, _impl_.player_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ChatChannel channel = 2;
    {PROTOBUF_FIELD_OFFSET(ChannelLeaveRequest, _impl_.channel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string channel_id = 3;
    {PROTOBUF_FIELD_OFFSET(ChannelLeaveRequest, _impl_.channel_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\11\0\12\0\0\0\0"
    "mmorpg.ChannelLeaveRequest"
    "player_id"
    "channel_id"
  }},
};

::uint8_t* ChannelLeaveRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChannelLeaveRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelLeaveRequest.player_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .mmorpg.ChatChannel channel = 2;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_channel(), target);
  }

  // string channel_id = 3;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelLeaveRequest.channel_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChannelLeaveRequest)
  return target;
}

::size_t ChannelLeaveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChannelLeaveRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  // string channel_id = 3;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // .mmorpg.ChatChannel channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_channel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChannelLeaveRequest::_class_data_ = {
    ChannelLeaveRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChannelLeaveRequest::GetClassData() const {
  return &_class_data_;
}

void ChannelLeaveRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChannelLeaveRequest*>(&to_msg);
  auto& from = static_cast<const ChannelLeaveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChannelLeaveRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelLeaveRequest::CopyFrom(const ChannelLeaveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChannelLeaveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChannelLeaveRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChannelLeaveRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChannelLeaveRequest::InternalSwap(ChannelLeaveRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, &other->_impl_.channel_id_, arena);
  swap(_impl_.channel_, other->_impl_.channel_);
}

::google::protobuf::Metadata ChannelLeaveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[4]);
}
// ===================================================================

class ChannelLeaveResponse::_Internal {
 public:
};

ChannelLeaveResponse::ChannelLeaveResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChannelLeaveResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChannelLeaveResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_(arena, from.message_),
        _cached_size_{0} {}

ChannelLeaveResponse::ChannelLeaveResponse(
    ::google::protobuf::Arena* arena,
    const ChannelLeaveResponse& from)
    : ::google::protobuf::Message(arena) {
  ChannelLeaveResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChannelLeaveResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChannelLeaveResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void ChannelLeaveResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
ChannelLeaveResponse::~ChannelLeaveResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.ChannelLeaveResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChannelLeaveResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChannelLeaveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChannelLeaveResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChannelLeaveResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 43, 2> ChannelLeaveResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChannelLeaveResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelLeaveResponse, _impl_.message_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChannelLeaveResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelLeaveResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(ChannelLeaveResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(ChannelLeaveResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\0\7\0\0\0\0\0"
    "mmorpg.ChannelLeaveResponse"
    "message"
  }},
};

::uint8_t* ChannelLeaveResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChannelLeaveResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelLeaveResponse.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChannelLeaveResponse)
  return target;
}

::size_t ChannelLeaveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChannelLeaveResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChannelLeaveResponse::_class_data_ = {
    ChannelLeaveResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChannelLeaveResponse::GetClassData() const {
  return &_class_data_;
}

void ChannelLeaveResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChannelLeaveResponse*>(&to_msg);
  auto& from = static_cast<const ChannelLeaveResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChannelLeaveResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelLeaveResponse::CopyFrom(const ChannelLeaveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChannelLeaveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChannelLeaveResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChannelLeaveResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChannelLeaveResponse::InternalSwap(ChannelLeaveResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata ChannelLeaveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[5]);
}
// ===================================================================

class ChannelListRequest::_Internal {
 public:
};

ChannelListRequest::ChannelListRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChannelListRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChannelListRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : player_id_(arena, from.player_id_),
        _cached_size_{0} {}

ChannelListRequest::ChannelListRequest(
    ::google::protobuf::Arena* arena,
    const ChannelListRequest& from)
    : ::google::protobuf::Message(arena) {
  ChannelListRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.list_type_ = from._impl_.list_type_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChannelListRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChannelListRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : player_id_(arena),
        _cached_size_{0} {}

inline void ChannelListRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.list_type_ = {};
}
ChannelListRequest::~ChannelListRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.ChannelListRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChannelListRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChannelListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChannelListRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.list_type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChannelListRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 43, 2> ChannelListRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChannelListRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .mmorpg.ChannelListType list_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChannelListRequest, _impl_.list_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelListRequest, _impl_.list_type_)}},
    // string player_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelListRequest, _impl_.player_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string player_id = 1;
    {PROTOBUF_FIELD_OFFSET(ChannelListRequest, _impl_.player_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ChannelListType list_type = 2;
    {PROTOBUF_FIELD_OFFSET(ChannelListRequest, _impl_.list_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\31\11\0\0\0\0\0\0"
    "mmorpg.ChannelListRequest"
    "player_id"
  }},
};

::uint8_t* ChannelListRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChannelListRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelListRequest.player_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .mmorpg.ChannelListType list_type = 2;
  if (this->_internal_list_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_list_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChannelListRequest)
  return target;
}

::size_t ChannelListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChannelListRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  // .mmorpg.ChannelListType list_type = 2;
  if (this->_internal_list_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_list_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChannelListRequest::_class_data_ = {
    ChannelListRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChannelListRequest::GetClassData() const {
  return &_class_data_;
}

void ChannelListRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChannelListRequest*>(&to_msg);
  auto& from = static_cast<const ChannelListRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChannelListRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_list_type() != 0) {
    _this->_internal_set_list_type(from._internal_list_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelListRequest::CopyFrom(const ChannelListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChannelListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChannelListRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChannelListRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChannelListRequest::InternalSwap(ChannelListRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
  swap(_impl_.list_type_, other->_impl_.list_type_);
}

::google::protobuf::Metadata ChannelListRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[6]);
}
// ===================================================================

class ChannelListResponse::_Internal {
 public:
};

ChannelListResponse::ChannelListResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChannelListResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChannelListResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : channels_{visibility, arena, from.channels_},
        _cached_size_{0} {}

ChannelListResponse::ChannelListResponse(
    ::google::protobuf::Arena* arena,
    const ChannelListResponse& from)
    : ::google::protobuf::Message(arena) {
  ChannelListResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChannelListResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChannelListResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : channels_{visibility, arena},
        _cached_size_{0} {}

inline void ChannelListResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ChannelListResponse::~ChannelListResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.ChannelListResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChannelListResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChannelListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChannelListResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channels_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChannelListResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ChannelListResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ChannelListResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .mmorpg.ChannelInfo channels = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelListResponse, _impl_.channels_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .mmorpg.ChannelInfo channels = 1;
    {PROTOBUF_FIELD_OFFSET(ChannelListResponse, _impl_.channels_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::ChannelInfo>()},
  }}, {{
  }},
};

::uint8_t* ChannelListResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChannelListResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .mmorpg.ChannelInfo channels = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_channels_size()); i < n; i++) {
    const auto& repfield = this->_internal_channels().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChannelListResponse)
  return target;
}

::size_t ChannelListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChannelListResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mmorpg.ChannelInfo channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->_internal_channels()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChannelListResponse::_class_data_ = {
    ChannelListResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChannelListResponse::GetClassData() const {
  return &_class_data_;
}

void ChannelListResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChannelListResponse*>(&to_msg);
  auto& from = static_cast<const ChannelListResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChannelListResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_channels()->MergeFrom(
      from._internal_channels());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelListResponse::CopyFrom(const ChannelListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChannelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChannelListResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChannelListResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChannelListResponse::InternalSwap(ChannelListResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.channels_.InternalSwap(&other->_impl_.channels_);
}

::google::protobuf::Metadata ChannelListResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[7]);
}
// ===================================================================

class ChannelInfo::_Internal {
 public:
};

ChannelInfo::ChannelInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChannelInfo)
}
inline PROTOBUF_NDEBUG_INLINE ChannelInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : channel_id_(arena, from.channel_id_),
        channel_name_(arena, from.channel_name_),
        owner_id_(arena, from.owner_id_),
        description_(arena, from.description_),
        _cached_size_{0} {}

ChannelInfo::ChannelInfo(
    ::google::protobuf::Arena* arena,
    const ChannelInfo& from)
    : ::google::protobuf::Message(arena) {
  ChannelInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, channel_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, channel_type_),
           offsetof(Impl_, is_moderated_) -
               offsetof(Impl_, channel_type_) +
               sizeof(Impl_::is_moderated_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChannelInfo)
}
inline PROTOBUF_NDEBUG_INLINE ChannelInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : channel_id_(arena),
        channel_name_(arena),
        owner_id_(arena),
        description_(arena),
        _cached_size_{0} {}

inline void ChannelInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, channel_type_),
           0,
           offsetof(Impl_, is_moderated_) -
               offsetof(Impl_, channel_type_) +
               sizeof(Impl_::is_moderated_));
}
ChannelInfo::~ChannelInfo() {
  // @@protoc_insertion_point(destructor:mmorpg.ChannelInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChannelInfo::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.channel_id_.Destroy();
  _impl_.channel_name_.Destroy();
  _impl_.owner_id_.Destroy();
  _impl_.description_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChannelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChannelInfo)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.channel_id_.ClearToEmpty();
  _impl_.channel_name_.ClearToEmpty();
  _impl_.owner_id_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  ::memset(&_impl_.channel_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_moderated_) -
      reinterpret_cast<char*>(&_impl_.channel_type_)) + sizeof(_impl_.is_moderated_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChannelInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 0, 76, 2> ChannelInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChannelInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .mmorpg.ChatChannel channel_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChannelInfo, _impl_.channel_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.channel_type_)}},
    // string channel_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.channel_id_)}},
    // string channel_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.channel_name_)}},
    // int32 member_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChannelInfo, _impl_.member_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.member_count_)}},
    // bool is_joined = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChannelInfo, _impl_.is_joined_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.is_joined_)}},
    // bool is_password_protected = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChannelInfo, _impl_.is_password_protected_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.is_password_protected_)}},
    // bool is_moderated = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChannelInfo, _impl_.is_moderated_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.is_moderated_)}},
    // string owner_id = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.owner_id_)}},
    // string description = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.description_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .mmorpg.ChatChannel channel_type = 1;
    {PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.channel_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string channel_id = 2;
    {PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.channel_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string channel_name = 3;
    {PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.channel_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 member_count = 4;
    {PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.member_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool is_joined = 5;
    {PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.is_joined_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_password_protected = 6;
    {PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.is_password_protected_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool is_moderated = 7;
    {PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.is_moderated_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string owner_id = 8;
    {PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.owner_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 9;
    {PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\0\12\14\0\0\0\0\10\13\0\0\0\0\0\0"
    "mmorpg.ChannelInfo"
    "channel_id"
    "channel_name"
    "owner_id"
    "description"
  }},
};

::uint8_t* ChannelInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChannelInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .mmorpg.ChatChannel channel_type = 1;
  if (this->_internal_channel_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_channel_type(), target);
  }

  // string channel_id = 2;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelInfo.channel_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string channel_name = 3;
  if (!this->_internal_channel_name().empty()) {
    const std::string& _s = this->_internal_channel_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelInfo.channel_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 member_count = 4;
  if (this->_internal_member_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_member_count(), target);
  }

  // bool is_joined = 5;
  if (this->_internal_is_joined() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_is_joined(), target);
  }

  // bool is_password_protected = 6;
  if (this->_internal_is_password_protected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_is_password_protected(), target);
  }

  // bool is_moderated = 7;
  if (this->_internal_is_moderated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_is_moderated(), target);
  }

  // string owner_id = 8;
  if (!this->_internal_owner_id().empty()) {
    const std::string& _s = this->_internal_owner_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelInfo.owner_id");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string description = 9;
  if (!this->_internal_description().empty()) {
    const std::string& _s = this->_internal_description();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelInfo.description");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChannelInfo)
  return target;
}

::size_t ChannelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChannelInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 2;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string channel_name = 3;
  if (!this->_internal_channel_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_name());
  }

  // string owner_id = 8;
  if (!this->_internal_owner_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_owner_id());
  }

  // string description = 9;
  if (!this->_internal_description().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_description());
  }

  // .mmorpg.ChatChannel channel_type = 1;
  if (this->_internal_channel_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_channel_type());
  }

  // int32 member_count = 4;
  if (this->_internal_member_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_member_count());
  }

  // bool is_joined = 5;
  if (this->_internal_is_joined() != 0) {
    total_size += 2;
  }

  // bool is_password_protected = 6;
  if (this->_internal_is_password_protected() != 0) {
    total_size += 2;
  }

  // bool is_moderated = 7;
  if (this->_internal_is_moderated() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChannelInfo::_class_data_ = {
    ChannelInfo::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChannelInfo::GetClassData() const {
  return &_class_data_;
}

void ChannelInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChannelInfo*>(&to_msg);
  auto& from = static_cast<const ChannelInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChannelInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_channel_name().empty()) {
    _this->_internal_set_channel_name(from._internal_channel_name());
  }
  if (!from._internal_owner_id().empty()) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_channel_type() != 0) {
    _this->_internal_set_channel_type(from._internal_channel_type());
  }
  if (from._internal_member_count() != 0) {
    _this->_internal_set_member_count(from._internal_member_count());
  }
  if (from._internal_is_joined() != 0) {
    _this->_internal_set_is_joined(from._internal_is_joined());
  }
  if (from._internal_is_password_protected() != 0) {
    _this->_internal_set_is_password_protected(from._internal_is_password_protected());
  }
  if (from._internal_is_moderated() != 0) {
    _this->_internal_set_is_moderated(from._internal_is_moderated());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelInfo::CopyFrom(const ChannelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChannelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChannelInfo::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChannelInfo::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChannelInfo::InternalSwap(ChannelInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, &other->_impl_.channel_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_name_, &other->_impl_.channel_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.owner_id_, &other->_impl_.owner_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.is_moderated_)
      + sizeof(ChannelInfo::_impl_.is_moderated_)
      - PROTOBUF_FIELD_OFFSET(ChannelInfo, _impl_.channel_type_)>(
          reinterpret_cast<char*>(&_impl_.channel_type_),
          reinterpret_cast<char*>(&other->_impl_.channel_type_));
}

::google::protobuf::Metadata ChannelInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[8]);
}
// ===================================================================

class ChannelMember::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelMember>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_._has_bits_);
  static const ::google::protobuf::Timestamp& joined_at(const ChannelMember* msg);
  static void set_has_joined_at(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::google::protobuf::Timestamp& ChannelMember::_Internal::joined_at(const ChannelMember* msg) {
  return *msg->_impl_.joined_at_;
}
void ChannelMember::clear_joined_at() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.joined_at_ != nullptr) _impl_.joined_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ChannelMember::ChannelMember(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChannelMember)
}
inline PROTOBUF_NDEBUG_INLINE ChannelMember::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        player_id_(arena, from.player_id_),
        player_name_(arena, from.player_name_) {}

ChannelMember::ChannelMember(
    ::google::protobuf::Arena* arena,
    const ChannelMember& from)
    : ::google::protobuf::Message(arena) {
  ChannelMember* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.joined_at_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::google::protobuf::Timestamp>(arena, *from._impl_.joined_at_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, role_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, role_),
           offsetof(Impl_, is_muted_) -
               offsetof(Impl_, role_) +
               sizeof(Impl_::is_muted_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChannelMember)
}
inline PROTOBUF_NDEBUG_INLINE ChannelMember::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        player_id_(arena),
        player_name_(arena) {}

inline void ChannelMember::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, joined_at_),
           0,
           offsetof(Impl_, is_muted_) -
               offsetof(Impl_, joined_at_) +
               sizeof(Impl_::is_muted_));
}
ChannelMember::~ChannelMember() {
  // @@protoc_insertion_point(destructor:mmorpg.ChannelMember)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChannelMember::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.player_name_.Destroy();
  delete _impl_.joined_at_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChannelMember::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChannelMember)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.player_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.joined_at_ != nullptr);
    _impl_.joined_at_->Clear();
  }
  ::memset(&_impl_.role_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_muted_) -
      reinterpret_cast<char*>(&_impl_.role_)) + sizeof(_impl_.is_muted_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChannelMember::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 49, 2> ChannelMember::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ChannelMember_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string player_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.player_id_)}},
    // string player_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.player_name_)}},
    // .mmorpg.ChannelRole role = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChannelMember, _impl_.role_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.role_)}},
    // bool is_muted = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChannelMember, _impl_.is_muted_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.is_muted_)}},
    // .google.protobuf.Timestamp joined_at = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.joined_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string player_id = 1;
    {PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.player_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string player_name = 2;
    {PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.player_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ChannelRole role = 3;
    {PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.role_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool is_muted = 4;
    {PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.is_muted_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp joined_at = 5;
    {PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.joined_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\24\11\13\0\0\0\0\0"
    "mmorpg.ChannelMember"
    "player_id"
    "player_name"
  }},
};

::uint8_t* ChannelMember::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChannelMember)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelMember.player_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string player_name = 2;
  if (!this->_internal_player_name().empty()) {
    const std::string& _s = this->_internal_player_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChannelMember.player_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .mmorpg.ChannelRole role = 3;
  if (this->_internal_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_role(), target);
  }

  // bool is_muted = 4;
  if (this->_internal_is_muted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_is_muted(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .google.protobuf.Timestamp joined_at = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::joined_at(this),
        _Internal::joined_at(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChannelMember)
  return target;
}

::size_t ChannelMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChannelMember)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  // string player_name = 2;
  if (!this->_internal_player_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_name());
  }

  // .google.protobuf.Timestamp joined_at = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.joined_at_);
  }

  // .mmorpg.ChannelRole role = 3;
  if (this->_internal_role() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_role());
  }

  // bool is_muted = 4;
  if (this->_internal_is_muted() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChannelMember::_class_data_ = {
    ChannelMember::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChannelMember::GetClassData() const {
  return &_class_data_;
}

void ChannelMember::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChannelMember*>(&to_msg);
  auto& from = static_cast<const ChannelMember&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChannelMember)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_player_name().empty()) {
    _this->_internal_set_player_name(from._internal_player_name());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_joined_at()->::google::protobuf::Timestamp::MergeFrom(
        from._internal_joined_at());
  }
  if (from._internal_role() != 0) {
    _this->_internal_set_role(from._internal_role());
  }
  if (from._internal_is_muted() != 0) {
    _this->_internal_set_is_muted(from._internal_is_muted());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelMember::CopyFrom(const ChannelMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChannelMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChannelMember::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChannelMember::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChannelMember::InternalSwap(ChannelMember* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_name_, &other->_impl_.player_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.is_muted_)
      + sizeof(ChannelMember::_impl_.is_muted_)
      - PROTOBUF_FIELD_OFFSET(ChannelMember, _impl_.joined_at_)>(
          reinterpret_cast<char*>(&_impl_.joined_at_),
          reinterpret_cast<char*>(&other->_impl_.joined_at_));
}

::google::protobuf::Metadata ChannelMember::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[9]);
}
// ===================================================================

class ChatCommand::_Internal {
 public:
};

ChatCommand::ChatCommand(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChatCommand)
}
inline PROTOBUF_NDEBUG_INLINE ChatCommand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : issuer_id_(arena, from.issuer_id_),
        target_player_id_(arena, from.target_player_id_),
        channel_id_(arena, from.channel_id_),
        reason_(arena, from.reason_),
        _cached_size_{0} {}

ChatCommand::ChatCommand(
    ::google::protobuf::Arena* arena,
    const ChatCommand& from)
    : ::google::protobuf::Message(arena) {
  ChatCommand* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, command_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, command_type_),
           offsetof(Impl_, duration_minutes_) -
               offsetof(Impl_, command_type_) +
               sizeof(Impl_::duration_minutes_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChatCommand)
}
inline PROTOBUF_NDEBUG_INLINE ChatCommand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : issuer_id_(arena),
        target_player_id_(arena),
        channel_id_(arena),
        reason_(arena),
        _cached_size_{0} {}

inline void ChatCommand::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, command_type_),
           0,
           offsetof(Impl_, duration_minutes_) -
               offsetof(Impl_, command_type_) +
               sizeof(Impl_::duration_minutes_));
}
ChatCommand::~ChatCommand() {
  // @@protoc_insertion_point(destructor:mmorpg.ChatCommand)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChatCommand::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.issuer_id_.Destroy();
  _impl_.target_player_id_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.reason_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChatCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChatCommand)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.issuer_id_.ClearToEmpty();
  _impl_.target_player_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.reason_.ClearToEmpty();
  ::memset(&_impl_.command_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.duration_minutes_) -
      reinterpret_cast<char*>(&_impl_.command_type_)) + sizeof(_impl_.duration_minutes_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChatCommand::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 68, 2> ChatCommand::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChatCommand_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string issuer_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.issuer_id_)}},
    // .mmorpg.ChatCommandType command_type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatCommand, _impl_.command_type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.command_type_)}},
    // string target_player_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.target_player_id_)}},
    // .mmorpg.ChatChannel channel = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatCommand, _impl_.channel_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.channel_)}},
    // string channel_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.channel_id_)}},
    // int32 duration_minutes = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatCommand, _impl_.duration_minutes_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.duration_minutes_)}},
    // string reason = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.reason_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string issuer_id = 1;
    {PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.issuer_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ChatCommandType command_type = 2;
    {PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.command_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string target_player_id = 3;
    {PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.target_player_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ChatChannel channel = 4;
    {PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.channel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string channel_id = 5;
    {PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.channel_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 duration_minutes = 6;
    {PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.duration_minutes_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string reason = 7;
    {PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\11\0\20\0\12\0\6"
    "mmorpg.ChatCommand"
    "issuer_id"
    "target_player_id"
    "channel_id"
    "reason"
  }},
};

::uint8_t* ChatCommand::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChatCommand)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string issuer_id = 1;
  if (!this->_internal_issuer_id().empty()) {
    const std::string& _s = this->_internal_issuer_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatCommand.issuer_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .mmorpg.ChatCommandType command_type = 2;
  if (this->_internal_command_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_command_type(), target);
  }

  // string target_player_id = 3;
  if (!this->_internal_target_player_id().empty()) {
    const std::string& _s = this->_internal_target_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatCommand.target_player_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .mmorpg.ChatChannel channel = 4;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_channel(), target);
  }

  // string channel_id = 5;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatCommand.channel_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int32 duration_minutes = 6;
  if (this->_internal_duration_minutes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_duration_minutes(), target);
  }

  // string reason = 7;
  if (!this->_internal_reason().empty()) {
    const std::string& _s = this->_internal_reason();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatCommand.reason");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChatCommand)
  return target;
}

::size_t ChatCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChatCommand)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string issuer_id = 1;
  if (!this->_internal_issuer_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_issuer_id());
  }

  // string target_player_id = 3;
  if (!this->_internal_target_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_target_player_id());
  }

  // string channel_id = 5;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string reason = 7;
  if (!this->_internal_reason().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_reason());
  }

  // .mmorpg.ChatCommandType command_type = 2;
  if (this->_internal_command_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_command_type());
  }

  // .mmorpg.ChatChannel channel = 4;
  if (this->_internal_channel() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_channel());
  }

  // int32 duration_minutes = 6;
  if (this->_internal_duration_minutes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_duration_minutes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChatCommand::_class_data_ = {
    ChatCommand::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChatCommand::GetClassData() const {
  return &_class_data_;
}

void ChatCommand::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChatCommand*>(&to_msg);
  auto& from = static_cast<const ChatCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChatCommand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_issuer_id().empty()) {
    _this->_internal_set_issuer_id(from._internal_issuer_id());
  }
  if (!from._internal_target_player_id().empty()) {
    _this->_internal_set_target_player_id(from._internal_target_player_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (from._internal_command_type() != 0) {
    _this->_internal_set_command_type(from._internal_command_type());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_duration_minutes() != 0) {
    _this->_internal_set_duration_minutes(from._internal_duration_minutes());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatCommand::CopyFrom(const ChatCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChatCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChatCommand::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChatCommand::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChatCommand::InternalSwap(ChatCommand* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issuer_id_, &other->_impl_.issuer_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_player_id_, &other->_impl_.target_player_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, &other->_impl_.channel_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reason_, &other->_impl_.reason_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.duration_minutes_)
      + sizeof(ChatCommand::_impl_.duration_minutes_)
      - PROTOBUF_FIELD_OFFSET(ChatCommand, _impl_.command_type_)>(
          reinterpret_cast<char*>(&_impl_.command_type_),
          reinterpret_cast<char*>(&other->_impl_.command_type_));
}

::google::protobuf::Metadata ChatCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[10]);
}
// ===================================================================

class ChatCommandResponse::_Internal {
 public:
};

ChatCommandResponse::ChatCommandResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChatCommandResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChatCommandResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : message_(arena, from.message_),
        _cached_size_{0} {}

ChatCommandResponse::ChatCommandResponse(
    ::google::protobuf::Arena* arena,
    const ChatCommandResponse& from)
    : ::google::protobuf::Message(arena) {
  ChatCommandResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, success_),
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChatCommandResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChatCommandResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void ChatCommandResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, success_),
           0,
           offsetof(Impl_, error_code_) -
               offsetof(Impl_, success_) +
               sizeof(Impl_::error_code_));
}
ChatCommandResponse::~ChatCommandResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.ChatCommandResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChatCommandResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChatCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChatCommandResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.error_code_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChatCommandResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 42, 2> ChatCommandResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChatCommandResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatCommandResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ChatCommandResponse, _impl_.success_)}},
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ChatCommandResponse, _impl_.message_)}},
    // .mmorpg.ErrorCode error_code = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatCommandResponse, _impl_.error_code_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ChatCommandResponse, _impl_.error_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(ChatCommandResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(ChatCommandResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ErrorCode error_code = 3;
    {PROTOBUF_FIELD_OFFSET(ChatCommandResponse, _impl_.error_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\32\0\7\0\0\0\0\0"
    "mmorpg.ChatCommandResponse"
    "message"
  }},
};

::uint8_t* ChatCommandResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChatCommandResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatCommandResponse.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .mmorpg.ErrorCode error_code = 3;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_error_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChatCommandResponse)
  return target;
}

::size_t ChatCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChatCommandResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  // .mmorpg.ErrorCode error_code = 3;
  if (this->_internal_error_code() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChatCommandResponse::_class_data_ = {
    ChatCommandResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChatCommandResponse::GetClassData() const {
  return &_class_data_;
}

void ChatCommandResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChatCommandResponse*>(&to_msg);
  auto& from = static_cast<const ChatCommandResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChatCommandResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatCommandResponse::CopyFrom(const ChatCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChatCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChatCommandResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChatCommandResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChatCommandResponse::InternalSwap(ChatCommandResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatCommandResponse, _impl_.error_code_)
      + sizeof(ChatCommandResponse::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(ChatCommandResponse, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::google::protobuf::Metadata ChatCommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[11]);
}
// ===================================================================

class ChatHistoryRequest::_Internal {
 public:
};

ChatHistoryRequest::ChatHistoryRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChatHistoryRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChatHistoryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : player_id_(arena, from.player_id_),
        channel_id_(arena, from.channel_id_),
        before_message_id_(arena, from.before_message_id_),
        _cached_size_{0} {}

ChatHistoryRequest::ChatHistoryRequest(
    ::google::protobuf::Arena* arena,
    const ChatHistoryRequest& from)
    : ::google::protobuf::Message(arena) {
  ChatHistoryRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, channel_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, channel_),
           offsetof(Impl_, message_count_) -
               offsetof(Impl_, channel_) +
               sizeof(Impl_::message_count_));

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChatHistoryRequest)
}
inline PROTOBUF_NDEBUG_INLINE ChatHistoryRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : player_id_(arena),
        channel_id_(arena),
        before_message_id_(arena),
        _cached_size_{0} {}

inline void ChatHistoryRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, channel_),
           0,
           offsetof(Impl_, message_count_) -
               offsetof(Impl_, channel_) +
               sizeof(Impl_::message_count_));
}
ChatHistoryRequest::~ChatHistoryRequest() {
  // @@protoc_insertion_point(destructor:mmorpg.ChatHistoryRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChatHistoryRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.player_id_.Destroy();
  _impl_.channel_id_.Destroy();
  _impl_.before_message_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChatHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChatHistoryRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.player_id_.ClearToEmpty();
  _impl_.channel_id_.ClearToEmpty();
  _impl_.before_message_id_.ClearToEmpty();
  ::memset(&_impl_.channel_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.message_count_) -
      reinterpret_cast<char*>(&_impl_.channel_)) + sizeof(_impl_.message_count_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChatHistoryRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 70, 2> ChatHistoryRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ChatHistoryRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string player_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.player_id_)}},
    // .mmorpg.ChatChannel channel = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatHistoryRequest, _impl_.channel_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.channel_)}},
    // string channel_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.channel_id_)}},
    // int32 message_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ChatHistoryRequest, _impl_.message_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.message_count_)}},
    // string before_message_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.before_message_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string player_id = 1;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.player_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ChatChannel channel = 2;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.channel_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string channel_id = 3;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.channel_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 message_count = 4;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.message_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string before_message_id = 5;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.before_message_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\11\0\12\0\21\0\0"
    "mmorpg.ChatHistoryRequest"
    "player_id"
    "channel_id"
    "before_message_id"
  }},
};

::uint8_t* ChatHistoryRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChatHistoryRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    const std::string& _s = this->_internal_player_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatHistoryRequest.player_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .mmorpg.ChatChannel channel = 2;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_channel(), target);
  }

  // string channel_id = 3;
  if (!this->_internal_channel_id().empty()) {
    const std::string& _s = this->_internal_channel_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatHistoryRequest.channel_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 message_count = 4;
  if (this->_internal_message_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_message_count(), target);
  }

  // string before_message_id = 5;
  if (!this->_internal_before_message_id().empty()) {
    const std::string& _s = this->_internal_before_message_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ChatHistoryRequest.before_message_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChatHistoryRequest)
  return target;
}

::size_t ChatHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChatHistoryRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string player_id = 1;
  if (!this->_internal_player_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_player_id());
  }

  // string channel_id = 3;
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_channel_id());
  }

  // string before_message_id = 5;
  if (!this->_internal_before_message_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_before_message_id());
  }

  // .mmorpg.ChatChannel channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_channel());
  }

  // int32 message_count = 4;
  if (this->_internal_message_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_message_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChatHistoryRequest::_class_data_ = {
    ChatHistoryRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChatHistoryRequest::GetClassData() const {
  return &_class_data_;
}

void ChatHistoryRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChatHistoryRequest*>(&to_msg);
  auto& from = static_cast<const ChatHistoryRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChatHistoryRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_player_id().empty()) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (!from._internal_channel_id().empty()) {
    _this->_internal_set_channel_id(from._internal_channel_id());
  }
  if (!from._internal_before_message_id().empty()) {
    _this->_internal_set_before_message_id(from._internal_before_message_id());
  }
  if (from._internal_channel() != 0) {
    _this->_internal_set_channel(from._internal_channel());
  }
  if (from._internal_message_count() != 0) {
    _this->_internal_set_message_count(from._internal_message_count());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatHistoryRequest::CopyFrom(const ChatHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChatHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChatHistoryRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChatHistoryRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChatHistoryRequest::InternalSwap(ChatHistoryRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.player_id_, &other->_impl_.player_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.channel_id_, &other->_impl_.channel_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.before_message_id_, &other->_impl_.before_message_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.message_count_)
      + sizeof(ChatHistoryRequest::_impl_.message_count_)
      - PROTOBUF_FIELD_OFFSET(ChatHistoryRequest, _impl_.channel_)>(
          reinterpret_cast<char*>(&_impl_.channel_),
          reinterpret_cast<char*>(&other->_impl_.channel_));
}

::google::protobuf::Metadata ChatHistoryRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[12]);
}
// ===================================================================

class ChatHistoryResponse::_Internal {
 public:
};

ChatHistoryResponse::ChatHistoryResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ChatHistoryResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChatHistoryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : messages_{visibility, arena, from.messages_},
        _cached_size_{0} {}

ChatHistoryResponse::ChatHistoryResponse(
    ::google::protobuf::Arena* arena,
    const ChatHistoryResponse& from)
    : ::google::protobuf::Message(arena) {
  ChatHistoryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.has_more_ = from._impl_.has_more_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.ChatHistoryResponse)
}
inline PROTOBUF_NDEBUG_INLINE ChatHistoryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : messages_{visibility, arena},
        _cached_size_{0} {}

inline void ChatHistoryResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.has_more_ = {};
}
ChatHistoryResponse::~ChatHistoryResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.ChatHistoryResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ChatHistoryResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ChatHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ChatHistoryResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _impl_.has_more_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ChatHistoryResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ChatHistoryResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ChatHistoryResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bool has_more = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ChatHistoryResponse, _impl_.has_more_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.has_more_)}},
    // repeated .mmorpg.ChatMessage messages = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.messages_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .mmorpg.ChatMessage messages = 1;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.messages_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool has_more = 2;
    {PROTOBUF_FIELD_OFFSET(ChatHistoryResponse, _impl_.has_more_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::mmorpg::ChatMessage>()},
  }}, {{
  }},
};

::uint8_t* ChatHistoryResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ChatHistoryResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .mmorpg.ChatMessage messages = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool has_more = 2;
  if (this->_internal_has_more() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_has_more(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ChatHistoryResponse)
  return target;
}

::size_t ChatHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ChatHistoryResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mmorpg.ChatMessage messages = 1;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_internal_messages()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // bool has_more = 2;
  if (this->_internal_has_more() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ChatHistoryResponse::_class_data_ = {
    ChatHistoryResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ChatHistoryResponse::GetClassData() const {
  return &_class_data_;
}

void ChatHistoryResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ChatHistoryResponse*>(&to_msg);
  auto& from = static_cast<const ChatHistoryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ChatHistoryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(
      from._internal_messages());
  if (from._internal_has_more() != 0) {
    _this->_internal_set_has_more(from._internal_has_more());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ChatHistoryResponse::CopyFrom(const ChatHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ChatHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ChatHistoryResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ChatHistoryResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ChatHistoryResponse::InternalSwap(ChatHistoryResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
        swap(_impl_.has_more_, other->_impl_.has_more_);
}

::google::protobuf::Metadata ChatHistoryResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[13]);
}
// ===================================================================

class ReportChatMessage::_Internal {
 public:
};

ReportChatMessage::ReportChatMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ReportChatMessage)
}
inline PROTOBUF_NDEBUG_INLINE ReportChatMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : reporter_id_(arena, from.reporter_id_),
        message_id_(arena, from.message_id_),
        additional_info_(arena, from.additional_info_),
        _cached_size_{0} {}

ReportChatMessage::ReportChatMessage(
    ::google::protobuf::Arena* arena,
    const ReportChatMessage& from)
    : ::google::protobuf::Message(arena) {
  ReportChatMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.reason_ = from._impl_.reason_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.ReportChatMessage)
}
inline PROTOBUF_NDEBUG_INLINE ReportChatMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : reporter_id_(arena),
        message_id_(arena),
        additional_info_(arena),
        _cached_size_{0} {}

inline void ReportChatMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.reason_ = {};
}
ReportChatMessage::~ReportChatMessage() {
  // @@protoc_insertion_point(destructor:mmorpg.ReportChatMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ReportChatMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.reporter_id_.Destroy();
  _impl_.message_id_.Destroy();
  _impl_.additional_info_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ReportChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ReportChatMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reporter_id_.ClearToEmpty();
  _impl_.message_id_.ClearToEmpty();
  _impl_.additional_info_.ClearToEmpty();
  _impl_.reason_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ReportChatMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 69, 2> ReportChatMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ReportChatMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // string additional_info = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ReportChatMessage, _impl_.additional_info_)}},
    // string reporter_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ReportChatMessage, _impl_.reporter_id_)}},
    // string message_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ReportChatMessage, _impl_.message_id_)}},
    // .mmorpg.ReportReason reason = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ReportChatMessage, _impl_.reason_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ReportChatMessage, _impl_.reason_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string reporter_id = 1;
    {PROTOBUF_FIELD_OFFSET(ReportChatMessage, _impl_.reporter_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message_id = 2;
    {PROTOBUF_FIELD_OFFSET(ReportChatMessage, _impl_.message_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .mmorpg.ReportReason reason = 3;
    {PROTOBUF_FIELD_OFFSET(ReportChatMessage, _impl_.reason_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string additional_info = 4;
    {PROTOBUF_FIELD_OFFSET(ReportChatMessage, _impl_.additional_info_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\30\13\12\0\17\0\0\0"
    "mmorpg.ReportChatMessage"
    "reporter_id"
    "message_id"
    "additional_info"
  }},
};

::uint8_t* ReportChatMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ReportChatMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string reporter_id = 1;
  if (!this->_internal_reporter_id().empty()) {
    const std::string& _s = this->_internal_reporter_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ReportChatMessage.reporter_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string message_id = 2;
  if (!this->_internal_message_id().empty()) {
    const std::string& _s = this->_internal_message_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ReportChatMessage.message_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .mmorpg.ReportReason reason = 3;
  if (this->_internal_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_reason(), target);
  }

  // string additional_info = 4;
  if (!this->_internal_additional_info().empty()) {
    const std::string& _s = this->_internal_additional_info();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ReportChatMessage.additional_info");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ReportChatMessage)
  return target;
}

::size_t ReportChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ReportChatMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reporter_id = 1;
  if (!this->_internal_reporter_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_reporter_id());
  }

  // string message_id = 2;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message_id());
  }

  // string additional_info = 4;
  if (!this->_internal_additional_info().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_additional_info());
  }

  // .mmorpg.ReportReason reason = 3;
  if (this->_internal_reason() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ReportChatMessage::_class_data_ = {
    ReportChatMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ReportChatMessage::GetClassData() const {
  return &_class_data_;
}

void ReportChatMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ReportChatMessage*>(&to_msg);
  auto& from = static_cast<const ReportChatMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ReportChatMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reporter_id().empty()) {
    _this->_internal_set_reporter_id(from._internal_reporter_id());
  }
  if (!from._internal_message_id().empty()) {
    _this->_internal_set_message_id(from._internal_message_id());
  }
  if (!from._internal_additional_info().empty()) {
    _this->_internal_set_additional_info(from._internal_additional_info());
  }
  if (from._internal_reason() != 0) {
    _this->_internal_set_reason(from._internal_reason());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReportChatMessage::CopyFrom(const ReportChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ReportChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ReportChatMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ReportChatMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ReportChatMessage::InternalSwap(ReportChatMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.reporter_id_, &other->_impl_.reporter_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_id_, &other->_impl_.message_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.additional_info_, &other->_impl_.additional_info_, arena);
  swap(_impl_.reason_, other->_impl_.reason_);
}

::google::protobuf::Metadata ReportChatMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[14]);
}
// ===================================================================

class ReportChatResponse::_Internal {
 public:
};

ReportChatResponse::ReportChatResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:mmorpg.ReportChatResponse)
}
inline PROTOBUF_NDEBUG_INLINE ReportChatResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : report_id_(arena, from.report_id_),
        message_(arena, from.message_),
        _cached_size_{0} {}

ReportChatResponse::ReportChatResponse(
    ::google::protobuf::Arena* arena,
    const ReportChatResponse& from)
    : ::google::protobuf::Message(arena) {
  ReportChatResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:mmorpg.ReportChatResponse)
}
inline PROTOBUF_NDEBUG_INLINE ReportChatResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : report_id_(arena),
        message_(arena),
        _cached_size_{0} {}

inline void ReportChatResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
ReportChatResponse::~ReportChatResponse() {
  // @@protoc_insertion_point(destructor:mmorpg.ReportChatResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ReportChatResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.report_id_.Destroy();
  _impl_.message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ReportChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mmorpg.ReportChatResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.report_id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ReportChatResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 50, 2> ReportChatResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ReportChatResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ReportChatResponse, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ReportChatResponse, _impl_.success_)}},
    // string report_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ReportChatResponse, _impl_.report_id_)}},
    // string message = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ReportChatResponse, _impl_.message_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(ReportChatResponse, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string report_id = 2;
    {PROTOBUF_FIELD_OFFSET(ReportChatResponse, _impl_.report_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string message = 3;
    {PROTOBUF_FIELD_OFFSET(ReportChatResponse, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\31\0\11\7\0\0\0\0"
    "mmorpg.ReportChatResponse"
    "report_id"
    "message"
  }},
};

::uint8_t* ReportChatResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mmorpg.ReportChatResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_success(), target);
  }

  // string report_id = 2;
  if (!this->_internal_report_id().empty()) {
    const std::string& _s = this->_internal_report_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ReportChatResponse.report_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "mmorpg.ReportChatResponse.message");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mmorpg.ReportChatResponse)
  return target;
}

::size_t ReportChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mmorpg.ReportChatResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string report_id = 2;
  if (!this->_internal_report_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_report_id());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ReportChatResponse::_class_data_ = {
    ReportChatResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ReportChatResponse::GetClassData() const {
  return &_class_data_;
}

void ReportChatResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ReportChatResponse*>(&to_msg);
  auto& from = static_cast<const ReportChatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:mmorpg.ReportChatResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_report_id().empty()) {
    _this->_internal_set_report_id(from._internal_report_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ReportChatResponse::CopyFrom(const ReportChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mmorpg.ReportChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ReportChatResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ReportChatResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ReportChatResponse::InternalSwap(ReportChatResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.report_id_, &other->_impl_.report_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata ReportChatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_chat_2eproto_getter, &descriptor_table_chat_2eproto_once,
      file_level_metadata_chat_2eproto[15]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace mmorpg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
