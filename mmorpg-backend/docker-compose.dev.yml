version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: mmorpg-postgres-dev
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: mmorpg
      POSTGRES_INITDB_ARGS: "-E UTF8"
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d mmorpg"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - mmorpg-dev

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mmorpg-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_dev_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - mmorpg-dev

  # NATS Message Queue
  nats:
    image: nats:2.10-alpine
    container_name: mmorpg-nats-dev
    restart: unless-stopped
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
    command: ["-js", "-sd", "/data", "-m", "8222", "-DV"]  # Debug and verbose mode
    volumes:
      - nats_dev_data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - mmorpg-dev

  # Gateway Service (with hot reload)
  gateway:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.dev
      args:
        SERVICE: gateway
    container_name: mmorpg-gateway-dev
    volumes:
      - .:/app
      - go_mod_cache:/go/pkg/mod
    working_dir: /app
    command: air -c .air.toml
    ports:
      - "8080:8090"
      - "2345:2345"  # Delve debugger
    environment:
      - SERVICE_NAME=gateway
      - GO_ENV=development
      - MMORPG_SERVER_PORT=8090
      - MMORPG_DATABASE_URL=postgres://dev:dev@postgres:5432/mmorpg?sslmode=disable
      - MMORPG_REDIS_URL=redis://redis:6379
      - MMORPG_NATS_URL=nats://nats:4222
      - MMORPG_AUTH_PORT=8081
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - mmorpg-dev

  # Auth Service (with hot reload)
  auth:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.dev
      args:
        SERVICE: auth
    container_name: mmorpg-auth-dev
    volumes:
      - .:/app
      - go_mod_cache:/go/pkg/mod
    working_dir: /app
    command: air -c .air.toml
    ports:
      - "8081:8081"
      - "2346:2345"  # Delve debugger
    environment:
      - SERVICE_NAME=auth
      - GO_ENV=development
      - DB_HOST=postgres
      - DB_USER=dev
      - DB_PASSWORD=dev
      - DB_NAME=mmorpg
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
      - LOG_LEVEL=debug
      - JWT_ACCESS_SECRET=dev-access-secret-change-in-production
      - JWT_REFRESH_SECRET=dev-refresh-secret-change-in-production
      - MMORPG_AUTH_PORT=8081
      - MMORPG_DATABASE_URL=postgres://dev:dev@postgres:5432/mmorpg?sslmode=disable
      - MMORPG_REDIS_URL=redis://redis:6379
      - MMORPG_NATS_URL=nats://nats:4222
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - mmorpg-dev

  # Character Service (with hot reload)
  character:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.dev
      args:
        SERVICE: character
    container_name: mmorpg-character-dev
    volumes:
      - .:/app
      - go_mod_cache:/go/pkg/mod
    working_dir: /app
    command: air -c .air.toml
    ports:
      - "8082:8082"
      - "2347:2345"  # Delve debugger
    environment:
      - SERVICE_NAME=character
      - GO_ENV=development
      - DB_HOST=postgres
      - DB_USER=dev
      - DB_PASSWORD=dev
      - DB_NAME=mmorpg
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - mmorpg-dev

  # World Service (with hot reload)
  world:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.dev
      args:
        SERVICE: world
    container_name: mmorpg-world-dev
    volumes:
      - .:/app
      - go_mod_cache:/go/pkg/mod
    working_dir: /app
    command: air -c .air.toml
    ports:
      - "8083:8083"
      - "2348:2345"  # Delve debugger
    environment:
      - SERVICE_NAME=world
      - GO_ENV=development
      - DB_HOST=postgres
      - DB_USER=dev
      - DB_PASSWORD=dev
      - DB_NAME=mmorpg
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - mmorpg-dev

  # Game Service (with hot reload)
  game:
    build:
      context: .
      dockerfile: deployments/docker/Dockerfile.dev
      args:
        SERVICE: game
    container_name: mmorpg-game-dev
    volumes:
      - .:/app
      - go_mod_cache:/go/pkg/mod
    working_dir: /app
    command: air -c .air.toml
    ports:
      - "8084:8084"
      - "2349:2345"  # Delve debugger
    environment:
      - SERVICE_NAME=game
      - GO_ENV=development
      - DB_HOST=postgres
      - DB_USER=dev
      - DB_PASSWORD=dev
      - DB_NAME=mmorpg
      - REDIS_HOST=redis
      - NATS_URL=nats://nats:4222
      - LOG_LEVEL=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    networks:
      - mmorpg-dev

# Volumes
volumes:
  postgres_dev_data:
    driver: local
  redis_dev_data:
    driver: local
  nats_dev_data:
    driver: local
  go_mod_cache:
    driver: local

# Networks
networks:
  mmorpg-dev:
    driver: bridge