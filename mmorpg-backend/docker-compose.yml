# Simplified docker-compose for local development
# This file only includes infrastructure services
# Run services locally with 'go run' for easier debugging

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: mmorpg-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: dev
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: mmorpg
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d mmorpg"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mmorpg-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # NATS Message Queue
  nats:
    image: nats:2.10-alpine
    container_name: mmorpg-nats
    restart: unless-stopped
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
    command: ["-js", "-sd", "/data", "-m", "8222"]
    volumes:
      - nats_data:/data
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Optional: Adminer for database management
  adminer:
    image: adminer:latest
    container_name: mmorpg-adminer
    restart: unless-stopped
    ports:
      - "8091:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    profiles:
      - tools

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nats_data:
    driver: local