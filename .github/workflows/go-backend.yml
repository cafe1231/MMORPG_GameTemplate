name: Go Backend CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'mmorpg-backend/**'
      - '.github/workflows/go-backend.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'mmorpg-backend/**'
      - '.github/workflows/go-backend.yml'

env:
  GO_VERSION: '1.21'
  PROTOC_VERSION: '25.1'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2

    - name: Run golangci-lint
      working-directory: ./mmorpg-backend
      run: $(go env GOPATH)/bin/golangci-lint run --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: mmorpg
          POSTGRES_PASSWORD: mmorpg123
          POSTGRES_DB: mmorpg_dev
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      nats:
        image: nats:2.10-alpine
        ports:
          - 4222:4222
          - 8222:8222

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install protoc
      run: |
        curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC_VERSION }}/protoc-${{ env.PROTOC_VERSION }}-linux-x86_64.zip
        unzip protoc-${{ env.PROTOC_VERSION }}-linux-x86_64.zip -d $HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install protoc-gen-go
      working-directory: ./mmorpg-backend
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Generate Proto Files
      working-directory: ./mmorpg-backend
      run: make proto

    - name: Run tests
      working-directory: ./mmorpg-backend
      env:
        DATABASE_URL: postgres://mmorpg:mmorpg123@localhost:5432/mmorpg_dev?sslmode=disable
        REDIS_URL: redis://localhost:6379
        NATS_URL: nats://localhost:4222
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./mmorpg-backend/coverage.txt
        flags: backend
        name: backend-coverage

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    strategy:
      matrix:
        service: [gateway, auth, character, game, chat, world]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install protoc
      run: |
        curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v${{ env.PROTOC_VERSION }}/protoc-${{ env.PROTOC_VERSION }}-linux-x86_64.zip
        unzip protoc-${{ env.PROTOC_VERSION }}-linux-x86_64.zip -d $HOME/.local
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install protoc-gen-go
      working-directory: ./mmorpg-backend
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

    - name: Generate Proto Files
      working-directory: ./mmorpg-backend
      run: make proto

    - name: Build service
      working-directory: ./mmorpg-backend
      run: |
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o bin/${{ matrix.service }} cmd/${{ matrix.service }}/main.go
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service }}-binary
        path: mmorpg-backend/bin/${{ matrix.service }}

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker images
      working-directory: ./mmorpg-backend
      run: |
        docker buildx build --platform linux/amd64 -t mmorpg-gateway:latest -f build/docker/gateway/Dockerfile .
        docker buildx build --platform linux/amd64 -t mmorpg-auth:latest -f build/docker/auth/Dockerfile .
        docker buildx build --platform linux/amd64 -t mmorpg-character:latest -f build/docker/character/Dockerfile .
        docker buildx build --platform linux/amd64 -t mmorpg-game:latest -f build/docker/game/Dockerfile .
        docker buildx build --platform linux/amd64 -t mmorpg-chat:latest -f build/docker/chat/Dockerfile .
        docker buildx build --platform linux/amd64 -t mmorpg-world:latest -f build/docker/world/Dockerfile .